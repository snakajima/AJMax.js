.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "LINT" "" "September 2010" "" ""
.
.SH "NAME"
\fBlint\fR
.
.SH "Lint"
The \fIlint\fR middleware aids in middleware development, by performing basic cheques at boot, and during requests\. This process currently checks that the:
.
.IP "\(bu" 4
first param of \fBhandle()\fR is \fIreq\fR or \fIrequest\fR
.
.IP "\(bu" 4
second param of \fBhandle()\fR is \fIres\fR or \fIresponse\fR
.
.IP "\(bu" 4
third param of \fBhandle()\fR is \fInext\fR
.
.IP "\(bu" 4
source of \fBhandle()\fR to see if \fBnext()\fR is called, or if the request is responded to
.
.IP "\(bu" 4
\fBreq\.headers\fR is accessed with lowercase
.
.IP "" 0
.
.SS "Example"
.
.nf

var server = connect\.createServer(
    // No named params
    function params(){
        arguments[2]();
    },
    // Does not call next AND does not respond
    function hang(req, res, next){
        // Call foo() instead so
        // that our demo can still function\.
        var foo = next;
        foo();

        // All good
        var ct = req\.headers[\'content\-type\'];
    },
    function allGood(req, res, next){
        // All good
        next();
    },
    function reqHeaders(req, res, next){
        // Request headers are always normalized as
        // lowercased by ryan\'s http parser\.
        var ct = req\.headers[\'Content\-Type\'];
        next();
    },
    function methodUppercase(req, res, next){
        // req\.method should be uppercase
        req\.method = \'get\';
        next();
    }
);

server\.use(\'/\', connect\.lint(server));
.
.fi
.
.SS "Sample Output"
.
.nf

Warning: layer params:0 First parameter should be named req or request, but is undefined
Warning: layer params:0 Second parameter should be named res or response, but is undefined
Warning: layer params:0 Third parameter should be named next, but is undefined
Warning: layer params:0 Does not seem to call next(), or respond to the request
Warning: layer hang:1 Does not seem to call next(), or respond to the request
Warning: layer req\.headers:3 Request headers are lowercased, seems to be accessed with capitals

0) params:
    function (){
        arguments[2]();
    }

1) hang:
    function (req, res, next){
        // Call foo() instead so
        // that our demo can still function\.
        var foo = next;
        foo();

        // All good
        var ct = req\.headers[\'content\-type\'];
    }

3) req\.headers:
    function (req, res, next){
        // Request headers are always normalized as
        // lowercased by ryan\'s http parser\.
        var ct = req\.headers[\'Content\-Type\'];
        next();
    }
.
.fi

