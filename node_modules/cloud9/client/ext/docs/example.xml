<?xml version="1.0" encoding="UTF-8"?>
<javascript>
    <class type="Array" superclass="Object">
        <description></description>
        <properties/>
        <methods>
            <method name="indexOf" scope="instance">
                <description>Checks whether or not the specified object exists in the array.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The object to check for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Removes the specified object from the array.  If the object is not found nothing happens.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The object to remove</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Date" superclass="Object">
        <description>The date parsing and format syntax is a subset of
            &lt;a href=&quot;http://www.php.net/date&quot;&gt;PHP's date() function&lt;/a&gt;, and the formats that are
            supported will provide results equivalent to their PHP versions.
            The following is a list of all currently supported formats:
            &lt;pre&gt;Format  Description                                                               Example returned values
            ------  -----------------------------------------------------------------------   -----------------------
            d     Day of the month, 2 digits with leading zeros                             01 to 31
            D     A short textual representation of the day of the week                     Mon to Sun
            j     Day of the month without leading zeros                                    1 to 31
            l     A full textual representation of the day of the week                      Sunday to Saturday
            N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
            S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
            w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
            z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
            W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
            F     A full textual representation of a month, such as January or March        January to December
            m     Numeric representation of a month, with leading zeros                     01 to 12
            M     A short textual representation of a month                                 Jan to Dec
            n     Numeric representation of a month, without leading zeros                  1 to 12
            t     Number of days in the given month                                         28 to 31
            L     Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.
            o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
            belongs to the previous or next year, that year is used instead)
            Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
            y     A two digit representation of a year                                      Examples: 99 or 03
            a     Lowercase Ante meridiem and Post meridiem                                 am or pm
            A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
            g     12-hour format of an hour without leading zeros                           1 to 12
            G     24-hour format of an hour without leading zeros                           0 to 23
            h     12-hour format of an hour with leading zeros                              01 to 12
            H     24-hour format of an hour with leading zeros                              00 to 23
            i     Minutes, with leading zeros                                               00 to 59
            s     Seconds, with leading zeros                                               00 to 59
            u     Milliseconds, with leading zeroes (arbitrary number of digits allowed)    Examples:
            001 (i.e. 1ms) or
            100 (i.e. 100ms) or
            999 (i.e. 999ms) or
            999876543210 (i.e. 999.876543210ms)
            O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
            P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
            T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
            Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
            c     ISO 8601 date (note: milliseconds, if present, must be specified with     Examples:
            at least 1 digit. There is no limit to how many digits the millisecond    2007-04-17T15:19:21+08:00 or
            value may contain. see http://www.w3.org/TR/NOTE-datetime for more info)  2008-03-16T16:18:22Z or
            2009-02-15T17:17:23.9+01:00 or
            2010-01-14T18:16:24,999876543-07:00
            U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463&lt;/pre&gt;
            Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
            &lt;pre&gt;&lt;code&gt;// Sample date:
            // 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'

            var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
            document.write(dt.format('Y-m-d'));                           // 2007-01-10
            document.write(dt.format('F j, Y, g:i a'));                   // January 10, 2007, 3:05 pm
            document.write(dt.format('l, \\t\\he jS \\of F Y h:i:s A'));  // Wednesday, the 10th of January 2007 03:05:01 PM&lt;/code&gt;&lt;/pre&gt;
            Here are some standard date/time patterns that you might find helpful.  They
            are not part of the source of Date.js, but to use them you can simply copy this
            block of code into any script that is included after Date.js and they will also become
            globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
            &lt;pre&gt;&lt;code&gt;Date.patterns = {
            ISO8601Long:&quot;Y-m-d H:i:s&quot;,
            ISO8601Short:&quot;Y-m-d&quot;,
            ShortDate: &quot;n/j/Y&quot;,
            LongDate: &quot;l, F d, Y&quot;,
            FullDateTime: &quot;l, F d, Y g:i:s A&quot;,
            MonthDay: &quot;F d&quot;,
            ShortTime: &quot;g:i A&quot;,
            LongTime: &quot;g:i:s A&quot;,
            SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,
            UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,
            YearMonth: &quot;F, Y&quot;
            };&lt;/code&gt;&lt;/pre&gt;
            Example usage:
            &lt;pre&gt;&lt;code&gt;var dt = new Date();
        document.write(dt.format(Date.patterns.ShortDate));&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="MILLI" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="SECOND" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="MINUTE" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="HOUR" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="DAY" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="MONTH" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="YEAR" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Date interval constant</description>
            </property>
            <property name="dayNames" type="Array" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; An array of textual day names.
                    Override these values for international dates.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.dayNames = [
                    'SundayInYourLang',
                    'MondayInYourLang',
                    ...
                ];&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="monthNames" type="Array" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; An array of textual month names.
                    Override these values for international dates.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.monthNames = [
                    'JanInYourLang',
                    'FebInYourLang',
                    ...
                ];&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="monthNumbers" type="Object" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).
                    Override these values for international dates.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.monthNumbers = {
                    'ShortJanNameInYourLang':0,
                    'ShortFebNameInYourLang':1,
                    ...
                };&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="formatCodes" type="Object" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; The base format-code to formatting-function hashmap used by the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;format&quot; href=&quot;output/Date.html#format&quot;&gt;format&lt;/a&gt; method.
                    Formatting functions are strings (or functions which return strings) which
                    will return the appropriate value when evaluated in the context of the Date object
                    from which the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;format&quot; href=&quot;output/Date.html#format&quot;&gt;format&lt;/a&gt; method is called.
                    Add to / override these mappings for custom date formatting.
                    Note: Date.format() treats characters as literals if an appropriate mapping cannot be found.
                    Example:
                    &lt;pre&gt;&lt;code&gt;Date.formatCodes.x = &quot;String.leftPad(this.getDate(), 2, '0')&quot;;
                (new Date()).format(&quot;X&quot;); // returns the current day of the month&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
        </properties>
        <methods>
            <method name="getShortMonthName" scope="static">
                <description>&amp;lt;static&amp;gt; Get the short month name for the given month number.
                Override this function for international dates.</description>
                <parameters>
                    <parameter name="month" type="Number" usage="required">
                        <description>A zero-based javascript month number.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getShortDayName" scope="static">
                <description>&amp;lt;static&amp;gt; Get the short day name for the given day number.
                Override this function for international dates.</description>
                <parameters>
                    <parameter name="day" type="Number" usage="required">
                        <description>A zero-based javascript day number.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getMonthNumber" scope="static">
                <description>&amp;lt;static&amp;gt; Get the zero-based javascript month number for the given short/full month name.
                Override this function for international dates.</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The short/full month name.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="parseDate" scope="static">
                <description>&amp;lt;static&amp;gt; Parses the passed string using the specified format. Note that this function expects dates in normal calendar
                    format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of
                    the date format that is not specified will default to the current date value for that part.  Time parts can also
                    be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format
                    string or the parse operation will fail.
                    Example Usage:
                    &lt;pre&gt;&lt;code&gt;//dt = Fri May 25 2007 (current date)
                    var dt = new Date();

                    //dt = Thu May 25 2006 (today's month/day in 2006)
                    dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);

                    //dt = Sun Jan 15 2006 (all date parts specified)
                    dt = Date.parseDate(&quot;2006-01-15&quot;, &quot;Y-m-d&quot;);

                    //dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)
                dt = Date.parseDate(&quot;2006-01-15 3:20:01 PM&quot;, &quot;Y-m-d h:i:s A&quot; );&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="input" type="String" usage="required">
                        <description>The unparsed date as a string.</description>
                    </parameter>
                    <parameter name="format" type="String" usage="required">
                        <description>The format the date is in.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTimezone" scope="instance">
                <description>Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
                    Note: The date string returned by the javascript Date object's toString() method varies
                    between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
                    For a given date string e.g. &quot;Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)&quot;,
                    getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
                    (which may or may not be present), failing which it proceeds to get the timezone abbreviation
                from the GMT offset portion of the date string.</description>
                <parameters/>
            </method>
            <method name="getGMTOffset" scope="instance">
                <description>Get the offset from GMT of the current date (equivalent to the format specifier 'O').</description>
                <parameters>
                    <parameter name="colon" type="Boolean" usage="required">
                        <description>true to separate the hours and minutes with a colon (defaults to false).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getDayOfYear" scope="instance">
                <description>Get the numeric day number of the year, adjusted for leap year.</description>
                <parameters/>
            </method>
            <method name="getWeekOfYear" scope="instance">
                <description>Get the numeric ISO-8601 week number of the year.
                (equivalent to the format specifier 'W', but without a leading zero).</description>
                <parameters/>
            </method>
            <method name="isLeapYear" scope="instance">
                <description>Whether or not the current date is in a leap year.</description>
                <parameters/>
            </method>
            <method name="getFirstDayOfMonth" scope="instance">
                <description>Get the first day of the current month, adjusted for leap year.  The returned value
                    is the numeric day index within the week (0-6) which can be used in conjunction with
                    the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;monthNames&quot; href=&quot;output/Date.html#monthNames&quot;&gt;monthNames&lt;/a&gt; array to retrieve the textual day name.
                    Example:
                    &lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007');
                document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="getLastDayOfMonth" scope="instance">
                <description>Get the last day of the current month, adjusted for leap year.  The returned value
                    is the numeric day index within the week (0-6) which can be used in conjunction with
                    the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;monthNames&quot; href=&quot;output/Date.html#monthNames&quot;&gt;monthNames&lt;/a&gt; array to retrieve the textual day name.
                    Example:
                    &lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007');
                document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="getFirstDateOfMonth" scope="instance">
                <description>Get the date of the first day of the month in which this date resides.</description>
                <parameters/>
            </method>
            <method name="getLastDateOfMonth" scope="instance">
                <description>Get the date of the last day of the month in which this date resides.</description>
                <parameters/>
            </method>
            <method name="getDaysInMonth" scope="instance">
                <description>Get the number of days in the current month, adjusted for leap year.</description>
                <parameters/>
            </method>
            <method name="getSuffix" scope="instance">
                <description>Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').</description>
                <parameters/>
            </method>
            <method name="clone" scope="instance">
                <description>Creates and returns a new Date instance with the exact same date value as the called instance.
                    Dates are copied and passed by reference, so if a copied date variable is modified later, the original
                    variable will also be changed.  When the intention is to create a new variable that will not
                    modify the original instance, you should create a clone.
                    Example of correctly cloning a date:
                    &lt;pre&gt;&lt;code&gt;//wrong way:
                    var orig = new Date('10/1/2006');
                    var copy = orig;
                    copy.setDate(5);
                    document.write(orig);  //returns 'Thu Oct 05 2006'!

                    //correct way:
                    var orig = new Date('10/1/2006');
                    var copy = orig.clone();
                    copy.setDate(5);
                document.write(orig);  //returns 'Thu Oct 01 2006'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="clearTime" scope="instance">
                <description>Clears any time information from this date.</description>
                <parameters>
                    <parameter name="clone" type="Boolean" usage="required">
                        <description>true to create a clone of this date, clear the time and return it (defaults to false).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="add" scope="instance">
                <description>Provides a convenient method of performing basic date arithmetic.  This method
                    does not modify the Date instance being called - it creates and returns
                    a new Date instance containing the resulting date value.
                    Examples:
                    &lt;pre&gt;&lt;code&gt;//Basic usage:
                    var dt = new Date('10/29/2006').add(Date.DAY, 5);
                    document.write(dt); //returns 'Fri Oct 06 2006 00:00:00'

                    //Negative values will subtract correctly:
                    var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
                    document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

                    //You can even chain several calls together in one line!
                    var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
                document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="interval" type="String" usage="required">
                        <description>A valid date interval enum value.</description>
                    </parameter>
                    <parameter name="value" type="Number" usage="required">
                        <description>The amount to add to the current date.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="between" scope="instance">
                <description>Checks if this date falls on or between the given start and end dates.</description>
                <parameters>
                    <parameter name="start" type="Date" usage="required">
                        <description>Start date</description>
                    </parameter>
                    <parameter name="end" type="Date" usage="required">
                        <description>End date</description>
                    </parameter>
                </parameters>
            </method>
            <method name="format" scope="instance">
                <description>Formats a date given the supplied format string.</description>
                <parameters>
                    <parameter name="format" type="String" usage="required">
                        <description>The format string.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getElapsed" scope="instance">
                <description>Returns the number of milliseconds between this date and date</description>
                <parameters>
                    <parameter name="date" type="Date" usage="optional">
                        <description>(optional) Defaults to now</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf" superclass="Object">
        <description>apf core utilities and functions.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="isStrict" type="Boolean" scope="instance" access="read-write">
                <description>True if the browser is in strict (standards-compliant) mode, as opposed to quirks mode</description>
            </property>
            <property name="isSecure" type="Boolean" scope="instance" access="read-write">
                <description>True if the page is running over SSL</description>
            </property>
            <property name="isReady" type="Boolean" scope="instance" access="read-write">
                <description>True when the document is fully initialized and ready for action</description>
            </property>
            <property name="enableGarbageCollector" type="Boolean" scope="instance" access="read-write">
                <description>True to automatically uncache orphaned apf.Elements periodically (defaults to true)</description>
            </property>
            <property name="enableListenerCollection" type="Boolean" scope="instance" access="read-write">
                <description>True to automatically purge event listeners after uncaching an element (defaults to false).
                Note: this only happens if enableGarbageCollector is true.</description>
            </property>
            <property name="SSL_SECURE_URL" type="String" scope="instance" access="read-write">
                <description>URL to a blank file used by apf when in secure mode for iframe src and onReady src to prevent
                the IE insecure content warning (defaults to javascript:false).</description>
            </property>
            <property name="BLANK_IMAGE_URL" type="String" scope="instance" access="read-write">
                <description>URL to a 1x1 transparent gif image used by apf to create inline icons with CSS background images. (Defaults to
                &quot;http://extjs.com/s.gif&quot; and you should change this to a URL on your server).</description>
            </property>
            <property name="emptyFn" type="Function" scope="instance" access="read-write">
                <description>A reusable empty function</description>
            </property>
            <property name="isOpera" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Opera.</description>
            </property>
            <property name="isSafari" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Safari.</description>
            </property>
            <property name="isSafari3" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Safari 3.x.</description>
            </property>
            <property name="isSafari2" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Safari 2.x.</description>
            </property>
            <property name="isIE" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Internet Explorer.</description>
            </property>
            <property name="isIE6" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Internet Explorer 6.x.</description>
            </property>
            <property name="isIE7" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Internet Explorer 7.x.</description>
            </property>
            <property name="isGecko" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).</description>
            </property>
            <property name="isGecko2" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser uses a pre-Gecko 1.9 layout engine (e.g. Firefox 2.x).</description>
            </property>
            <property name="isGecko3" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x).</description>
            </property>
            <property name="isBorderBox" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected browser is Internet Explorer running in non-strict mode.</description>
            </property>
            <property name="isLinux" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected platform is Linux.</description>
            </property>
            <property name="isWindows" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected platform is Windows.</description>
            </property>
            <property name="isMac" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected platform is Mac OS.</description>
            </property>
            <property name="isAir" type="Boolean" scope="instance" access="read-write">
                <description>True if the detected platform is Adobe Air.</description>
            </property>
            <property name="useShims" type="Boolean" scope="instance" access="read-write">
                <description>By default, apf intelligently decides whether floating elements should be shimmed. If you are using flash,
                you may want to set this to true.</description>
            </property>
        </properties>
        <methods>
            <method name="applyIf" scope="instance">
                <description>Copies all the properties of config to obj if they don't already exist.</description>
                <parameters>
                    <parameter name="obj" type="Object" usage="required">
                        <description>The receiver of the properties</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The source of the properties</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addBehaviors" scope="instance">
                <description>Applies event listeners to elements by selectors when the document is ready.
                    The event name is specified with an @ suffix.
                    &lt;pre&gt;&lt;code&gt;apf.addBehaviors({
                    // add a listener for click on all anchors in element with id foo
                    '#foo a@click' : function(e, t){
                    // do something
                    },

                    // add the same listener to multiple selectors (separated by comma BEFORE the @)
                    '#foo a, #bar span.some-class@mouseover' : function(){
                    // do something
                    }
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="obj" type="Object" usage="required">
                        <description>The list of behaviors to apply</description>
                    </parameter>
                </parameters>
            </method>
            <method name="id" scope="instance">
                <description>Generates unique ids. If the element already has an id, it is unchanged</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="optional">
                        <description>(optional) The element to generate an id for</description>
                    </parameter>
                    <parameter name="prefix" type="String" usage="optional">
                        <description>(optional) Id prefix (defaults &quot;ext-gen&quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="extend" scope="instance">
                <description>apfends one class with another class and optionally overrides members with the passed literal. This class
                    also adds the function &quot;override()&quot; to the class that can be used to override
                    members on an instance.
                    &lt;p&gt;
                    This function also supports a 2-argument call in which the subclass's constructor is
                    not passed as an argument. In this form, the parameters are as follows:&lt;/p&gt;&lt;p&gt;
                    &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;superclass&lt;/code&gt;
                    &lt;div class=&quot;sub-desc&quot;&gt;The class being extended&lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;overrides&lt;/code&gt;
                    &lt;div class=&quot;sub-desc&quot;&gt;A literal with members which are copied into the subclass's
                    prototype, and are therefore shared among all instances of the new class.&lt;p&gt;
                    This may contain a special member named &lt;tt&gt;&lt;b&gt;constructor&lt;/b&gt;&lt;/tt&gt;. This is used
                    to define the constructor of the new class, and is returned. If this property is
                    &lt;i&gt;not&lt;/i&gt; specified, a constructor is generated and returned which just calls the
                    superclass's constructor passing on its parameters.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;
                    &lt;/ul&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;
                    For example, to create a subclass of the apf GridPanel:
                    &lt;pre&gt;&lt;code&gt;MyGridPanel = apf.extend(apf.grid.GridPanel, {
                    constructor: function(config) {
                    // Your preprocessing here
                    MyGridPanel.superclass.constructor.apply(this, arguments);
                    // Your postprocessing here
                    },

                    yourMethod: function() {
                    // etc.
                    }
                    });&lt;/code&gt;&lt;/pre&gt;
                &lt;/p&gt;</description>
                <parameters>
                    <parameter name="subclass" type="Function" usage="required">
                        <description>The class inheriting the functionality</description>
                    </parameter>
                    <parameter name="superclass" type="Function" usage="required">
                        <description>The class being extended</description>
                    </parameter>
                    <parameter name="overrides" type="Object" usage="optional">
                        <description>(optional) A literal with members which are copied into the subclass's
                        prototype, and are therefore shared between all instances of the new class.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="override" scope="instance">
                <description>Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
                    Usage:&lt;pre&gt;&lt;code&gt;apf.override(MyClass, {
                    newMethod1: function(){
                    // etc.
                    },
                    newMethod2: function(foo){
                    // etc.
                    }
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="origclass" type="Object" usage="required">
                        <description>The class to override</description>
                    </parameter>
                    <parameter name="overrides" type="Object" usage="required">
                        <description>The list of functions to add to origClass. This should be specified as an object literal
                        containing one or more methods.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="namespace" scope="instance">
                <description>Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:
                    &lt;pre&gt;&lt;code&gt;apf.namespace('Company', 'Company.data');
                    Company.Widget = function() { ... }
                Company.data.CustomStore = function(config) { ... }&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="namespace1" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="namespace2" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="etc" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="urlEncode" scope="instance">
                <description>Takes an object and converts it to an encoded URL. e.g. apf.urlEncode({foo: 1, bar: 2}); would return &quot;foo=1&amp;bar=2&quot;.  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="urlDecode" scope="instance">
                <description>Takes an encoded URL and and converts it to an object. e.g. apf.urlDecode(&quot;foo=1&amp;bar=2&quot;); would return {foo: 1, bar: 2} or apf.urlDecode(&quot;foo=1&amp;bar=2&amp;bar=3&amp;bar=4&quot;, true); would return {foo: 1, bar: [2, 3, 4]}.</description>
                <parameters>
                    <parameter name="string" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="overwrite" type="Boolean" usage="optional">
                        <description>(optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Iterates an array calling the passed function with each item, stopping if your function returns false. If the
                    passed array is not really an array, your function is called once with it.
                The supplied function is called with (Object item, Number index, Array allItems).</description>
                <parameters>
                    <parameter name="array" type="Array/NodeList/Mixed" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="escapeRe" scope="instance">
                <description>Escapes the passed string for use in a regular expression</description>
                <parameters>
                    <parameter name="str" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getDom" scope="instance">
                <description>Return the dom node for the passed string (id), dom node, or apf.Element</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getDoc" scope="instance">
                <description>Returns the current HTML document object as an &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getBody" scope="instance">
                <description>Returns the current document body as an &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getCmp" scope="instance">
                <description>Shorthand for &lt;a ext:cls=&quot;apf.ComponentMgr&quot; ext:member=&quot;get&quot; href=&quot;output/apf.ComponentMgr.html#get&quot;&gt;apf.ComponentMgr.get&lt;/a&gt;</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="num" scope="instance">
                <description>Utility method for validating that a value is numeric, returning the specified default value if it is not.</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>Should be a number, but any type will be handled appropriately</description>
                    </parameter>
                    <parameter name="defaultValue" type="Number" usage="required">
                        <description>The value to return if the original value is non-numeric</description>
                    </parameter>
                </parameters>
            </method>
            <method name="destroy" scope="instance">
                <description>Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
                    DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
                    intended for arguments of type &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt;, but any subclass of
                    &lt;a ext:cls=&quot;apf.util.Observable&quot; href=&quot;output/apf.util.Observable.html&quot;&gt;apf.util.Observable&lt;/a&gt; can be passed in.  Any number of elements and/or components can be
                passed into this function in a single call as separate arguments.</description>
                <parameters>
                    <parameter name="arg1" type="Mixed" usage="required">
                        <description>An &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; or &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; to destroy</description>
                    </parameter>
                    <parameter name="arg2" type="Mixed" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                    <parameter name="etc..." type="Mixed" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeNode" scope="instance">
                <description>Removes a DOM node from the document.  The body node will be ignored if passed in.</description>
                <parameters>
                    <parameter name="node" type="HTMLElement" usage="required">
                        <description>The node to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="type" scope="instance">
                <description>Returns the type of object that is passed in. If the object passed in is null or undefined it
                    return false otherwise it returns one of the following values:&lt;ul&gt;
                    &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: If the object passed is a string&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;number&lt;/b&gt;: If the object passed is a number&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;boolean&lt;/b&gt;: If the object passed is a boolean value&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;function&lt;/b&gt;: If the object passed is a function reference&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;object&lt;/b&gt;: If the object passed is an object&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;array&lt;/b&gt;: If the object passed is an array&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;regexp&lt;/b&gt;: If the object passed is a regular expression&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;element&lt;/b&gt;: If the object passed is a DOM Element&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;nodelist&lt;/b&gt;: If the object passed is a DOM NodeList&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;textnode&lt;/b&gt;: If the object passed is a DOM text node and contains something other than whitespace&lt;/li&gt;
                &lt;li&gt;&lt;b&gt;whitespace&lt;/b&gt;: If the object passed is a DOM text node and contains only whitespace&lt;/li&gt;</description>
                <parameters>
                    <parameter name="object" type="Mixed" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="isEmpty" scope="instance">
                <description>Returns true if the passed value is null, undefined or an empty string (optional).</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to test</description>
                    </parameter>
                    <parameter name="allowBlank" type="Boolean" usage="optional">
                        <description>(optional) Pass true if an empty string is not considered empty</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isArray" scope="instance">
                <description>Returns true if the passed object is a JavaScript array, otherwise false.</description>
                <parameters>
                    <parameter name="The" type="Object" usage="required">
                        <description>object to test</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isDate" scope="instance">
                <description>Returns true if the passed object is a JavaScript date object, otherwise false.</description>
                <parameters>
                    <parameter name="The" type="Object" usage="required">
                        <description>object to test</description>
                    </parameter>
                </parameters>
            </method>
            <method name="select" scope="instance">
                <description>Selects elements based on the passed CSS selector to enable working on them as 1.</description>
                <parameters>
                    <parameter name="selector" type="String/Array" usage="required">
                        <description>The CSS selector or an array of elements</description>
                    </parameter>
                    <parameter name="unique" type="Boolean" usage="optional">
                        <description>(optional) true to create a unique apf.Element for each element (defaults to a shared flyweight object)</description>
                    </parameter>
                    <parameter name="root" type="HTMLElement/String" usage="optional">
                        <description>(optional) The root element of the query or id of the root</description>
                    </parameter>
                </parameters>
            </method>
            <method name="query" scope="instance">
                <description>Selects an array of DOM nodes by CSS/XPath selector. Shorthand of &lt;a ext:cls=&quot;apf.DomQuery&quot; ext:member=&quot;select&quot; href=&quot;output/apf.DomQuery.html#select&quot;&gt;apf.DomQuery.select&lt;/a&gt;</description>
                <parameters>
                    <parameter name="path" type="String" usage="required">
                        <description>The selector/xpath query</description>
                    </parameter>
                    <parameter name="root" type="Node" usage="optional">
                        <description>(optional) The start of the query (defaults to document).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="get" scope="instance">
                <description>Static method to retrieve Element objects. Uses simple caching to consistently return the same object.
                    Automatically fixes if an object was recreated with the same id via AJAX or DOM.
                Shorthand of &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;get&quot; href=&quot;output/apf.Element.html#get&quot;&gt;apf.Element.get&lt;/a&gt;</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The id of the node, a DOM Node or an existing Element.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fly" scope="static">
                <description>&amp;lt;static&amp;gt; Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
                    the dom node can be overwritten by other code.
                Shorthand of &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;fly&quot; href=&quot;output/apf.Element.html#fly&quot;&gt;apf.Element.fly&lt;/a&gt;</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The dom node or id</description>
                    </parameter>
                    <parameter name="named" type="String" usage="optional">
                        <description>(optional) Allows for creation of named reusable flyweights to
                        prevent conflicts (e.g. internally apf uses &quot;_internal&quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onReady" scope="instance">
                <description>Fires when the document is ready (before onload and before images are loaded).  Shorthand of &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;onDocumentReady&quot; href=&quot;output/apf.EventManager.html#onDocumentReady&quot;&gt;apf.EventManager.onDocumentReady&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>An object that becomes the scope of the handler</description>
                    </parameter>
                    <parameter name="override" type="boolean" usage="required">
                        <description>If true, the obj passed in becomes
                        the execution scope of the listener</description>
                    </parameter>
                </parameters>
            </method>
            <method name="apply" scope="instance">
                <description>
                Copies all the properties of config to obj.</description>
                <parameters>
                    <parameter name="obj" type="Object" usage="required">
                        <description>The receiver of the properties</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The source of the properties</description>
                    </parameter>
                    <parameter name="defaults" type="Object" usage="required">
                        <description>A different object that will also be applied for default values</description>
                    </parameter>
                </parameters>
            </method>
            <method name="encode" scope="instance">
                <description>Shorthand for &lt;a ext:cls=&quot;apf.util.JSON&quot; ext:member=&quot;encode&quot; href=&quot;output/apf.util.JSON.html#encode&quot;&gt;apf.util.JSON.encode&lt;/a&gt;</description>
                <parameters>
                    <parameter name="o" type="Mixed" usage="required">
                        <description>The variable to encode</description>
                    </parameter>
                </parameters>
            </method>
            <method name="decode" scope="instance">
                <description>Shorthand for &lt;a ext:cls=&quot;apf.util.JSON&quot; ext:member=&quot;decode&quot; href=&quot;output/apf.util.JSON.html#decode&quot;&gt;apf.util.JSON.decode&lt;/a&gt;</description>
                <parameters>
                    <parameter name="json" type="String" usage="required">
                        <description>The JSON string</description>
                    </parameter>
                </parameters>
            </method>
            <method name="reg" scope="instance">
                <description>Shorthand for &lt;a ext:cls=&quot;apf.ComponentMgr&quot; ext:member=&quot;registerType&quot; href=&quot;output/apf.ComponentMgr.html#registerType&quot;&gt;apf.ComponentMgr.registerType&lt;/a&gt;</description>
                <parameters>
                    <parameter name="xtype" type="String" usage="required">
                        <description>The mnemonic string by which the Component class
                        may be looked up.</description>
                    </parameter>
                    <parameter name="cls" type="Constructor" usage="required">
                        <description>The new Component class.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Action" superclass="Object">
        <description>&lt;p&gt;An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
            can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
            updates across any components that support the Action interface (primarily &lt;a ext:cls=&quot;apf.Toolbar&quot; href=&quot;output/apf.Toolbar.html&quot;&gt;apf.Toolbar&lt;/a&gt;, &lt;a ext:cls=&quot;apf.Button&quot; href=&quot;output/apf.Button.html&quot;&gt;apf.Button&lt;/a&gt;
            and &lt;a ext:cls=&quot;apf.menu.Menu&quot; href=&quot;output/apf.menu.Menu.html&quot;&gt;apf.menu.Menu&lt;/a&gt; components).&lt;/p&gt;
            &lt;p&gt;Aside from supporting the config object interface, any component that needs to use Actions must also support
            the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),
            setDisabled(boolean), setVisible(boolean) and setHandler(function).&lt;/p&gt;
            Example usage:&lt;br&gt;
            &lt;pre&gt;&lt;code&gt;// Define the shared action.  Each component below will have the same
            // display text and icon, and will display the same message on click.
            var action = new apf.Action({
            text: 'Do something',
            handler: function(){
            apf.Msg.alert('Click', 'You did something.');
            },
            iconCls: 'do-something'
            });

            var panel = new apf.Panel({
            title: 'Actions',
            width:500,
            height:300,
            tbar: [
            // Add the action directly to a toolbar as a menu button
            action, {
            text: 'Action Menu',
            // Add the action to a menu as a text item
            menu: [action]
            }
            ],
            items: [
            // Add the action to the panel body as a standard button
            new apf.Button(action)
            ],
            renderTo: apf.getBody()
            });

            // Change the text for all components using the action
        action.setText('Something else');&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="isDisabled" type="Object" scope="instance" access="read-write">
                <description>Returns true if the components using this action are currently disabled, else returns false.  Read-only.</description>
            </property>
            <property name="isHidden" type="Object" scope="instance" access="read-write">
                <description>Returns true if the components using this action are currently hidden, else returns false.  Read-only.</description>
            </property>
        </properties>
        <methods>
            <method name="setText" scope="instance">
                <description>Sets the text to be displayed by all components using this action.</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to display</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getText" scope="instance">
                <description>Gets the text currently displayed by all components using this action.</description>
                <parameters/>
            </method>
            <method name="setIconClass" scope="instance">
                <description>Sets the icon CSS class for all components using this action.  The class should supply
                a background image that will be used as the icon image.</description>
                <parameters>
                    <parameter name="cls" type="String" usage="required">
                        <description>The CSS class supplying the icon image</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getIconClass" scope="instance">
                <description>Gets the icon CSS class currently used by all components using this action.</description>
                <parameters/>
            </method>
            <method name="setDisabled" scope="instance">
                <description>Sets the disabled state of all components using this action.  Shortcut method
                for &lt;a ext:cls=&quot;apf.Action&quot; ext:member=&quot;enable&quot; href=&quot;output/apf.Action.html#enable&quot;&gt;enable&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Action&quot; ext:member=&quot;disable&quot; href=&quot;output/apf.Action.html#disable&quot;&gt;disable&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="disabled" type="Boolean" usage="required">
                        <description>True to disable the component, false to enable it</description>
                    </parameter>
                </parameters>
            </method>
            <method name="enable" scope="instance">
                <description>Enables all components using this action.</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>Disables all components using this action.</description>
                <parameters/>
            </method>
            <method name="setHidden" scope="instance">
                <description>Sets the hidden state of all components using this action.  Shortcut method
                for &lt;a ext:cls=&quot;apf.Action&quot; ext:member=&quot;hide&quot; href=&quot;output/apf.Action.html#hide&quot;&gt;hide&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Action&quot; ext:member=&quot;show&quot; href=&quot;output/apf.Action.html#show&quot;&gt;show&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="hidden" type="Boolean" usage="required">
                        <description>True to hide the component, false to show it</description>
                    </parameter>
                </parameters>
            </method>
            <method name="show" scope="instance">
                <description>Shows all components using this action.</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hides all components using this action.</description>
                <parameters/>
            </method>
            <method name="setHandler" scope="instance">
                <description>Sets the function that will be called by each component using this action when its primary event is triggered.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function that will be invoked by the action's components. The function
                        will be called with no arguments.</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope in which the function will execute</description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Executes the specified function once for each component currently tied to this action.  The function passed
                in should accept a single argument that will be an object that supports the basic Action config/method interface.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to execute for each component</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope in which the function will execute</description>
                    </parameter>
                </parameters>
            </method>
            <method name="execute" scope="instance">
                <description>Executes this action manually using the default handler specified in the original config object.  Any arguments
                passed to this function will be passed on to the handler function.</description>
                <parameters>
                    <parameter name="arg1" type="Mixed" usage="optional">
                        <description>(optional) Variable number of arguments passed to the handler function</description>
                    </parameter>
                    <parameter name="arg2" type="Mixed" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                    <parameter name="etc..." type="Mixed" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Ajax" superclass="apf.data.Connection">
        <description>Global Ajax request class.  Provides a simple way to make Ajax requests with maximum flexibility.  Example usage:
            &lt;pre&gt;&lt;code&gt;// Basic request
            apf.Ajax.request({
            url: 'foo.php',
            success: someFn,
            failure: otherFn,
            headers: {
            'my-header': 'foo'
            },
            params: { foo: 'bar' }
            });

            // Simple ajax form submission
            apf.Ajax.request({
            form: 'some-form',
            params: 'foo=bar'
            });

            // Default headers to pass in every request
            apf.Ajax.defaultHeaders = {
            'Powered-By': 'apf'
            };

            // Global Ajax events can be handled on every request!
        apf.Ajax.on('beforerequest', this.showSpinner, this);&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="disableCaching" type="Boolean" scope="instance" access="read-write">
                <description>
                True to add a unique cache-buster param to GET requests. (defaults to true)</description>
            </property>
            <property name="url" type="String" scope="instance" access="read-write">
                <description>
                The default URL to be used for requests to the server. (defaults to undefined)</description>
            </property>
            <property name="extraParams" type="Object" scope="instance" access="read-write">
                <description>
                    An object containing properties which are used as
                extra parameters to each request made by this object. (defaults to undefined)</description>
            </property>
            <property name="defaultHeaders" type="Object" scope="instance" access="read-write">
                <description>
                An object containing request headers which are added to each request made by this object. (defaults to undefined)</description>
            </property>
            <property name="method" type="String" scope="instance" access="read-write">
                <description>
                    The default HTTP method to be used for requests. Note that this is case-sensitive and should be all caps (defaults
                to undefined; if not set but parms are present will use &quot;POST,&quot; otherwise &quot;GET.&quot;)</description>
            </property>
            <property name="timeout" type="Number" scope="instance" access="read-write">
                <description>
                The timeout in milliseconds to be used for requests. (defaults to 30000)</description>
            </property>
            <property name="autoAbort" type="Boolean" scope="instance" access="read-write">
                <description>
                Whether a new request should abort any pending requests. (defaults to false)</description>
            </property>
        </properties>
        <methods>
            <method name="serializeForm" scope="instance">
                <description>Serialize the passed form into a url encoded string</description>
                <parameters>
                    <parameter name="form" type="String/HTMLElement" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.BoxComponent" superclass="apf.Component">
        <description>Base class for any visual &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; that uses a box container.  BoxComponent provides automatic box
            model adjustments for sizing and positioning and will work correctly withnin the Component rendering model.  All
            container classes should subclass BoxComponent so that they will work consistently when nested within other apf
        layout containers.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="apf.Element/String/Object" usage="required">
                        <description>The configuration options.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setSize" scope="instance">
                <description>Sets the width and height of the component.  This method fires the &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;resize&quot; href=&quot;output/apf.BoxComponent.html#resize&quot;&gt;resize&lt;/a&gt; event.  This method can accept
                either width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.</description>
                <parameters>
                    <parameter name="width" type="Number/Object" usage="required">
                        <description>The new width to set, or a size object in the format {width, height}</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height to set (not required if a size object is passed as the first arg)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setWidth" scope="instance">
                <description>Sets the width of the component.  This method fires the &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;resize&quot; href=&quot;output/apf.BoxComponent.html#resize&quot;&gt;resize&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width to set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setHeight" scope="instance">
                <description>Sets the height of the component.  This method fires the &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;resize&quot; href=&quot;output/apf.BoxComponent.html#resize&quot;&gt;resize&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height to set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getSize" scope="instance">
                <description>Gets the current size of the component's underlying element.</description>
                <parameters/>
            </method>
            <method name="getPosition" scope="instance">
                <description>Gets the current XY position of the component's underlying element.</description>
                <parameters>
                    <parameter name="local" type="Boolean" usage="optional">
                        <description>(optional) If true the element's left and top are returned instead of page XY (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getBox" scope="instance">
                <description>Gets the current box measurements of the component's underlying element.</description>
                <parameters>
                    <parameter name="local" type="Boolean" usage="optional">
                        <description>(optional) If true the element's left and top are returned instead of page XY (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="updateBox" scope="instance">
                <description>Sets the current box measurements of the component's underlying element.</description>
                <parameters>
                    <parameter name="box" type="Object" usage="required">
                        <description>An object in the format {x, y, width, height}</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setPosition" scope="instance">
                <description>Sets the left and top of the component.  To set the page XY position instead, use &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;setPagePosition&quot; href=&quot;output/apf.BoxComponent.html#setPagePosition&quot;&gt;setPagePosition&lt;/a&gt;.
                This method fires the &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;move&quot; href=&quot;output/apf.BoxComponent.html#move&quot;&gt;move&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="left" type="Number" usage="required">
                        <description>The new left</description>
                    </parameter>
                    <parameter name="top" type="Number" usage="required">
                        <description>The new top</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setPagePosition" scope="instance">
                <description>Sets the page XY position of the component.  To set the left and top instead, use &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;setPosition&quot; href=&quot;output/apf.BoxComponent.html#setPosition&quot;&gt;setPosition&lt;/a&gt;.
                This method fires the &lt;a ext:cls=&quot;apf.BoxComponent&quot; ext:member=&quot;move&quot; href=&quot;output/apf.BoxComponent.html#move&quot;&gt;move&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="x" type="Number" usage="required">
                        <description>The new x position</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="required">
                        <description>The new y position</description>
                    </parameter>
                </parameters>
            </method>
            <method name="syncSize" scope="instance">
                <description>Force the component's size to recalculate based on the underlying element's current height and width.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.Button" superclass="apf.Component">
        <description>Simple Button class</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new button</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="hidden" type="Boolean" scope="instance" access="read-write">
                <description>Read-only. True if this button is hidden</description>
            </property>
            <property name="disabled" type="Boolean" scope="instance" access="read-write">
                <description>Read-only. True if this button is disabled</description>
            </property>
            <property name="pressed" type="Boolean" scope="instance" access="read-write">
                <description>Read-only. True if this button is pressed (only if enableToggle = true)</description>
            </property>
            <property name="ownerCt" type="apf.Panel" scope="instance" access="read-write">
                <description>The Button's owner &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;apf.Panel&lt;/a&gt; (defaults to undefined, and is set automatically when
                the Button is added to a container).  Read-only.</description>
            </property>
        </properties>
        <methods>
            <method name="initComponent" scope="instance">
                <description></description>
                <parameters/>
            </method>
            <method name="setIconClass" scope="instance">
                <description>Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
                the value of the &lt;a ext:cls=&quot;iconCls&quot; href=&quot;output/iconCls.html&quot;&gt;iconCls&lt;/a&gt; config internally.</description>
                <parameters>
                    <parameter name="cls" type="String" usage="required">
                        <description>The CSS class providing the icon image</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setHandler" scope="instance">
                <description>Assigns this button's click handler</description>
                <parameters>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The function to call when the button is clicked</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) Scope for the function passed in</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setText" scope="instance">
                <description>Sets this button's text</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The button text</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getText" scope="instance">
                <description>Gets the text for this button</description>
                <parameters/>
            </method>
            <method name="toggle" scope="instance">
                <description>If a state it passed, it becomes the pressed state otherwise the current state is toggled.</description>
                <parameters>
                    <parameter name="state" type="Boolean" usage="optional">
                        <description>(optional) Force a particular state</description>
                    </parameter>
                </parameters>
            </method>
            <method name="focus" scope="instance">
                <description>Focus the button</description>
                <parameters/>
            </method>
            <method name="showMenu" scope="instance">
                <description>Show this button's menu (if it has one)</description>
                <parameters/>
            </method>
            <method name="hideMenu" scope="instance">
                <description>Hide this button's menu (if it has one)</description>
                <parameters/>
            </method>
            <method name="hasVisibleMenu" scope="instance">
                <description>Returns true if the button has a menu and it is visible</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.ColorPalette" superclass="apf.Component">
        <description>Simple color palette class for choosing colors.  The palette can be rendered to any container.&lt;br /&gt;
            Here's an example of typical usage:
            &lt;pre&gt;&lt;code&gt;var cp = new apf.ColorPalette({value:'993300'});  // initial selected color
            cp.render('my-div');

            cp.on('select', function(palette, selColor){
            // do something with selColor
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new ColorPalette</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="colors" type="Array" scope="instance" access="read-write">
                <description>&lt;p&gt;An array of 6-digit color hex code strings (without the # symbol).  This array can contain any number
                    of colors, and each hex code should be unique.  The width of the palette is controlled via CSS by adjusting
                    the width property of the 'x-color-palette' class (or assigning a custom class), so you can balance the number
                    of colors with the width setting until the box is symmetrical.&lt;/p&gt;
                    &lt;p&gt;You can override individual colors if needed:&lt;/p&gt;
                    &lt;pre&gt;&lt;code&gt;var cp = new apf.ColorPalette();
                    cp.colors[0] = &quot;FF0000&quot;;  // change the first box to red&lt;/code&gt;&lt;/pre&gt;

                    Or you can provide a custom array of your own for complete control:
                    &lt;pre&gt;&lt;code&gt;var cp = new apf.ColorPalette();
                cp.colors = [&quot;000000&quot;, &quot;993300&quot;, &quot;333300&quot;];&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
        </properties>
        <methods>
            <method name="select" scope="instance">
                <description>Selects the specified color in the palette (fires the &lt;a ext:cls=&quot;apf.ColorPalette&quot; ext:member=&quot;select&quot; href=&quot;output/apf.ColorPalette.html#select&quot;&gt;select&lt;/a&gt; event)</description>
                <parameters>
                    <parameter name="color" type="String" usage="required">
                        <description>A valid 6-digit color hex code (# will be stripped if included)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Component" superclass="apf.util.Observable">
        <description>&lt;p&gt;Base class for all apf components.  All subclasses of Component can automatically participate in the standard
            apf component lifecycle of creation, rendering and destruction.  They also have automatic support for basic hide/show
            and enable/disable behavior.  Component allows any subclass to be lazy-rendered into any &lt;a ext:cls=&quot;apf.Container&quot; href=&quot;output/apf.Container.html&quot;&gt;apf.Container&lt;/a&gt; and
            to be automatically registered with the &lt;a ext:cls=&quot;apf.ComponentMgr&quot; href=&quot;output/apf.ComponentMgr.html&quot;&gt;apf.ComponentMgr&lt;/a&gt; so that it can be referenced at any time via
            &lt;a ext:cls=&quot;apf&quot; ext:member=&quot;getCmp&quot; href=&quot;output/apf.html#getCmp&quot;&gt;apf.getCmp&lt;/a&gt;.  All visual widgets that require rendering into a layout should subclass Component (or
            &lt;a ext:cls=&quot;apf.BoxComponent&quot; href=&quot;output/apf.BoxComponent.html&quot;&gt;apf.BoxComponent&lt;/a&gt; if managed box model handling is required).&lt;/p&gt;
            &lt;p&gt;Every component has a specific xtype, which is its apf-specific type name, along with methods for checking the
            xtype like &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;getXType&quot; href=&quot;output/apf.Component.html#getXType&quot;&gt;getXType&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;isXType&quot; href=&quot;output/apf.Component.html#isXType&quot;&gt;isXType&lt;/a&gt;. This is the list of all valid xtypes:&lt;/p&gt;
            &lt;pre&gt;xtype            Class
            -------------    ------------------
            box              apf.BoxComponent
            button           apf.Button
            colorpalette     apf.ColorPalette
            component        apf.Component
            container        apf.Container
            cycle            apf.CycleButton
            dataview         apf.DataView
            datepicker       apf.DatePicker
            editor           apf.Editor
            editorgrid       apf.grid.EditorGridPanel
            grid             apf.grid.GridPanel
            paging           apf.PagingToolbar
            panel            apf.Panel
            progress         apf.ProgressBar
            propertygrid     apf.grid.PropertyGrid
            slider           apf.Slider
            splitbutton      apf.SplitButton
            statusbar        apf.StatusBar
            tabpanel         apf.TabPanel
            treepanel        apf.tree.TreePanel
            viewport         apf.Viewport
            window           apf.Window

            Toolbar components
            ---------------------------------------
            toolbar          apf.Toolbar
            tbbutton         apf.Toolbar.Button
            tbfill           apf.Toolbar.Fill
            tbitem           apf.Toolbar.Item
            tbseparator      apf.Toolbar.Separator
            tbspacer         apf.Toolbar.Spacer
            tbsplit          apf.Toolbar.SplitButton
            tbtext           apf.Toolbar.TextItem

            Form components
            ---------------------------------------
            form             apf.FormPanel
            checkbox         apf.form.Checkbox
            combo            apf.form.ComboBox
            datefield        apf.form.DateField
            field            apf.form.Field
            fieldset         apf.form.FieldSet
            hidden           apf.form.Hidden
            htmleditor       apf.form.HtmlEditor
            label            apf.form.Label
            numberfield      apf.form.NumberField
            radio            apf.form.Radio
            textarea         apf.form.TextArea
            textfield        apf.form.TextField
            timefield        apf.form.TimeField
        trigger          apf.form.TriggerField&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="apf.Element/String/Object" usage="required">
                        <description>The configuration options. If an element is passed, it is set as the internal
                            element and its id used as the component id. If a string is passed, it is assumed to be the id of an existing element
                        and is used as the component id. Otherwise, it is assumed to be a standard config object and is applied to the component.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="initialConfig" type="Object" scope="instance" access="read-write">
                <description>This Component's initial configuration specification. Read-only.</description>
            </property>
            <property name="ownerCt" type="apf.Container" scope="instance" access="read-write">
                <description>The component's owner &lt;a ext:cls=&quot;apf.Container&quot; href=&quot;output/apf.Container.html&quot;&gt;apf.Container&lt;/a&gt; (defaults to undefined, and is set automatically when
                the component is added to a container).  Read-only.</description>
            </property>
            <property name="hidden" type="Boolean" scope="instance" access="read-write">
                <description>
                True if this component is hidden. Read-only.</description>
            </property>
            <property name="disabled" type="Boolean" scope="instance" access="read-write">
                <description>True if this component is disabled. Read-only.</description>
            </property>
            <property name="rendered" type="Boolean" scope="instance" access="read-write">
                <description>True if this component has been rendered. Read-only.</description>
            </property>
        </properties>
        <methods>
            <method name="render" scope="instance">
                <description>&lt;p&gt;Render this Components into the passed HTML element.&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;If you are using a &lt;a ext:cls=&quot;apf.Container&quot; href=&quot;output/apf.Container.html&quot;&gt;Container&lt;/a&gt; object to house this Component, then
                    do not use the render method.&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;A Container's child Components are rendered by that Container's
                    &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; manager when the Container is first rendered.&lt;/p&gt;
                    &lt;p&gt;Certain layout managers allow dynamic addition of child components. Those that do
                    include &lt;a ext:cls=&quot;apf.layout.CardLayout&quot; href=&quot;output/apf.layout.CardLayout.html&quot;&gt;apf.layout.CardLayout&lt;/a&gt;, &lt;a ext:cls=&quot;apf.layout.AnchorLayout&quot; href=&quot;output/apf.layout.AnchorLayout.html&quot;&gt;apf.layout.AnchorLayout&lt;/a&gt;,
                    &lt;a ext:cls=&quot;apf.layout.FormLayout&quot; href=&quot;output/apf.layout.FormLayout.html&quot;&gt;apf.layout.FormLayout&lt;/a&gt;, &lt;a ext:cls=&quot;apf.layout.TableLayout&quot; href=&quot;output/apf.layout.TableLayout.html&quot;&gt;apf.layout.TableLayout&lt;/a&gt;.&lt;/p&gt;
                    &lt;p&gt;If the Container is already rendered when a new child Component is added, you may need to call
                    the Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;doLayout&quot; href=&quot;output/apf.Container.html#doLayout&quot;&gt;doLayout&lt;/a&gt; to refresh the view which causes any
                    unrendered child Components to be rendered. This is required so that you can add multiple
                    child components if needed while only refreshing the layout once.&lt;/p&gt;
                    &lt;p&gt;When creating complex UIs, it is important to remember that sizing and positioning
                    of child items is the responsibility of the Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; manager.
                    If you expect child items to be sized in response to user interactions, you must
                    configure the Container with a layout manager which creates and manages the type of layout you
                    have in mind.&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;Omitting the Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; config means that a basic
                    layout manager is used which does nothnig but render child components sequentially into the
                Container. No sizing or positioning will be performed in this situation.&lt;/b&gt;&lt;/p&gt;</description>
                <parameters>
                    <parameter name="container" type="Element/HTMLElement/String" usage="optional">
                        <description>(optional) The element this Component should be
                        rendered into. If it is being created from existing markup, this should be omitted.</description>
                    </parameter>
                    <parameter name="position" type="String/Number" usage="optional">
                        <description>(optional) The element ID or DOM node index within the container &lt;b&gt;before&lt;/b&gt;
                        which this component will be inserted (defaults to appending to the end of the container)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="applyToMarkup" scope="instance">
                <description>Apply this component to existing markup that is valid. With this function, no call to render() is required.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="addClass" scope="instance">
                <description>Adds a CSS class to the component's underlying element.</description>
                <parameters>
                    <parameter name="cls" type="string" usage="required">
                        <description>The CSS class name to add</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeClass" scope="instance">
                <description>Removes a CSS class from the component's underlying element.</description>
                <parameters>
                    <parameter name="cls" type="string" usage="required">
                        <description>The CSS class name to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="destroy" scope="instance">
                <description>Destroys this component by purging any event listeners, removing the component's element from the DOM,
                    removing the component from its &lt;a ext:cls=&quot;apf.Container&quot; href=&quot;output/apf.Container.html&quot;&gt;apf.Container&lt;/a&gt; (if applicable) and unregistering it from
                    &lt;a ext:cls=&quot;apf.ComponentMgr&quot; href=&quot;output/apf.ComponentMgr.html&quot;&gt;apf.ComponentMgr&lt;/a&gt;.  Destruction is generally handled automatically by the framework and this method
                should usually not need to be called directly.</description>
                <parameters/>
            </method>
            <method name="getEl" scope="instance">
                <description>Returns the underlying &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getId" scope="instance">
                <description>Returns the id of this component.</description>
                <parameters/>
            </method>
            <method name="getItemId" scope="instance">
                <description>Returns the item id of this component.</description>
                <parameters/>
            </method>
            <method name="focus" scope="instance">
                <description>Try to focus this component.</description>
                <parameters>
                    <parameter name="selectText" type="Boolean" usage="optional">
                        <description>(optional) If applicable, true to also select the text in this component</description>
                    </parameter>
                    <parameter name="delay" type="Boolean/Number" usage="optional">
                        <description>(optional) Delay the focus this number of milliseconds (true for 10 milliseconds)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="disable" scope="instance">
                <description>Disable this component.</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>Enable this component.</description>
                <parameters/>
            </method>
            <method name="setDisabled" scope="instance">
                <description>Convenience function for setting disabled/enabled by boolean.</description>
                <parameters>
                    <parameter name="disabled" type="Boolean" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="show" scope="instance">
                <description>Show this component.</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hide this component.</description>
                <parameters/>
            </method>
            <method name="setVisible" scope="instance">
                <description>Convenience function to hide or show this component by boolean.</description>
                <parameters>
                    <parameter name="visible" type="Boolean" usage="required">
                        <description>True to show, false to hide</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isVisible" scope="instance">
                <description>Returns true if this component is visible.</description>
                <parameters/>
            </method>
            <method name="cloneConfig" scope="instance">
                <description>Clone the current component using the original config values passed into this instance by default.</description>
                <parameters>
                    <parameter name="overrides" type="Object" usage="required">
                        <description>A new config containing any properties to override in the cloned version.
                        An id property can be passed on this object, otherwise one will be generated to avoid duplicates.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getXType" scope="instance">
                <description>Gets the xtype for this component as registered with &lt;a ext:cls=&quot;apf.ComponentMgr&quot; href=&quot;output/apf.ComponentMgr.html&quot;&gt;apf.ComponentMgr&lt;/a&gt;. For a list of all
                    available xtypes, see the &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; header. Example usage:
                    &lt;pre&gt;&lt;code&gt;var t = new apf.form.TextField();
                alert(t.getXType());  // alerts 'textfield'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="isXType" scope="instance">
                <description>&lt;p&gt;Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
                    from the xtype (default) or whether it is directly of the xtype specified (shallow = true).&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;If using your own subclasses, be aware that a Component must register its own xtype
                    to participate in determination of inherited xtypes.&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;For a list of all available xtypes, see the &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; header.&lt;/p&gt;
                    &lt;p&gt;Example usage:&lt;/p&gt;
                    &lt;pre&gt;&lt;code&gt;var t = new apf.form.TextField();
                    var isText = t.isXType('textfield');        // true
                    var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
                var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="xtype" type="String" usage="required">
                        <description>The xtype to check for this Component</description>
                    </parameter>
                    <parameter name="shallow" type="Boolean" usage="optional">
                        <description>(optional) False to check whether this Component is descended from the xtype (this is
                        the default), or true to check whether this Component is directly of the specified xtype.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getXTypes" scope="instance">
                <description>&lt;p&gt;Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
                    available xtypes, see the &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; header.&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;If using your own subclasses, be aware that a Component must register its own xtype
                    to participate in determination of inherited xtypes.&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;Example usage:&lt;/p&gt;
                    &lt;pre&gt;&lt;code&gt;
                    var t = new apf.form.TextField();
                alert(t.getXTypes());  // alerts 'component/box/field/textfield'&lt;/pre&gt;&lt;/code&gt;</description>
                <parameters/>
            </method>
            <method name="findParentBy" scope="instance">
                <description>Find a container above this component at any level by a custom function. If the passed function returns
                true, the container will be returned. The passed function is called with the arguments (container, this component).</description>
                <parameters>
                    <parameter name="fcn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findParentByType" scope="instance">
                <description>Find a container above this component at any level by xtype or class</description>
                <parameters>
                    <parameter name="xtype" type="String/Class" usage="required">
                        <description>The xtype string for a component, or the class of the component directly</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.ComponentMgr" superclass="Object">
        <description>&lt;p&gt;Provides a registry of all Components (specifically subclasses of
            &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt;) on a page so that they can be easily accessed by
            component id (see &lt;a ext:cls=&quot;apf.getCmp&quot; href=&quot;output/apf.getCmp.html&quot;&gt;apf.getCmp&lt;/a&gt;).&lt;/p&gt;
            &lt;p&gt;This object also provides a registry of available Component &lt;i&gt;classes&lt;/i&gt;
            indexed by a mnemonic code known as the Component's &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;xtype&quot; href=&quot;output/apf.Component.html#xtype&quot;&gt;apf.Component.xtype&lt;/a&gt;.
            The &lt;tt&gt;xtype&lt;/tt&gt; provides a way to avoid instantiating child Components
            when creating a full, nested config object for a complete apf page.&lt;/p&gt;
            &lt;p&gt;
            A child Component may be specified simply as a &lt;i&gt;config object&lt;/i&gt;
            as long as the correct xtype is specified so that if and when the Component
            needs rendering, the correct type can be looked up for lazy instantiation.&lt;/p&gt;
        &lt;p&gt;For a list of all available xtypes, see &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="all" type="MixedCollection" scope="instance" access="read-write">
                <description>The MixedCollection used internally for the component cache. An example usage may be subscribing to
                events on the MixedCollection to monitor addition or removal.  Read-only.</description>
            </property>
        </properties>
        <methods>
            <method name="register" scope="instance">
                <description>Registers a component.</description>
                <parameters>
                    <parameter name="c" type="apf.Component" usage="required">
                        <description>The component</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description>Unregisters a component.</description>
                <parameters>
                    <parameter name="c" type="apf.Component" usage="required">
                        <description>The component</description>
                    </parameter>
                </parameters>
            </method>
            <method name="get" scope="instance">
                <description>Returns a component by id</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The component id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onAvailable" scope="instance">
                <description>Registers a function that will be called when a specified component is added to ComponentMgr</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The component id</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The callback function</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope of the callback</description>
                    </parameter>
                </parameters>
            </method>
            <method name="registerType" scope="instance">
                <description>&lt;p&gt;Registers a new Component constructor, keyed by a new
                    &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;xtype&quot; href=&quot;output/apf.Component.html#xtype&quot;&gt;apf.Component.xtype&lt;/a&gt;.&lt;/p&gt;
                    &lt;p&gt;Use this method to register new subclasses of &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; so
                    that lazy instantiation may be used when specifying child Components.
                see &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;items&quot; href=&quot;output/apf.Container.html#items&quot;&gt;apf.Container.items&lt;/a&gt;&lt;/p&gt;</description>
                <parameters>
                    <parameter name="xtype" type="String" usage="required">
                        <description>The mnemonic string by which the Component class
                        may be looked up.</description>
                    </parameter>
                    <parameter name="cls" type="Constructor" usage="required">
                        <description>The new Component class.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="create" scope="instance">
                <description>Creates a new Component from the specified config object using the
                config object's &lt;a ext:cls=&quot;apf.component&quot; ext:member=&quot;xtype&quot; href=&quot;output/apf.component.html#xtype&quot;&gt;xtype&lt;/a&gt; to determine the class to instantiate.</description>
                <parameters>
                    <parameter name="{Object}" type="config" usage="required">
                        <description>A configuration object for the Component you wish to create.</description>
                    </parameter>
                    <parameter name="{Constructor}" type="defaultType" usage="required">
                        <description>The constructor to provide the default Component type if
                        the config object does not contain an xtype. (Optional if the config contains an xtype).</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.CompositeElement" superclass="Object">
        <description>Standard composite class. Creates a apf.Element for every element in the collection.
            &lt;br&gt;&lt;br&gt;
            &lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of apf.Element. All apf.Element
            actions will be performed on all the elements in this collection.&lt;/b&gt;
            &lt;br&gt;&lt;br&gt;
            All methods return &lt;i&gt;this&lt;/i&gt; and can be chained.&#13;
            &lt;pre&gt;&lt;code&gt;var els = apf.select(&quot;#some-el div.some-class&quot;, true);
            // or select directly from an existing element
            var el = apf.get('some-el');
            el.select('div.some-class', true);

            els.setWidth(100); // all elements become 100 width
            els.hide(true); // all elements fade out and hide
            // or
        els.setWidth(100).hide(true);&lt;/code&gt;&lt;/pre&gt;</description>
        <properties/>
        <methods>
            <method name="fill" scope="instance">
                <description>Clears this composite and adds the elements returned by the passed selector.</description>
                <parameters>
                    <parameter name="els" type="String/Array" usage="required">
                        <description>A string CSS selector, an array of elements or an element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filter" scope="instance">
                <description>Filters this composite to only elements that match the passed selector.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>A string CSS selector</description>
                    </parameter>
                </parameters>
            </method>
            <method name="add" scope="instance">
                <description>Adds elements to this composite.</description>
                <parameters>
                    <parameter name="els" type="String/Array" usage="required">
                        <description>A string CSS selector, an array of elements or an element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Calls the passed function passing (el, this, index) for each element in this composite.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The &lt;i&gt;this&lt;/i&gt; object (defaults to the element)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="item" scope="instance">
                <description>Returns the Element object at the specified index</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="first" scope="instance">
                <description>Returns the first Element</description>
                <parameters/>
            </method>
            <method name="last" scope="instance">
                <description>Returns the last Element</description>
                <parameters/>
            </method>
            <method name="getCount" scope="instance">
                <description>Returns the number of elements in this composite</description>
                <parameters/>
            </method>
            <method name="contains" scope="instance">
                <description>Returns true if this composite contains the passed element</description>
                <parameters>
                    <parameter name="{Mixed}" type="el" usage="required">
                        <description>The id of an element, or an apf.Element, or an HtmlElement to find within the composite collection.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOf" scope="instance">
                <description>Find the index of the passed element within the composite collection.</description>
                <parameters>
                    <parameter name="{Mixed}" type="el" usage="required">
                        <description>The id of an element, or an apf.Element, or an HtmlElement to find within the composite collection.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeElement" scope="instance">
                <description>Removes the specified element(s).</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The id of an element, the Element itself, the index of the element in this composite
                        or an array of any of those.</description>
                    </parameter>
                    <parameter name="removeDom" type="Boolean" usage="optional">
                        <description>(optional) True to also remove the element from the document</description>
                    </parameter>
                </parameters>
            </method>
            <method name="replaceElement" scope="instance">
                <description>Replaces the specified element with the passed element.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The id of an element, the Element itself, the index of the element in this composite
                        to replace.</description>
                    </parameter>
                    <parameter name="replacement" type="Mixed" usage="required">
                        <description>The id of an element or the Element itself.</description>
                    </parameter>
                    <parameter name="domReplace" type="Boolean" usage="optional">
                        <description>(Optional) True to remove and replace the element in the document too.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clear" scope="instance">
                <description>Removes all elements.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.CompositeElementLite" superclass="apf.CompositeElement">
        <description>Flyweight composite class. Reuses the same apf.Element for element operations.&#13;
            &lt;pre&gt;&lt;code&gt;var els = apf.select(&quot;#some-el div.some-class&quot;);
            // or select directly from an existing element
            var el = apf.get('some-el');
            el.select('div.some-class');

            els.setWidth(100); // all elements become 100 width
            els.hide(true); // all elements fade out and hide
            // or
            els.setWidth(100).hide(true);&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;
            &lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of apf.Element. All apf.Element
        actions will be performed on all the elements in this collection.&lt;/b&gt;</description>
        <properties/>
        <methods>
            <method name="item" scope="instance">
                <description>Returns a flyweight Element of the dom element object at the specified index</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Calls the passed function passing (el, this, index) for each element in this composite. &lt;b&gt;The element
                    passed is the flyweight (shared) apf.Element instance, so if you require a
                a reference to the dom node, use el.dom.&lt;/b&gt;</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The &lt;i&gt;this&lt;/i&gt; object (defaults to the element)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Container" superclass="apf.BoxComponent">
        <description>&lt;p&gt;Base class for any &lt;a ext:cls=&quot;apf.BoxComponent&quot; href=&quot;output/apf.BoxComponent.html&quot;&gt;apf.BoxComponent&lt;/a&gt; that can contain other components. This class is intended
            to be extended and should generally not need to be created directly via the new keyword. &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;apf.Panel&lt;/a&gt;,
            &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; and &lt;a ext:cls=&quot;apf.TabPanel&quot; href=&quot;output/apf.TabPanel.html&quot;&gt;apf.TabPanel&lt;/a&gt; are the most commonly used Container classes.&lt;/p&gt;
            Containers handle the basic behavior of containing items, namely adding, inserting and removing them.
            The specific layout logic required to visually render contained items is delegated to any one of the different
            &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; classes available.&lt;/p&gt;
            &lt;p&gt;When either specifying child &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;items&quot; href=&quot;output/apf.Container.html#items&quot;&gt;items&lt;/a&gt; of a Container, or dynamically adding components to a Container,
            remember to consider how you wish the Container to arrange those child elements, and whether those child elements
            need to be sized using one of apf's built-in layout schemes.&lt;/p&gt;
            &lt;p&gt;By default, Containers use the &lt;a ext:cls=&quot;apf.layout.ContainerLayout&quot; href=&quot;output/apf.layout.ContainerLayout.html&quot;&gt;ContainerLayout&lt;/a&gt; scheme. This simply renders
            child components, appending them one after the other inside the Container, and does not apply any sizing at all.
            This is a common source of confusion when widgets like GridPanels or TreePanels are added to Containers for
            which no layout has been specified. If a Container is left to use the ContainerLayout scheme, none of its child
            components will be resized, or changed in any way when the Container is resized.&lt;/p&gt;
            &lt;p&gt;A very common example of this is where a developer will attempt to add a GridPanel to a TabPanel by wrapping
            the GridPanel &lt;i&gt;inside&lt;/i&gt; a wrapping Panel and add that wrapping Panel to the TabPanel. This misses the point that
            apf's inheritance means that a GridPanel &lt;b&gt;is&lt;/b&gt; a Component which can be added unadorned into a Container. If
            that wrapping Panel has no layout configuration, then the GridPanel will not be sized as expected.&lt;p&gt;
            &lt;p&gt;Below is an example of adding a newly created GridPanel to a TabPanel. A TabPanel uses &lt;a ext:cls=&quot;apf.layout.CardLayout&quot; href=&quot;output/apf.layout.CardLayout.html&quot;&gt;apf.layout.CardLayout&lt;/a&gt;
            as its layout manager which means all its child items are sized to fit exactly into its client area. The following
            code requires prior knowledge of how to create GridPanels. See &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; href=&quot;output/apf.grid.GridPanel.html&quot;&gt;apf.grid.GridPanel&lt;/a&gt;, &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;
            and &lt;a ext:cls=&quot;apf.data.JsonReader&quot; href=&quot;output/apf.data.JsonReader.html&quot;&gt;apf.data.JsonReader&lt;/a&gt; as well as the grid examples in the apf installation's &lt;tt&gt;examples/grid&lt;/tt&gt;
            directory.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;//  Create the GridPanel.
            myGrid = new apf.grid.GridPanel({
            store: myStore,
            columns: myColumnModel,
            title: 'Results',
            });

            myTabPanel.add(myGrid);
        myTabPanel.setActiveItem(myGrid);&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="items" type="MixedCollection" scope="instance" access="read-write">
                <description>The collection of components in this container as a &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; href=&quot;output/apf.util.MixedCollection.html&quot;&gt;apf.util.MixedCollection&lt;/a&gt;</description>
            </property>
        </properties>
        <methods>
            <method name="add" scope="instance">
                <description>&lt;p&gt;Adds a &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;Component&lt;/a&gt; to this Container. Fires the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;beforeadd&quot; href=&quot;output/apf.Container.html#beforeadd&quot;&gt;beforeadd&lt;/a&gt; event before
                    adding, then fires the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;add&quot; href=&quot;output/apf.Container.html#add&quot;&gt;add&lt;/a&gt; event after the component has been added.&lt;/p&gt;
                    &lt;p&gt;You will never call the render method of a child Component when using a Container.
                    Child Components are rendered by this Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; manager when
                    this Container is first rendered.&lt;/p&gt;
                    &lt;p&gt;Certain layout managers allow dynamic addition of child components. Those that do
                    include &lt;a ext:cls=&quot;apf.layout.CardLayout&quot; href=&quot;output/apf.layout.CardLayout.html&quot;&gt;apf.layout.CardLayout&lt;/a&gt;, &lt;a ext:cls=&quot;apf.layout.AnchorLayout&quot; href=&quot;output/apf.layout.AnchorLayout.html&quot;&gt;apf.layout.AnchorLayout&lt;/a&gt;,
                    &lt;a ext:cls=&quot;apf.layout.FormLayout&quot; href=&quot;output/apf.layout.FormLayout.html&quot;&gt;apf.layout.FormLayout&lt;/a&gt;, &lt;a ext:cls=&quot;apf.layout.TableLayout&quot; href=&quot;output/apf.layout.TableLayout.html&quot;&gt;apf.layout.TableLayout&lt;/a&gt;.&lt;/p&gt;
                    &lt;p&gt;If the Container is already rendered when add is called, you may need to call
                    &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;doLayout&quot; href=&quot;output/apf.Container.html#doLayout&quot;&gt;doLayout&lt;/a&gt; to refresh the view which causes any unrendered child Components
                    to be rendered. This is required so that you can add multiple child components if needed
                    while only refreshing the layout once.&lt;/p&gt;
                    &lt;p&gt;When creating complex UIs, it is important to remember that sizing and positioning
                    of child items is the responsibility of the Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; manager. If
                    you expect child items to be sized in response to user interactions, you must
                    specify a layout manager which creates and manages the type of layout you have in mind.&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;Omitting the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; config means that a basic layout manager is
                    used which does nothnig but render child components sequentially into the Container.
                No sizing or positioning will be performed in this situation.&lt;/b&gt;&lt;/p&gt;</description>
                <parameters>
                    <parameter name="component" type="apf.Component/Object" usage="required">
                        <description>The Component to add.&lt;br&gt;&lt;br&gt;
                            apf uses lazy rendering, and will only render the added Component should
                            it become necessary, that is: when the Container is layed out either on first render
                            or in response to a &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;doLayout&quot; href=&quot;output/apf.Container.html#doLayout&quot;&gt;doLayout&lt;/a&gt; call.&lt;br&gt;&lt;br&gt;
                            A Component config object may be passed instead of an instantiated Component object.
                            The type of Component created from a config object is determined by the &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;xtype&quot; href=&quot;output/apf.Component.html#xtype&quot;&gt;xtype&lt;/a&gt;
                            config property. If no xtype is configured, the Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;defaultType&quot; href=&quot;output/apf.Container.html#defaultType&quot;&gt;defaultType&lt;/a&gt;
                            is used.&lt;br&gt;&lt;br&gt;
                        For a list of all available xtypes, see &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insert" scope="instance">
                <description>Inserts a Component into this Container at a specified index. Fires the
                    &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;beforeadd&quot; href=&quot;output/apf.Container.html#beforeadd&quot;&gt;beforeadd&lt;/a&gt; event before inserting, then fires the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;add&quot; href=&quot;output/apf.Container.html#add&quot;&gt;add&lt;/a&gt; event after the
                Component has been inserted.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index at which the Component will be inserted
                        into the Container's items collection</description>
                    </parameter>
                    <parameter name="component" type="apf.Component" usage="required">
                        <description>The child Component to insert.&lt;br&gt;&lt;br&gt;
                            apf uses lazy rendering, and will only render the inserted Component should
                            it become necessary.&lt;br&gt;&lt;br&gt;
                            A Component config object may be passed in order to avoid the overhead of
                            constructing a real Component object if lazy rendering might mean that the
                            inserted Component will not be rendered immediately. To take advantage of
                            this &quot;lazy instantiation&quot;, set the &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;xtype&quot; href=&quot;output/apf.Component.html#xtype&quot;&gt;apf.Component.xtype&lt;/a&gt; config
                            property to the registered type of the Component wanted.&lt;br&gt;&lt;br&gt;
                        For a list of all available xtypes, see &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Removes a component from this container.  Fires the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;beforeremove&quot; href=&quot;output/apf.Container.html#beforeremove&quot;&gt;beforeremove&lt;/a&gt; event before removing, then fires
                the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;remove&quot; href=&quot;output/apf.Container.html#remove&quot;&gt;remove&lt;/a&gt; event after the component has been removed.</description>
                <parameters>
                    <parameter name="component" type="Component/String" usage="required">
                        <description>The component reference or id to remove.</description>
                    </parameter>
                    <parameter name="autoDestroy" type="Boolean" usage="optional">
                        <description>(optional) True to automatically invoke the removed Component's &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;destroy&quot; href=&quot;output/apf.Component.html#destroy&quot;&gt;apf.Component.destroy&lt;/a&gt; function.
                        Defaults to the value of this Container's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;autoDestroy&quot; href=&quot;output/apf.Container.html#autoDestroy&quot;&gt;autoDestroy&lt;/a&gt; config.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getComponent" scope="instance">
                <description>Gets a direct child Component by id, or by index.</description>
                <parameters>
                    <parameter name="id" type="String/Number" usage="required">
                        <description>or index of child Component to return.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="doLayout" scope="instance">
                <description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
                to an already rendered container, or possibly after changing sizing/position properties of child components.</description>
                <parameters>
                    <parameter name="shallow" type="Boolean" usage="optional">
                        <description>(optional) True to only calc the layout of this component, and let child components auto
                        calc layouts as required (defaults to false, which calls doLayout recursively for each subcontainer)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getLayout" scope="instance">
                <description>Returns the layout currently in use by the container.  If the container does not currently have a layout
                set, a default &lt;a ext:cls=&quot;apf.layout.ContainerLayout&quot; href=&quot;output/apf.layout.ContainerLayout.html&quot;&gt;apf.layout.ContainerLayout&lt;/a&gt; will be created and set as the container's layout.</description>
                <parameters/>
            </method>
            <method name="bubble" scope="instance">
                <description>Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (&lt;i&gt;this&lt;/i&gt;) of
                    function call will be the scope provided or the current component. The arguments to the function
                    will be the args provided or the current component. If the function returns false at any point,
                the bubble is stopped.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to current node)</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) The args to call the function with (default to passing the current component)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="cascade" scope="instance">
                <description>Cascades down the component/container heirarchy from this component (called first), calling the specified function with
                    each component. The scope (&lt;i&gt;this&lt;/i&gt;) of
                    function call will be the scope provided or the current component. The arguments to the function
                    will be the args provided or the current component. If the function returns false at any point,
                the cascade is stopped on that branch.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to current component)</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) The args to call the function with (defaults to passing the current component)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findById" scope="instance">
                <description>Find a component under this container at any level by id</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="findByType" scope="instance">
                <description>Find a component under this container at any level by xtype or class</description>
                <parameters>
                    <parameter name="xtype" type="String/Class" usage="required">
                        <description>The xtype string for a component, or the class of the component directly</description>
                    </parameter>
                </parameters>
            </method>
            <method name="find" scope="instance">
                <description>Find a component under this container at any level by property</description>
                <parameters>
                    <parameter name="prop" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="value" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="findBy" scope="instance">
                <description>Find a component under this container at any level by a custom function. If the passed function returns
                true, the component will be included in the results. The passed function is called with the arguments (component, this container).</description>
                <parameters>
                    <parameter name="fcn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.CycleButton" superclass="apf.SplitButton">
        <description>A specialized SplitButton that contains a menu of &lt;a ext:cls=&quot;apf.menu.CheckItem&quot; href=&quot;output/apf.menu.CheckItem.html&quot;&gt;apf.menu.CheckItem&lt;/a&gt; elements.  The button automatically
            cycles through each menu item on click, raising the button's &lt;a ext:cls=&quot;apf.CycleButton&quot; ext:member=&quot;change&quot; href=&quot;output/apf.CycleButton.html#change&quot;&gt;change&lt;/a&gt; event (or calling the button's
            &lt;a ext:cls=&quot;apf.CycleButton&quot; ext:member=&quot;changeHandler&quot; href=&quot;output/apf.CycleButton.html#changeHandler&quot;&gt;changeHandler&lt;/a&gt; function, if supplied) for the active menu item. Clicking on the arrow section of the
            button displays the dropdown menu just like a normal SplitButton.  Example usage:
            &lt;pre&gt;&lt;code&gt;var btn = new apf.CycleButton({
            showText: true,
            prependText: 'View as ',
            items: [{
            text:'text only',
            iconCls:'view-text',
            checked:true
            },{
            text:'HTML',
            iconCls:'view-html'
            }],
            changeHandler:function(btn, item){
            apf.Msg.alert('Change View', item.text);
            }
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new split button</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setActiveItem" scope="instance">
                <description>Sets the button's active menu item.</description>
                <parameters>
                    <parameter name="item" type="apf.menu.CheckItem" usage="required">
                        <description>The item to activate</description>
                    </parameter>
                    <parameter name="suppressEvent" type="Boolean" usage="required">
                        <description>True to prevent the button's change event from firing (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getActiveItem" scope="instance">
                <description>Gets the currently active menu item.</description>
                <parameters/>
            </method>
            <method name="toggleSelected" scope="instance">
                <description>This is normally called internally on button click, but can be called externally to advance the button's
                    active item programmatically to the next one in the menu.  If the current item is the last one in the menu
                the active item will be set to the first item in the menu.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.DataView" superclass="apf.BoxComponent">
        <description>A mechanism for displaying data using custom layout templates and formatting. DataView uses an &lt;a ext:cls=&quot;apf.XTemplate&quot; href=&quot;output/apf.XTemplate.html&quot;&gt;apf.XTemplate&lt;/a&gt;
            as its internal templating mechanism, and is bound to an &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;
            so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
            provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
            mouseover, mouseout, etc. as well as a built-in selection model. &lt;b&gt;In order to use these features, an &lt;a ext:cls=&quot;apf.DataView&quot; ext:member=&quot;itemSelector&quot; href=&quot;output/apf.DataView.html#itemSelector&quot;&gt;itemSelector&lt;/a&gt;
            config must be provided for the DataView to determine what nodes it will be working with.&lt;/b&gt;
            &lt;p&gt;The example below binds a DataView to a &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; and renders it into an &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;apf.Panel&lt;/a&gt;.&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var store = new apf.data.JsonStore({
            url: 'get-images.php',
            root: 'images',
            fields: [
            'name', 'url',
            {name:'size', type: 'float'},
            {name:'lastmod', type:'date', dateFormat:'timestamp'}
            ]
            });
            store.load();

            var tpl = new apf.XTemplate(
            '&amp;lt;tpl for=&quot;.&quot;&amp;gt;',
            '&amp;lt;div class=&quot;thumb-wrap&quot; id=&quot;{name}&quot;&amp;gt;',
            '&amp;lt;div class=&quot;thumb&quot;&amp;gt;&amp;lt;img src=&quot;{url}&quot; title=&quot;{name}&quot;&amp;gt;&amp;lt;/div&amp;gt;',
            '&amp;lt;span class=&quot;x-editable&quot;&amp;gt;{shortName}&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;',
            '&amp;lt;/tpl&amp;gt;',
            '&amp;lt;div class=&quot;x-clear&quot;&amp;gt;&amp;lt;/div&amp;gt;'
            );

            var panel = new apf.Panel({
            id:'images-view',
            frame:true,
            width:535,
            autoHeight:true,
            collapsible:true,
            layout:'fit',
            title:'Simple DataView',

            items: new apf.DataView({
            store: store,
            tpl: tpl,
            autoHeight:true,
            multiSelect: true,
            overClass:'x-view-over',
            itemSelector:'div.thumb-wrap',
            emptyText: 'No images to display'
            })
            });
        panel.render(document.body);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new DataView</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="refresh" scope="instance">
                <description>Refreshes the view by reloading the data from the store and re-rendering the template.</description>
                <parameters/>
            </method>
            <method name="prepareData" scope="instance">
                <description>Function which can be overridden to provide custom formatting for each Record that is used by this
                DataView's &lt;a ext:cls=&quot;apf.DataView&quot; ext:member=&quot;tpl&quot; href=&quot;output/apf.DataView.html#tpl&quot;&gt;template&lt;/a&gt; to render each node.</description>
                <parameters>
                    <parameter name="data" type="Array/Object" usage="required">
                        <description>The raw data object that was used to create the Record.</description>
                    </parameter>
                    <parameter name="recordIndex" type="Number" usage="required">
                        <description>the index number of the Record being prepared for rendering.</description>
                    </parameter>
                    <parameter name="record" type="Record" usage="required">
                        <description>The Record being prepared for rendering.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="collectData" scope="instance">
                <description>&lt;p&gt;Function which can be overridden which returns the data object passed to this
                    DataView's &lt;a ext:cls=&quot;apf.DataView&quot; ext:member=&quot;tpl&quot; href=&quot;output/apf.DataView.html#tpl&quot;&gt;template&lt;/a&gt; to render the whole DataView.&lt;/p&gt;
                    &lt;p&gt;This is usually an Array of data objects, each element of which is processed by an
                    &lt;a ext:cls=&quot;apf.XTemplate&quot; href=&quot;output/apf.XTemplate.html&quot;&gt;XTemplate&lt;/a&gt; which uses &lt;tt&gt;'&amp;lt;tpl for=&quot;.&quot;&amp;gt;'&lt;/tt&gt; to iterate over its supplied
                    data object as an Array. However, &lt;i&gt;named&lt;/i&gt; properties may be placed into the data object to
                provide non-repeating data such as headings, totals etc.&lt;/p&gt;</description>
                <parameters>
                    <parameter name="{Array}" type="records" usage="required">
                        <description>An Array of &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt;s to be rendered into the DataView.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="refreshNode" scope="instance">
                <description>Refreshes an individual node's data from the store.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The item's data index in the store</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setStore" scope="instance">
                <description>Changes the data store bound to this view and refreshes it.</description>
                <parameters>
                    <parameter name="store" type="Store" usage="required">
                        <description>The store to bind to this view</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findItemFromChild" scope="instance">
                <description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description>
                <parameters>
                    <parameter name="node" type="HTMLElement" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getSelectionCount" scope="instance">
                <description>Gets the number of selected nodes.</description>
                <parameters/>
            </method>
            <method name="getSelectedNodes" scope="instance">
                <description>Gets the currently selected nodes.</description>
                <parameters/>
            </method>
            <method name="getSelectedIndexes" scope="instance">
                <description>Gets the indexes of the selected nodes.</description>
                <parameters/>
            </method>
            <method name="getSelectedRecords" scope="instance">
                <description>Gets an array of the selected records</description>
                <parameters/>
            </method>
            <method name="getRecords" scope="instance">
                <description>Gets an array of the records from an array of nodes</description>
                <parameters>
                    <parameter name="nodes" type="Array" usage="required">
                        <description>The nodes to evaluate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRecord" scope="instance">
                <description>Gets a record from a node</description>
                <parameters>
                    <parameter name="node" type="HTMLElement" usage="required">
                        <description>The node to evaluate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearSelections" scope="instance">
                <description>Clears all selections.</description>
                <parameters>
                    <parameter name="suppressEvent" type="Boolean" usage="optional">
                        <description>(optional) True to skip firing of the selectionchange event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isSelected" scope="instance">
                <description>Returns true if the passed node is selected, else false.</description>
                <parameters>
                    <parameter name="node" type="HTMLElement/Number" usage="required">
                        <description>The node or node index to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="deselect" scope="instance">
                <description>Deselects a node.</description>
                <parameters>
                    <parameter name="node" type="HTMLElement/Number" usage="required">
                        <description>The node to deselect</description>
                    </parameter>
                </parameters>
            </method>
            <method name="select" scope="instance">
                <description>Selects a set of nodes.</description>
                <parameters>
                    <parameter name="nodeInfo" type="Array/HTMLElement/String/Number" usage="required">
                        <description>An HTMLElement template node, index of a template node,
                        id of a template node or an array of any of those to select</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) true to keep existing selections</description>
                    </parameter>
                    <parameter name="suppressEvent" type="Boolean" usage="optional">
                        <description>(optional) true to skip firing of the selectionchange vent</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectRange" scope="instance">
                <description>Selects a range of nodes. All nodes between start and end are selected.</description>
                <parameters>
                    <parameter name="start" type="Number" usage="required">
                        <description>The index of the first node in the range</description>
                    </parameter>
                    <parameter name="end" type="Number" usage="required">
                        <description>The index of the last node in the range</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to retain existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getNode" scope="instance">
                <description>Gets a template node.</description>
                <parameters>
                    <parameter name="nodeInfo" type="HTMLElement/String/Number" usage="required">
                        <description>An HTMLElement template node, index of a template node or the id of a template node</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getNodes" scope="instance">
                <description>Gets a range nodes.</description>
                <parameters>
                    <parameter name="start" type="Number" usage="optional">
                        <description>(optional) The index of the first node in the range</description>
                    </parameter>
                    <parameter name="end" type="Number" usage="optional">
                        <description>(optional) The index of the last node in the range</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOf" scope="instance">
                <description>Finds the index of the passed node.</description>
                <parameters>
                    <parameter name="nodeInfo" type="HTMLElement/String/Number" usage="required">
                        <description>An HTMLElement template node, index of a template node or the id of a template node</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.DatePicker" superclass="apf.Component">
        <description>Simple date picker class.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new DatePicker</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setDisabledDates" scope="instance">
                <description>Replaces any existing disabled dates with new values and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="disabledDates" type="Array/RegExp" usage="required">
                        <description>An array of date strings (see the &lt;a ext:cls=&quot;apf.DatePicker&quot; ext:member=&quot;disabledDates&quot; href=&quot;output/apf.DatePicker.html#disabledDates&quot;&gt;disabledDates&lt;/a&gt; config
                        for details on supported values), or a JavaScript regular expression used to disable a pattern of dates.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDisabledDays" scope="instance">
                <description>Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="disabledDays" type="Array" usage="required">
                        <description>An array of disabled day indexes. See the &lt;a ext:cls=&quot;apf.DatePicker&quot; ext:member=&quot;disabledDays&quot; href=&quot;output/apf.DatePicker.html#disabledDays&quot;&gt;disabledDays&lt;/a&gt; config
                        for details on supported values.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setMinDate" scope="instance">
                <description>Replaces any existing &lt;a ext:cls=&quot;apf.DatePicker&quot; ext:member=&quot;minDate&quot; href=&quot;output/apf.DatePicker.html#minDate&quot;&gt;minDate&lt;/a&gt; with the new value and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="value" type="Date" usage="required">
                        <description>The minimum date that can be selected</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setMaxDate" scope="instance">
                <description>Replaces any existing &lt;a ext:cls=&quot;apf.DatePicker&quot; ext:member=&quot;maxDate&quot; href=&quot;output/apf.DatePicker.html#maxDate&quot;&gt;maxDate&lt;/a&gt; with the new value and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="value" type="Date" usage="required">
                        <description>The maximum date that can be selected</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets the value of the date field</description>
                <parameters>
                    <parameter name="value" type="Date" usage="required">
                        <description>The date to set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getValue" scope="instance">
                <description>Gets the current selected value of the date field</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.DomHelper" superclass="Object">
        <description>Utility class for working with DOM and/or Templates. It transparently supports using HTML fragments or DOM.&lt;br&gt;
            This is an example, where an unordered list with 5 children items is appended to an existing element with id 'my-div':&lt;br&gt;
            &lt;pre&gt;&lt;code&gt;var dh = apf.DomHelper;
            var list = dh.append('my-div', {
            id: 'my-ul', tag: 'ul', cls: 'my-list', children: [
            {tag: 'li', id: 'item0', html: 'List Item 0'},
            {tag: 'li', id: 'item1', html: 'List Item 1'},
            {tag: 'li', id: 'item2', html: 'List Item 2'},
            {tag: 'li', id: 'item3', html: 'List Item 3'},
            {tag: 'li', id: 'item4', html: 'List Item 4'}
            ]
            });&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;Element creation specification parameters in this class may also be passed as an Array of
            specification objects. This can be used to insert multiple sibling nodes into an existing
            container very efficiently. For example, to add more list items to the example above:&lt;pre&gt;&lt;code&gt;dh.append('my-ul', [
            {tag: 'li', id: 'item5', html: 'List Item 5'},
            {tag: 'li', id: 'item6', html: 'List Item 6'} ]);&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
            &lt;p&gt;Element creation specification parameters may also be strings. If &lt;a ext:cls=&quot;useDom&quot; href=&quot;output/useDom.html&quot;&gt;useDom&lt;/a&gt; is false, then the string is used
            as innerHTML. If &lt;a ext:cls=&quot;useDom&quot; href=&quot;output/useDom.html&quot;&gt;useDom&lt;/a&gt; is true, a string specification results in the creation of a text node.&lt;/p&gt;
        For more information and examples, see &lt;a href=&quot;http://www.jackslocum.com/blog/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/&quot;&gt;the original blog post&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="useDom" type="Boolean" scope="instance" access="read-write">
                <description>True to force the use of DOM instead of html fragments</description>
            </property>
        </properties>
        <methods>
            <method name="markup" scope="instance">
                <description>Returns the markup for the passed Element(s) config.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The DOM object spec (and children)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="applyStyles" scope="instance">
                <description>Applies a style specification to an element.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The element to apply styles to</description>
                    </parameter>
                    <parameter name="styles" type="String/Object/Function" usage="required">
                        <description>A style specification string eg &quot;width:100px&quot;, or object in the form {width:&quot;100px&quot;}, or
                        a function which returns such a specification.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertHtml" scope="instance">
                <description>Inserts an HTML fragment into the DOM.</description>
                <parameters>
                    <parameter name="where" type="String" usage="required">
                        <description>Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.</description>
                    </parameter>
                    <parameter name="el" type="HTMLElement" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="html" type="String" usage="required">
                        <description>The HTML fragmenet</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertBefore" scope="instance">
                <description>Creates new DOM element(s) and inserts them before el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="o" type="Object/String" usage="required">
                        <description>The DOM object spec (and children) or raw HTML blob</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertAfter" scope="instance">
                <description>Creates new DOM element(s) and inserts them after el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="o" type="Object" usage="required">
                        <description>The DOM object spec (and children)</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertFirst" scope="instance">
                <description>Creates new DOM element(s) and inserts them as the first child of el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="o" type="Object/String" usage="required">
                        <description>The DOM object spec (and children) or raw HTML blob</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="append" scope="instance">
                <description>Creates new DOM element(s) and appends them to el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="o" type="Object/String" usage="required">
                        <description>The DOM object spec (and children) or raw HTML blob</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="overwrite" scope="instance">
                <description>Creates new DOM element(s) and overwrites the contents of el with them.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="o" type="Object/String" usage="required">
                        <description>The DOM object spec (and children) or raw HTML blob</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="createTemplate" scope="instance">
                <description>Creates a new apf.Template from the DOM object spec.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The DOM object spec (and children)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.DomQuery" superclass="Object">
        <description>*
            Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).&#13;
            &lt;p&gt;&#13;
            DomQuery supports most of the &lt;a href=&quot;http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors&quot;&gt;CSS3 selectors spec&lt;/a&gt;, along with some custom selectors and basic XPath.&lt;/p&gt;&#13;
            &#13;
            &lt;p&gt;&#13;
            All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example &quot;div.foo:nth-child(odd)[@foo=bar].bar:first&quot; would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.&#13;
            &lt;/p&gt;&#13;
            &lt;h4&gt;Element Selectors:&lt;/h4&gt;&#13;
            &lt;ul class=&quot;list&quot;&gt;&#13;
            &lt;li&gt; &lt;b&gt;*&lt;/b&gt; any element&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E&lt;/b&gt; an element with the tag E&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E F&lt;/b&gt; All descendent elements of E that have the tag F&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E &gt; F&lt;/b&gt; or &lt;b&gt;E/F&lt;/b&gt; all direct children elements of E that have the tag F&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E + F&lt;/b&gt; all elements with the tag F that are immediately preceded by an element with the tag E&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E ~ F&lt;/b&gt; all elements with the tag F that are preceded by a sibling element with the tag E&lt;/li&gt;&#13;
            &lt;/ul&gt;&#13;
            &lt;h4&gt;Attribute Selectors:&lt;/h4&gt;&#13;
            &lt;p&gt;The use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.&lt;/p&gt;&#13;
            &lt;ul class=&quot;list&quot;&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo]&lt;/b&gt; has an attribute &quot;foo&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that equals &quot;bar&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo^=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that starts with &quot;bar&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo$=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that ends with &quot;bar&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo*=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that contains the substring &quot;bar&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo%=2]&lt;/b&gt; has an attribute &quot;foo&quot; that is evenly divisible by 2&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E[foo!=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that does not equal &quot;bar&quot;&lt;/li&gt;&#13;
            &lt;/ul&gt;&#13;
            &lt;h4&gt;Pseudo Classes:&lt;/h4&gt;&#13;
            &lt;ul class=&quot;list&quot;&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:first-child&lt;/b&gt; E is the first child of its parent&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:last-child&lt;/b&gt; E is the last child of its parent&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:nth-child(&lt;i&gt;n&lt;/i&gt;)&lt;/b&gt; E is the &lt;i&gt;n&lt;/i&gt;th child of its parent (1 based as per the spec)&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:nth-child(odd)&lt;/b&gt; E is an odd child of its parent&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:nth-child(even)&lt;/b&gt; E is an even child of its parent&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:only-child&lt;/b&gt; E is the only child of its parent&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:checked&lt;/b&gt; E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) &lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:first&lt;/b&gt; the first E in the resultset&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:last&lt;/b&gt; the last E in the resultset&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:nth(&lt;i&gt;n&lt;/i&gt;)&lt;/b&gt; the &lt;i&gt;n&lt;/i&gt;th E in the resultset (1 based)&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:odd&lt;/b&gt; shortcut for :nth-child(odd)&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:even&lt;/b&gt; shortcut for :nth-child(even)&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:contains(foo)&lt;/b&gt; E's innerHTML contains the substring &quot;foo&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:nodeValue(foo)&lt;/b&gt; E contains a textNode with a nodeValue that equals &quot;foo&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:not(S)&lt;/b&gt; an E element that does not match simple selector S&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:has(S)&lt;/b&gt; an E element that has a descendent that matches simple selector S&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:next(S)&lt;/b&gt; an E element whose next sibling matches simple selector S&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E:prev(S)&lt;/b&gt; an E element whose previous sibling matches simple selector S&lt;/li&gt;&#13;
            &lt;/ul&gt;&#13;
            &lt;h4&gt;CSS Value Selectors:&lt;/h4&gt;&#13;
            &lt;ul class=&quot;list&quot;&gt;&#13;
            &lt;li&gt; &lt;b&gt;E{display=none}&lt;/b&gt; css value &quot;display&quot; that equals &quot;none&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E{display^=none}&lt;/b&gt; css value &quot;display&quot; that starts with &quot;none&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E{display$=none}&lt;/b&gt; css value &quot;display&quot; that ends with &quot;none&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E{display*=none}&lt;/b&gt; css value &quot;display&quot; that contains the substring &quot;none&quot;&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E{display%=2}&lt;/b&gt; css value &quot;display&quot; that is evenly divisible by 2&lt;/li&gt;&#13;
            &lt;li&gt; &lt;b&gt;E{display!=none}&lt;/b&gt; css value &quot;display&quot; that does not equal &quot;none&quot;&lt;/li&gt;&#13;
        &lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="matchers" type="Object" scope="instance" access="read-write">
                <description>Collection of matching regular expressions and code snippets.</description>
            </property>
            <property name="operators" type="Object" scope="instance" access="read-write">
                <description>Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.
                New operators can be added as long as the match the format &lt;i&gt;c&lt;/i&gt;= where &lt;i&gt;c&lt;/i&gt; is any character other than space, &amp;gt; &amp;lt;.</description>
            </property>
            <property name="pseudos" type="Object" scope="instance" access="read-write">
                <description>Collection of &quot;pseudo class&quot; processors. Each processor is passed the current nodeset (array)
                and the argument (if any) supplied in the selector.</description>
            </property>
        </properties>
        <methods>
            <method name="compile" scope="instance">
                <description>Compiles a selector/xpath query into a reusable function. The returned function
                takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The selector/xpath query</description>
                    </parameter>
                    <parameter name="type" type="String" usage="optional">
                        <description>(optional) Either &quot;select&quot; (the default) or &quot;simple&quot; for a simple selector match</description>
                    </parameter>
                </parameters>
            </method>
            <method name="select" scope="instance">
                <description>Selects a group of elements.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The selector/xpath query (can be a comma separated list of selectors)</description>
                    </parameter>
                    <parameter name="root" type="Node" usage="optional">
                        <description>(optional) The start of the query (defaults to document).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectNode" scope="instance">
                <description>Selects a single element.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The selector/xpath query</description>
                    </parameter>
                    <parameter name="root" type="Node" usage="optional">
                        <description>(optional) The start of the query (defaults to document).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectValue" scope="instance">
                <description>Selects the value of a node, optionally replacing null with the defaultValue.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The selector/xpath query</description>
                    </parameter>
                    <parameter name="root" type="Node" usage="optional">
                        <description>(optional) The start of the query (defaults to document).</description>
                    </parameter>
                    <parameter name="defaultValue" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectNumber" scope="instance">
                <description>Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The selector/xpath query</description>
                    </parameter>
                    <parameter name="root" type="Node" usage="optional">
                        <description>(optional) The start of the query (defaults to document).</description>
                    </parameter>
                    <parameter name="defaultValue" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="is" scope="instance">
                <description>Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement/Array" usage="required">
                        <description>An element id, element or array of elements</description>
                    </parameter>
                    <parameter name="selector" type="String" usage="required">
                        <description>The simple selector to test</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filter" scope="instance">
                <description>Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)</description>
                <parameters>
                    <parameter name="el" type="Array" usage="required">
                        <description>An array of elements to filter</description>
                    </parameter>
                    <parameter name="selector" type="String" usage="required">
                        <description>The simple selector to test</description>
                    </parameter>
                    <parameter name="nonMatches" type="Boolean" usage="required">
                        <description>If true, it returns the elements that DON'T match
                        the selector instead of the ones that match</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Editor" superclass="apf.Component">
        <description>A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Editor</description>
                <parameters>
                    <parameter name="field" type="apf.form.Field" usage="required">
                        <description>The Field object (or descendant)</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="startEdit" scope="instance">
                <description>Starts the editing process and shows the editor.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to edit</description>
                    </parameter>
                    <parameter name="value" type="String" usage="optional">
                        <description>(optional) A value to initialize the editor with. If a value is not provided, it defaults
                        to the innerHTML of el.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setSize" scope="instance">
                <description>Sets the height and width of this editor.</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height</description>
                    </parameter>
                </parameters>
            </method>
            <method name="realign" scope="instance">
                <description>Realigns the editor to the bound field based on the current alignment config value.</description>
                <parameters/>
            </method>
            <method name="completeEdit" scope="instance">
                <description>Ends the editing process, persists the changed value to the underlying field, and hides the editor.</description>
                <parameters>
                    <parameter name="remainVisible" type="Boolean" usage="required">
                        <description>Override the default behavior and keep the editor visible after edit (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="cancelEdit" scope="instance">
                <description>Cancels the editing process and hides the editor without persisting any changes.  The field value will be
                reverted to the original starting value.</description>
                <parameters>
                    <parameter name="remainVisible" type="Boolean" usage="required">
                        <description>Override the default behavior and keep the editor visible after
                        cancel (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets the data value of the editor</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>Any valid value supported by the underlying field</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getValue" scope="instance">
                <description>Gets the data value of the editor</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.Element" superclass="Object">
        <description>Represents an Element in the DOM.&lt;br&gt;&lt;br&gt;
            Usage:&lt;br&gt;
            &lt;pre&gt;&lt;code&gt;// by id
            var el = apf.get(&quot;my-div&quot;);

            // by DOM element reference
            var el = apf.get(myDivElement);&lt;/code&gt;&lt;/pre&gt;
            &lt;b&gt;Animations&lt;/b&gt;&lt;br /&gt;
            Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter. The animate parameter
            should either be a boolean (true) or an object literal with animation options. Note that the supported Element animation
            options are a subset of the &lt;a ext:cls=&quot;apf.Fx&quot; href=&quot;output/apf.Fx.html&quot;&gt;apf.Fx&lt;/a&gt; animation options specific to Fx effects.  The Element animation options are:
            &lt;pre&gt;Option    Default   Description
            --------- --------  ---------------------------------------------
            duration  .35       The duration of the animation in seconds
            easing    easeOut   The easing method
            callback  none      A function to execute when the anim completes
            scope     this      The scope (this) of the callback function&lt;/pre&gt;
            Also, the Anim object being used for the animation will be set on your options object as &quot;anim&quot;, which allows you to stop or
            manipulate the animation. Here's an example:
            &lt;pre&gt;&lt;code&gt;var el = apf.get(&quot;my-div&quot;);

            // no animation
            el.setWidth(100);

            // default animation
            el.setWidth(100, true);

            // animation with some options set
            el.setWidth(100, {
            duration: 1,
            callback: this.foo,
            scope: this
            });

            // using the &quot;anim&quot; property to get the Anim object
            var opt = {
            duration: 1,
            callback: this.foo,
            scope: this
            };
            el.setWidth(100, opt);
            ...
            if(opt.anim.isAnimated()){
            opt.anim.stop();
            }&lt;/code&gt;&lt;/pre&gt;
            &lt;b&gt; Composite (Collections of) Elements&lt;/b&gt;&lt;br /&gt;
        For working with collections of Elements, see &lt;a ext:cls=&quot;apf.CompositeElement&quot; href=&quot;output/apf.CompositeElement.html&quot;&gt;apf.CompositeElement&lt;/a&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Element directly.</description>
                <parameters>
                    <parameter name="element" type="String/HTMLElement" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="forceNew" type="Boolean" usage="optional">
                        <description>(optional) By default the constructor checks to see if there is already an instance of this element in the cache and if there is it returns the same instance. This will skip that check (useful for extending this class).</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="dom" type="HTMLElement" scope="instance" access="read-write">
                <description>The DOM element</description>
            </property>
            <property name="id" type="String" scope="instance" access="read-write">
                <description>The DOM element ID</description>
            </property>
            <property name="originalDisplay" type="String" scope="instance" access="read-write">
                <description>The element's default display mode  (defaults to &quot;&quot;)</description>
            </property>
            <property name="defaultUnit" type="String" scope="instance" access="read-write">
                <description>The default unit to append to CSS values where a unit isn't provided (defaults to px).</description>
            </property>
            <property name="Element.VISIBILITY" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Visibility mode constant - Use visibility to hide element</description>
            </property>
            <property name="Element.DISPLAY" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Visibility mode constant - Use display to hide element</description>
            </property>
        </properties>
        <methods>
            <method name="setVisibilityMode" scope="instance">
                <description>Sets the element's visibility mode. When setVisible() is called it
                will use this to determine whether to set the visibility or the display property.</description>
                <parameters>
                    <parameter name="Element.VISIBILITY" type="visMode" usage="required">
                        <description>or Element.DISPLAY</description>
                    </parameter>
                </parameters>
            </method>
            <method name="enableDisplayMode" scope="instance">
                <description>Convenience method for setVisibilityMode(Element.DISPLAY)</description>
                <parameters>
                    <parameter name="display" type="String" usage="optional">
                        <description>(optional) What to set display to when visible</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findParent" scope="instance">
                <description>Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The simple selector to test</description>
                    </parameter>
                    <parameter name="maxDepth" type="Number/Mixed" usage="optional">
                        <description>(optional) The max depth to
                        search as a number or element (defaults to 10 || document.body)</description>
                    </parameter>
                    <parameter name="returnEl" type="Boolean" usage="optional">
                        <description>(optional) True to return a apf.Element object instead of DOM node</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findParentNode" scope="instance">
                <description>Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The simple selector to test</description>
                    </parameter>
                    <parameter name="maxDepth" type="Number/Mixed" usage="optional">
                        <description>(optional) The max depth to
                        search as a number or element (defaults to 10 || document.body)</description>
                    </parameter>
                    <parameter name="returnEl" type="Boolean" usage="optional">
                        <description>(optional) True to return a apf.Element object instead of DOM node</description>
                    </parameter>
                </parameters>
            </method>
            <method name="up" scope="instance">
                <description>Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
                This is a shortcut for findParentNode() that always returns an apf.Element.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The simple selector to test</description>
                    </parameter>
                    <parameter name="maxDepth" type="Number/Mixed" usage="optional">
                        <description>(optional) The max depth to
                        search as a number or element (defaults to 10 || document.body)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="is" scope="instance">
                <description>Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The simple selector to test</description>
                    </parameter>
                </parameters>
            </method>
            <method name="animate" scope="instance">
                <description>Perform animation on this element.</description>
                <parameters>
                    <parameter name="args" type="Object" usage="required">
                        <description>The animation control args</description>
                    </parameter>
                    <parameter name="duration" type="Float" usage="optional">
                        <description>(optional) How long the animation lasts in seconds (defaults to .35)</description>
                    </parameter>
                    <parameter name="onComplete" type="Function" usage="optional">
                        <description>(optional) Function to call when animation completes</description>
                    </parameter>
                    <parameter name="easing" type="String" usage="optional">
                        <description>(optional) Easing method to use (defaults to 'easeOut')</description>
                    </parameter>
                    <parameter name="animType" type="String" usage="optional">
                        <description>(optional) 'run' is the default. Can also be 'color', 'motion', or 'scroll'</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clean" scope="instance">
                <description>Removes worthless text nodes</description>
                <parameters>
                    <parameter name="forceReclean" type="Boolean" usage="optional">
                        <description>(optional) By default the element
                            keeps track if it has been cleaned already so
                            you can call this over and over. However, if you update the element and
                        need to force a reclean, you can pass true.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="scrollIntoView" scope="instance">
                <description>Scrolls this element into view within the passed container.</description>
                <parameters>
                    <parameter name="container" type="Mixed" usage="optional">
                        <description>(optional) The container element to scroll (defaults to document.body). Should be a
                        string (id), dom node, or apf.Element.</description>
                    </parameter>
                    <parameter name="hscroll" type="Boolean" usage="optional">
                        <description>(optional) False to disable horizontal scroll (defaults to true)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="autoHeight" scope="instance">
                <description>Measures the element's content height and updates height to match. Note: this function uses setTimeout so
                the new height may not be available immediately.</description>
                <parameters>
                    <parameter name="animate" type="Boolean" usage="optional">
                        <description>(optional) Animate the transition (defaults to false)</description>
                    </parameter>
                    <parameter name="duration" type="Float" usage="optional">
                        <description>(optional) Length of the animation in seconds (defaults to .35)</description>
                    </parameter>
                    <parameter name="onComplete" type="Function" usage="optional">
                        <description>(optional) Function to call when animation completes</description>
                    </parameter>
                    <parameter name="easing" type="String" usage="optional">
                        <description>(optional) Easing method to use (defaults to easeOut)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="contains" scope="instance">
                <description>Returns true if this element is an ancestor of the passed element</description>
                <parameters>
                    <parameter name="el" type="HTMLElement/String" usage="required">
                        <description>The element to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isVisible" scope="instance">
                <description>Checks whether the element is currently visible using both visibility and display properties.</description>
                <parameters>
                    <parameter name="deep" type="Boolean" usage="optional">
                        <description>(optional) True to walk the dom and see if parent elements are hidden (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="select" scope="instance">
                <description>Creates a &lt;a ext:cls=&quot;apf.CompositeElement&quot; href=&quot;output/apf.CompositeElement.html&quot;&gt;apf.CompositeElement&lt;/a&gt; for child nodes based on the passed CSS selector (the selector should not contain an id).</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The CSS selector</description>
                    </parameter>
                    <parameter name="unique" type="Boolean" usage="optional">
                        <description>(optional) True to create a unique apf.Element for each child (defaults to false, which creates a single shared flyweight object)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="query" scope="instance">
                <description>Selects child nodes based on the passed CSS selector (the selector should not contain an id).</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The CSS selector</description>
                    </parameter>
                </parameters>
            </method>
            <method name="child" scope="instance">
                <description>Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The CSS selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return the DOM node instead of apf.Element (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="down" scope="instance">
                <description>Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).</description>
                <parameters>
                    <parameter name="selector" type="String" usage="required">
                        <description>The CSS selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return the DOM node instead of apf.Element (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="initDD" scope="instance">
                <description>Initializes a &lt;a ext:cls=&quot;apf.dd.DD&quot; href=&quot;output/apf.dd.DD.html&quot;&gt;apf.dd.DD&lt;/a&gt; drag drop object for this element.</description>
                <parameters>
                    <parameter name="group" type="String" usage="required">
                        <description>The group the DD object is member of</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The DD config object</description>
                    </parameter>
                    <parameter name="overrides" type="Object" usage="required">
                        <description>An object containing methods to override/implement on the DD object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="initDDProxy" scope="instance">
                <description>Initializes a &lt;a ext:cls=&quot;apf.dd.DDProxy&quot; href=&quot;output/apf.dd.DDProxy.html&quot;&gt;apf.dd.DDProxy&lt;/a&gt; object for this element.</description>
                <parameters>
                    <parameter name="group" type="String" usage="required">
                        <description>The group the DDProxy object is member of</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The DDProxy config object</description>
                    </parameter>
                    <parameter name="overrides" type="Object" usage="required">
                        <description>An object containing methods to override/implement on the DDProxy object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="initDDTarget" scope="instance">
                <description>Initializes a &lt;a ext:cls=&quot;apf.dd.DDTarget&quot; href=&quot;output/apf.dd.DDTarget.html&quot;&gt;apf.dd.DDTarget&lt;/a&gt; object for this element.</description>
                <parameters>
                    <parameter name="group" type="String" usage="required">
                        <description>The group the DDTarget object is member of</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The DDTarget config object</description>
                    </parameter>
                    <parameter name="overrides" type="Object" usage="required">
                        <description>An object containing methods to override/implement on the DDTarget object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setVisible" scope="instance">
                <description>Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
                the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.</description>
                <parameters>
                    <parameter name="visible" type="Boolean" usage="required">
                        <description>Whether the element is visible</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isDisplayed" scope="instance">
                <description>Returns true if display is not &quot;none&quot;</description>
                <parameters/>
            </method>
            <method name="toggle" scope="instance">
                <description>Toggles the element's visibility or display, depending on visibility mode.</description>
                <parameters>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDisplayed" scope="instance">
                <description>Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>Boolean value to display the element using its default display, or a string to set the display directly.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="focus" scope="instance">
                <description>Tries to focus the element. Any exceptions are caught and ignored.</description>
                <parameters/>
            </method>
            <method name="blur" scope="instance">
                <description>Tries to blur the element. Any exceptions are caught and ignored.</description>
                <parameters/>
            </method>
            <method name="addClass" scope="instance">
                <description>Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.</description>
                <parameters>
                    <parameter name="className" type="String/Array" usage="required">
                        <description>The CSS class to add, or an array of classes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="radioClass" scope="instance">
                <description>Adds one or more CSS classes to this element and removes the same class(es) from all siblings.</description>
                <parameters>
                    <parameter name="className" type="String/Array" usage="required">
                        <description>The CSS class to add, or an array of classes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeClass" scope="instance">
                <description>Removes one or more CSS classes from the element.</description>
                <parameters>
                    <parameter name="className" type="String/Array" usage="required">
                        <description>The CSS class to remove, or an array of classes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toggleClass" scope="instance">
                <description>Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).</description>
                <parameters>
                    <parameter name="className" type="String" usage="required">
                        <description>The CSS class to toggle</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hasClass" scope="instance">
                <description>Checks if the specified CSS class exists on this element's DOM node.</description>
                <parameters>
                    <parameter name="className" type="String" usage="required">
                        <description>The CSS class to check for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="replaceClass" scope="instance">
                <description>Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.</description>
                <parameters>
                    <parameter name="oldClassName" type="String" usage="required">
                        <description>The CSS class to replace</description>
                    </parameter>
                    <parameter name="newClassName" type="String" usage="required">
                        <description>The replacement CSS class</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getStyles" scope="instance">
                <description>Returns an object with properties matching the styles requested.
                    For example, el.getStyles('color', 'font-size', 'width') might return
                {'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.</description>
                <parameters>
                    <parameter name="style1" type="String" usage="required">
                        <description>A style name</description>
                    </parameter>
                    <parameter name="style2" type="String" usage="required">
                        <description>A style name</description>
                    </parameter>
                    <parameter name="etc." type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getStyle" scope="instance">
                <description>Normalizes currentStyle and computedStyle.</description>
                <parameters>
                    <parameter name="property" type="String" usage="required">
                        <description>The style property whose value is returned.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setStyle" scope="instance">
                <description>Wrapper for setting style properties, also takes single object parameter of multiple styles.</description>
                <parameters>
                    <parameter name="property" type="String/Object" usage="required">
                        <description>The style property to be set, or an object of multiple styles.</description>
                    </parameter>
                    <parameter name="value" type="String" usage="optional">
                        <description>(optional) The value to apply to the given property, or null if an object was passed.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="applyStyles" scope="instance">
                <description>More flexible version of &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;setStyle&quot; href=&quot;output/apf.Element.html#setStyle&quot;&gt;setStyle&lt;/a&gt; for setting style properties.</description>
                <parameters>
                    <parameter name="styles" type="String/Object/Function" usage="required">
                        <description>A style specification string, e.g. &quot;width:100px&quot;, or object in the form {width:&quot;100px&quot;}, or
                        a function which returns such a specification.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getX" scope="instance">
                <description>Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters/>
            </method>
            <method name="getY" scope="instance">
                <description>Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters/>
            </method>
            <method name="getXY" scope="instance">
                <description>Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters/>
            </method>
            <method name="getOffsetsTo" scope="instance">
                <description>Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to get the offsets from.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setX" scope="instance">
                <description>Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters>
                    <parameter name="The" type="Number" usage="required">
                        <description>X position of the element</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setY" scope="instance">
                <description>Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters>
                    <parameter name="The" type="Number" usage="required">
                        <description>Y position of the element</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setLeft" scope="instance">
                <description>Sets the element's left position directly using CSS style (instead of &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;setX&quot; href=&quot;output/apf.Element.html#setX&quot;&gt;setX&lt;/a&gt;).</description>
                <parameters>
                    <parameter name="left" type="String" usage="required">
                        <description>The left CSS property value</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setTop" scope="instance">
                <description>Sets the element's top position directly using CSS style (instead of &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;setY&quot; href=&quot;output/apf.Element.html#setY&quot;&gt;setY&lt;/a&gt;).</description>
                <parameters>
                    <parameter name="top" type="String" usage="required">
                        <description>The top CSS property value</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setRight" scope="instance">
                <description>Sets the element's CSS right style.</description>
                <parameters>
                    <parameter name="right" type="String" usage="required">
                        <description>The right CSS property value</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setBottom" scope="instance">
                <description>Sets the element's CSS bottom style.</description>
                <parameters>
                    <parameter name="bottom" type="String" usage="required">
                        <description>The bottom CSS property value</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setXY" scope="instance">
                <description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
                The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters>
                    <parameter name="pos" type="Array" usage="required">
                        <description>Contains X &amp; Y [x, y] values for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setLocation" scope="instance">
                <description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
                The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters>
                    <parameter name="x" type="Number" usage="required">
                        <description>X value for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="required">
                        <description>Y value for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="moveTo" scope="instance">
                <description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
                The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description>
                <parameters>
                    <parameter name="x" type="Number" usage="required">
                        <description>X value for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="required">
                        <description>Y value for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation, or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRegion" scope="instance">
                <description>Returns the region of the given element.
                The element must be part of the DOM tree to have a region (display:none or elements not appended return false).</description>
                <parameters/>
            </method>
            <method name="getHeight" scope="instance">
                <description>Returns the offset height of the element</description>
                <parameters>
                    <parameter name="contentHeight" type="Boolean" usage="optional">
                        <description>(optional) true to get the height minus borders and padding</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getWidth" scope="instance">
                <description>Returns the offset width of the element</description>
                <parameters>
                    <parameter name="contentWidth" type="Boolean" usage="optional">
                        <description>(optional) true to get the width minus borders and padding</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getComputedHeight" scope="instance">
                <description>Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
                    when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
                if a height has not been set using CSS.</description>
                <parameters/>
            </method>
            <method name="getComputedWidth" scope="instance">
                <description>Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
                    when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
                if a width has not been set using CSS.</description>
                <parameters/>
            </method>
            <method name="getSize" scope="instance">
                <description>Returns the size of the element.</description>
                <parameters>
                    <parameter name="contentSize" type="Boolean" usage="optional">
                        <description>(optional) true to get the width/size minus borders and padding</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getViewSize" scope="instance">
                <description>Returns the width and height of the viewport.</description>
                <parameters/>
            </method>
            <method name="getValue" scope="instance">
                <description>Returns the value of the &quot;value&quot; attribute</description>
                <parameters>
                    <parameter name="asNumber" type="Boolean" usage="required">
                        <description>true to parse the value as a number</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setWidth" scope="instance">
                <description>Set the width of the element</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setHeight" scope="instance">
                <description>Set the height of the element</description>
                <parameters>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setSize" scope="instance">
                <description>Set the size of the element. If animation is true, both width an height will be animated concurrently.</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setBounds" scope="instance">
                <description>Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.</description>
                <parameters>
                    <parameter name="x" type="Number" usage="required">
                        <description>X value for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="required">
                        <description>Y value for new position (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setRegion" scope="instance">
                <description>Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.</description>
                <parameters>
                    <parameter name="region" type="apf.lib.Region" usage="required">
                        <description>The region to fill</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addListener" scope="instance">
                <description>Appends an event handler to this element.  The shorthand version &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;on&quot; href=&quot;output/apf.Element.html#on&quot;&gt;on&lt;/a&gt; is equivalent.</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to handle</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The handler function the event invokes. This function is passed
                            the following parameters:&lt;ul&gt;
                            &lt;li&gt;evt : EventObject&lt;div class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.EventObject&quot; href=&quot;output/apf.EventObject.html&quot;&gt;EventObject&lt;/a&gt; describing the event.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;t : Element&lt;div class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;Element&lt;/a&gt; which was the target of the event.
                            Note that this may be filtered by using the &lt;tt&gt;delegate&lt;/tt&gt; option.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;o : Object&lt;div class=&quot;sub-desc&quot;&gt;The options object from the addListener call.&lt;/div&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope (The &lt;tt&gt;this&lt;/tt&gt; reference) of the handler function. Defaults
                        to this Element.</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) An object containing handler configuration properties.
                            This may contain any of the following properties:&lt;ul&gt;
                            &lt;li&gt;scope {Object} : The scope in which to execute the handler function. The handler function's &quot;this&quot; context.&lt;/li&gt;
                            &lt;li&gt;delegate {String} : A simple selector to filter the target or look for a descendant of the target&lt;/li&gt;
                            &lt;li&gt;stopEvent {Boolean} : True to stop the event. That is stop propagation, and prevent the default action.&lt;/li&gt;
                            &lt;li&gt;preventDefault {Boolean} : True to prevent the default action&lt;/li&gt;
                            &lt;li&gt;stopPropagation {Boolean} : True to prevent event propagation&lt;/li&gt;
                            &lt;li&gt;normalized {Boolean} : False to pass a browser event to the handler function instead of an apf.EventObject&lt;/li&gt;
                            &lt;li&gt;delay {Number} : The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;
                            &lt;li&gt;single {Boolean} : True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;
                            &lt;li&gt;buffer {Number} : Causes the handler to be scheduled to run in an &lt;a ext:cls=&quot;apf.util.DelayedTask&quot; href=&quot;output/apf.util.DelayedTask.html&quot;&gt;apf.util.DelayedTask&lt;/a&gt; delayed
                            by the specified number of milliseconds. If the event fires again within that time, the original
                            handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;
                            &lt;/ul&gt;&lt;br&gt;
                            &lt;p&gt;
                            &lt;b&gt;Combining Options&lt;/b&gt;&lt;br&gt;
                            In the following examples, the shorthand form &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;on&quot; href=&quot;output/apf.Element.html#on&quot;&gt;on&lt;/a&gt; is used rather than the more verbose
                            addListener. The two are equivalent. Using the options argument, it is possible to combine different
                            types of listeners:&lt;br&gt;
                            &lt;br&gt;
                            A normalized, delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the
                            options object. The options object is available as the third parameter in the handler function.&lt;div style=&quot;margin: 5px 20px 20px;&quot;&gt;
                            Code:&lt;pre&gt;&lt;code&gt;el.on('click', this.onClick, this, {
                            single: true,
                            delay: 100,
                            stopEvent : true,
                            forumId: 4
                            });&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
                            &lt;p&gt;
                            &lt;b&gt;Attaching multiple handlers in 1 call&lt;/b&gt;&lt;br&gt;
                            The method also allows for a single argument to be passed which is a config object containing properties
                            which specify multiple handlers.&lt;/p&gt;
                            &lt;p&gt;
                            Code:&lt;pre&gt;&lt;code&gt;&lt;/p&gt;
                            el.on({
                            'click' : {
                            fn: this.onClick,
                            scope: this,
                            delay: 100
                            },
                            'mouseover' : {
                            fn: this.onMouseOver,
                            scope: this
                            },
                            'mouseout' : {
                            fn: this.onMouseOut,
                            scope: this
                            }
                            });&lt;/code&gt;&lt;/pre&gt;
                            &lt;p&gt;
                            Or a shorthand syntax:&lt;br&gt;
                            Code:&lt;pre&gt;&lt;code&gt;&lt;/p&gt;
                            el.on({
                            'click' : this.onClick,
                            'mouseover' : this.onMouseOver,
                            'mouseout' : this.onMouseOut,
                            scope: this
                        });&lt;/code&gt;&lt;/pre&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeListener" scope="instance">
                <description>Removes an event handler from this element.  The shorthand version &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;un&quot; href=&quot;output/apf.Element.html#un&quot;&gt;un&lt;/a&gt; is equivalent.  Example:
                    &lt;pre&gt;&lt;code&gt;el.removeListener('click', this.handlerFn);
                    // or
                el.un('click', this.handlerFn);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>the type of event to remove</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>the method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope (The &lt;tt&gt;this&lt;/tt&gt; reference) of the handler function. Defaults
                        to this Element.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeAllListeners" scope="instance">
                <description>Removes all previous added listeners from this element</description>
                <parameters/>
            </method>
            <method name="relayEvent" scope="instance">
                <description>Create an event handler on this element such that when the event fires and is handled by this element,
                it will be relayed to another object (i.e., fired again as if it originated from that object instead).</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to relay</description>
                    </parameter>
                    <parameter name="object" type="Object" usage="required">
                        <description>Any object that extends &lt;a ext:cls=&quot;apf.util.Observable&quot; href=&quot;output/apf.util.Observable.html&quot;&gt;apf.util.Observable&lt;/a&gt; that will provide the context
                        for firing the relayed event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setOpacity" scope="instance">
                <description>Set the opacity of the element</description>
                <parameters>
                    <parameter name="opacity" type="Float" usage="required">
                        <description>The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getLeft" scope="instance">
                <description>Gets the left X coordinate</description>
                <parameters>
                    <parameter name="local" type="Boolean" usage="required">
                        <description>True to get the local css position instead of page coordinate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRight" scope="instance">
                <description>Gets the right X coordinate of the element (element X position + element width)</description>
                <parameters>
                    <parameter name="local" type="Boolean" usage="required">
                        <description>True to get the local css position instead of page coordinate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTop" scope="instance">
                <description>Gets the top Y coordinate</description>
                <parameters>
                    <parameter name="local" type="Boolean" usage="required">
                        <description>True to get the local css position instead of page coordinate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getBottom" scope="instance">
                <description>Gets the bottom Y coordinate of the element (element Y position + element height)</description>
                <parameters>
                    <parameter name="local" type="Boolean" usage="required">
                        <description>True to get the local css position instead of page coordinate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="position" scope="instance">
                <description>Initializes positioning on this element. If a desired position is not passed, it will make the
                the element positioned relative IF it is not already positioned.</description>
                <parameters>
                    <parameter name="pos" type="String" usage="optional">
                        <description>(optional) Positioning to use &quot;relative&quot;, &quot;absolute&quot; or &quot;fixed&quot;</description>
                    </parameter>
                    <parameter name="zIndex" type="Number" usage="optional">
                        <description>(optional) The zIndex to apply</description>
                    </parameter>
                    <parameter name="x" type="Number" usage="optional">
                        <description>(optional) Set the page X position</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="optional">
                        <description>(optional) Set the page Y position</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearPositioning" scope="instance">
                <description>Clear positioning back to the default when the document was loaded</description>
                <parameters>
                    <parameter name="value" type="String" usage="optional">
                        <description>(optional) The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getPositioning" scope="instance">
                <description>Gets an object with all CSS positioning properties. Useful along with setPostioning to get
                snapshot before performing an update and then restoring the element.</description>
                <parameters/>
            </method>
            <method name="getBorderWidth" scope="instance">
                <description>Gets the width of the border(s) for the specified side(s)</description>
                <parameters>
                    <parameter name="side" type="String" usage="required">
                        <description>Can be t, l, r, b or any combination of those to add multiple values. For example,
                        passing lr would get the border (l)eft width + the border (r)ight width.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getPadding" scope="instance">
                <description>Gets the width of the padding(s) for the specified side(s)</description>
                <parameters>
                    <parameter name="side" type="String" usage="required">
                        <description>Can be t, l, r, b or any combination of those to add multiple values. For example,
                        passing lr would get the padding (l)eft + the padding (r)ight.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setPositioning" scope="instance">
                <description>Set positioning with an object returned by getPositioning().</description>
                <parameters>
                    <parameter name="posCfg" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="setLeftTop" scope="instance">
                <description>Quick set left and top adding default units</description>
                <parameters>
                    <parameter name="left" type="String" usage="required">
                        <description>The left CSS property value</description>
                    </parameter>
                    <parameter name="top" type="String" usage="required">
                        <description>The top CSS property value</description>
                    </parameter>
                </parameters>
            </method>
            <method name="move" scope="instance">
                <description>Move this element relative to its current position.</description>
                <parameters>
                    <parameter name="direction" type="String" usage="required">
                        <description>Possible values are: &quot;l&quot; (or &quot;left&quot;), &quot;r&quot; (or &quot;right&quot;), &quot;t&quot; (or &quot;top&quot;, or &quot;up&quot;), &quot;b&quot; (or &quot;bottom&quot;, or &quot;down&quot;).</description>
                    </parameter>
                    <parameter name="distance" type="Number" usage="required">
                        <description>How far to move the element in pixels</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clip" scope="instance">
                <description>Store the current overflow setting and clip overflow on the element - use &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;unclip&quot; href=&quot;output/apf.Element.html#unclip&quot;&gt;unclip&lt;/a&gt; to remove</description>
                <parameters/>
            </method>
            <method name="unclip" scope="instance">
                <description>Return clipping (overflow) to original clipping before clip() was called</description>
                <parameters/>
            </method>
            <method name="getAnchorXY" scope="instance">
                <description>Gets the x,y coordinates specified by the anchor position on the element.</description>
                <parameters>
                    <parameter name="anchor" type="String" usage="optional">
                        <description>(optional) The specified anchor position (defaults to &quot;c&quot;). See &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;alignTo&lt;/a&gt;
                        for details on supported anchor positions.</description>
                    </parameter>
                    <parameter name="local" type="Boolean" usage="optional">
                        <description>(optional) True to get the local (element top/left-relative) anchor position instead
                        of page coordinates</description>
                    </parameter>
                    <parameter name="size" type="Object" usage="optional">
                        <description>(optional) An object containing the size to use for calculating anchor position
                        {width: (target width), height: (target height)} (defaults to the element's current size)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getAlignToXY" scope="instance">
                <description>Gets the x,y coordinates to align this element with another element. See &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;alignTo&lt;/a&gt; for more info on the
                supported position values.</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to align to.</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The position to align to.</description>
                    </parameter>
                    <parameter name="offsets" type="Array" usage="optional">
                        <description>(optional) Offset the positioning by [x, y]</description>
                    </parameter>
                </parameters>
            </method>
            <method name="alignTo" scope="instance">
                <description>Aligns this element with another element relative to the specified anchor points. If the other element is the
                    document it aligns it to the viewport.
                    The position parameter is optional, and can be specified in any one of the following formats:
                    &lt;ul&gt;
                    &lt;li&gt;&lt;b&gt;Blank&lt;/b&gt;: Defaults to aligning the element's top-left corner to the target's bottom-left corner (&quot;tl-bl&quot;).&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;One anchor (deprecated)&lt;/b&gt;: The passed anchor position is used as the target element's anchor point.
                    The element being aligned will position its top-left corner (tl) to that point.  &lt;i&gt;This method has been
                    deprecated in favor of the newer two anchor syntax below&lt;/i&gt;.&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;Two anchors&lt;/b&gt;: If two values from the table below are passed separated by a dash, the first value is used as the
                    element's anchor point, and the second value is used as the target's anchor point.&lt;/li&gt;
                    &lt;/ul&gt;
                    In addition to the anchor points, the position parameter also supports the &quot;?&quot; character.  If &quot;?&quot; is passed at the end of
                    the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
                    the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
                    that specified in order to enforce the viewport constraints.
                    Following are all of the supported anchor positions:
                    &lt;pre&gt;Value  Description
                    -----  -----------------------------
                    tl     The top left corner (default)
                    t      The center of the top edge
                    tr     The top right corner
                    l      The center of the left edge
                    c      In the center of the element
                    r      The center of the right edge
                    bl     The bottom left corner
                    b      The center of the bottom edge
                    br     The bottom right corner&lt;/pre&gt;
                    Example Usage:
                    &lt;pre&gt;&lt;code&gt;// align el to other-el using the default positioning (&quot;tl-bl&quot;, non-constrained)
                    el.alignTo(&quot;other-el&quot;);

                    // align the top left corner of el with the top right corner of other-el (constrained to viewport)
                    el.alignTo(&quot;other-el&quot;, &quot;tr?&quot;);

                    // align the bottom right corner of el with the center left edge of other-el
                    el.alignTo(&quot;other-el&quot;, &quot;br-l?&quot;);

                    // align the center of el with the bottom left corner of other-el and
                    // adjust the x position by -6 pixels (and the y position by 0)
                el.alignTo(&quot;other-el&quot;, &quot;c-bl&quot;, [-6, 0]);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to align to.</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The position to align to.</description>
                    </parameter>
                    <parameter name="offsets" type="Array" usage="optional">
                        <description>(optional) Offset the positioning by [x, y]</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="anchorTo" scope="instance">
                <description>Anchors an element to another element and realigns it when the window is resized.</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to align to.</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The position to align to.</description>
                    </parameter>
                    <parameter name="offsets" type="Array" usage="optional">
                        <description>(optional) Offset the positioning by [x, y]</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) True for the default animation or a standard Element animation config object</description>
                    </parameter>
                    <parameter name="monitorScroll" type="Boolean/Number" usage="optional">
                        <description>(optional) True to monitor body scroll and reposition. If this parameter
                        is a number, it is used as the buffer delay (defaults to 50ms).</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description>The function to call after the animation finishes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearOpacity" scope="instance">
                <description>Clears any opacity settings from this element. Required in some cases for IE.</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hide this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;setVisible&quot; href=&quot;output/apf.Element.html#setVisible&quot;&gt;setVisible&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="show" scope="instance">
                <description>Show this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;setVisible&quot; href=&quot;output/apf.Element.html#setVisible&quot;&gt;setVisible&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="update" scope="instance">
                <description>Update the innerHTML of this element, optionally searching for and processing scripts</description>
                <parameters>
                    <parameter name="html" type="String" usage="required">
                        <description>The new HTML</description>
                    </parameter>
                    <parameter name="loadScripts" type="Boolean" usage="optional">
                        <description>(optional) True to look for and process scripts (defaults to false)</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) For async script loading you can be notified when the update completes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="load" scope="instance">
                <description>Direct access to the Updater &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;update&quot; href=&quot;output/apf.Updater.html#update&quot;&gt;apf.Updater.update&lt;/a&gt; method. The method takes the same object
                parameter as &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;update&quot; href=&quot;output/apf.Updater.html#update&quot;&gt;apf.Updater.update&lt;/a&gt;</description>
                <parameters/>
            </method>
            <method name="getUpdater" scope="instance">
                <description>Gets this element's Updater</description>
                <parameters/>
            </method>
            <method name="unselectable" scope="instance">
                <description>Disables text selection for this element (normalized across browsers)</description>
                <parameters/>
            </method>
            <method name="getCenterXY" scope="instance">
                <description>Calculates the x, y to center this element on the screen</description>
                <parameters/>
            </method>
            <method name="center" scope="instance">
                <description>Centers the Element in either the viewport, or another Element.</description>
                <parameters>
                    <parameter name="centerIn" type="Mixed" usage="optional">
                        <description>(optional) The element in which to center the element.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isBorderBox" scope="instance">
                <description>Tests various css rules/browsers to determine if this element uses a border box</description>
                <parameters/>
            </method>
            <method name="getBox" scope="instance">
                <description>Return a box {x, y, width, height} that can be used to set another elements
                size/location to match this element.</description>
                <parameters>
                    <parameter name="contentBox" type="Boolean" usage="optional">
                        <description>(optional) If true a box for the content of the element is returned.</description>
                    </parameter>
                    <parameter name="local" type="Boolean" usage="optional">
                        <description>(optional) If true the element's left and top are returned instead of page x/y.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getFrameWidth" scope="instance">
                <description>Returns the sum width of the padding and borders for the passed &quot;sides&quot;. See getBorderWidth()
                for more information about the sides.</description>
                <parameters>
                    <parameter name="sides" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="setBox" scope="instance">
                <description>Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.</description>
                <parameters>
                    <parameter name="box" type="Object" usage="required">
                        <description>The box to fill {x, y, width, height}</description>
                    </parameter>
                    <parameter name="adjust" type="Boolean" usage="optional">
                        <description>(optional) Whether to adjust for box-model issues automatically</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="repaint" scope="instance">
                <description>Forces the browser to repaint this element</description>
                <parameters/>
            </method>
            <method name="getMargins" scope="instance">
                <description>Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
                then it returns the calculated width of the sides (see getPadding)</description>
                <parameters>
                    <parameter name="sides" type="String" usage="optional">
                        <description>(optional) Any combination of l, r, t, b to get the sum of those sides</description>
                    </parameter>
                </parameters>
            </method>
            <method name="createProxy" scope="instance">
                <description>Creates a proxy element of this element</description>
                <parameters>
                    <parameter name="config" type="String/Object" usage="required">
                        <description>The class name of the proxy element or a DomHelper config object</description>
                    </parameter>
                    <parameter name="renderTo" type="String/HTMLElement" usage="optional">
                        <description>(optional) The element or element id to render the proxy to (defaults to document.body)</description>
                    </parameter>
                    <parameter name="matchBox" type="Boolean" usage="optional">
                        <description>(optional) True to align and size the proxy to this element now (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="mask" scope="instance">
                <description>Puts a mask over this element to disable user interaction. Requires core.css.
                This method can only be applied to elements which accept child nodes.</description>
                <parameters>
                    <parameter name="msg" type="String" usage="optional">
                        <description>(optional) A message to display in the mask</description>
                    </parameter>
                    <parameter name="msgCls" type="String" usage="optional">
                        <description>(optional) A css class to apply to the msg element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unmask" scope="instance">
                <description>Removes a previously applied mask.</description>
                <parameters/>
            </method>
            <method name="isMasked" scope="instance">
                <description>Returns true if this element is masked</description>
                <parameters/>
            </method>
            <method name="createShim" scope="instance">
                <description>Creates an iframe shim for this element to keep selects and other windowed objects from
                showing through.</description>
                <parameters/>
            </method>
            <method name="remove" scope="instance">
                <description>Removes this element from the DOM and deletes it from the cache</description>
                <parameters/>
            </method>
            <method name="hover" scope="instance">
                <description>Sets up event handlers to call the passed functions when the mouse is over this element. Automatically
                filters child element mouse events.</description>
                <parameters>
                    <parameter name="overFn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="outFn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addClassOnOver" scope="instance">
                <description>Sets up event handlers to add and remove a css class when the mouse is over this element</description>
                <parameters>
                    <parameter name="className" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="addClassOnFocus" scope="instance">
                <description>Sets up event handlers to add and remove a css class when this element has the focus</description>
                <parameters>
                    <parameter name="className" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="addClassOnClick" scope="instance">
                <description>Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)</description>
                <parameters>
                    <parameter name="className" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="swallowEvent" scope="instance">
                <description>Stops the specified event from bubbling and optionally prevents the default action</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="preventDefault" type="Boolean" usage="optional">
                        <description>(optional) true to prevent the default action too</description>
                    </parameter>
                </parameters>
            </method>
            <method name="parent" scope="instance">
                <description>Gets the parent node for this element, optionally chaining up trying to match a selector</description>
                <parameters>
                    <parameter name="selector" type="String" usage="optional">
                        <description>(optional) Find a parent node that matches the passed simple selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return a raw dom node instead of an apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="next" scope="instance">
                <description>Gets the next sibling, skipping text nodes</description>
                <parameters>
                    <parameter name="selector" type="String" usage="optional">
                        <description>(optional) Find the next sibling that matches the passed simple selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return a raw dom node instead of an apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="prev" scope="instance">
                <description>Gets the previous sibling, skipping text nodes</description>
                <parameters>
                    <parameter name="selector" type="String" usage="optional">
                        <description>(optional) Find the previous sibling that matches the passed simple selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return a raw dom node instead of an apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="first" scope="instance">
                <description>Gets the first child, skipping text nodes</description>
                <parameters>
                    <parameter name="selector" type="String" usage="optional">
                        <description>(optional) Find the next sibling that matches the passed simple selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return a raw dom node instead of an apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="last" scope="instance">
                <description>Gets the last child, skipping text nodes</description>
                <parameters>
                    <parameter name="selector" type="String" usage="optional">
                        <description>(optional) Find the previous sibling that matches the passed simple selector</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return a raw dom node instead of an apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="appendChild" scope="instance">
                <description>Appends the passed element(s) to this element</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement/Array/Element/CompositeElement" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="createChild" scope="instance">
                <description>Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be
                        automatically generated with the specified attributes.</description>
                    </parameter>
                    <parameter name="insertBefore" type="HTMLElement" usage="optional">
                        <description>(optional) a child element of this element</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) true to return the dom node instead of creating an Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="appendTo" scope="instance">
                <description>Appends this element to the passed element</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The new parent element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertBefore" scope="instance">
                <description>Inserts this element before the passed element in the DOM</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element before which this element will be inserted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertAfter" scope="instance">
                <description>Inserts this element after the passed element in the DOM</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to insert after</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertFirst" scope="instance">
                <description>Inserts (or creates) an element (or DomHelper config) as the first child of this element</description>
                <parameters>
                    <parameter name="el" type="Mixed/Object" usage="required">
                        <description>The id or element to insert or a DomHelper config to create and insert</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertSibling" scope="instance">
                <description>Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element</description>
                <parameters>
                    <parameter name="el" type="Mixed/Object/Array" usage="required">
                        <description>The id, element to insert or a DomHelper config to create and insert *or* an array of any of those.</description>
                    </parameter>
                    <parameter name="where" type="String" usage="optional">
                        <description>(optional) 'before' or 'after' defaults to before</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return the raw DOM element instead of apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="wrap" scope="instance">
                <description>Creates and wraps this element with another element</description>
                <parameters>
                    <parameter name="config" type="Object" usage="optional">
                        <description>(optional) DomHelper element config object for the wrapper element or null for an empty div</description>
                    </parameter>
                    <parameter name="returnDom" type="Boolean" usage="optional">
                        <description>(optional) True to return the raw DOM element instead of apf.Element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="replace" scope="instance">
                <description>Replaces the passed element with this element</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to replace</description>
                    </parameter>
                </parameters>
            </method>
            <method name="replaceWith" scope="instance">
                <description>Replaces this element with the passed element</description>
                <parameters>
                    <parameter name="el" type="Mixed/Object" usage="required">
                        <description>The new element or a DomHelper config of an element to create</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertHtml" scope="instance">
                <description>Inserts an html fragment into this element</description>
                <parameters>
                    <parameter name="where" type="String" usage="required">
                        <description>Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.</description>
                    </parameter>
                    <parameter name="html" type="String" usage="required">
                        <description>The HTML fragment</description>
                    </parameter>
                    <parameter name="returnEl" type="Boolean" usage="optional">
                        <description>(optional) True to return an apf.Element (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="set" scope="instance">
                <description>Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The object with the attributes</description>
                    </parameter>
                    <parameter name="useSet" type="Boolean" usage="optional">
                        <description>(optional) false to override the default setAttribute to use expandos.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addKeyListener" scope="instance">
                <description>Convenience method for constructing a KeyMap</description>
                <parameters>
                    <parameter name="key" type="Number/Array/Object/String" usage="required">
                        <description>Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
                        {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addKeyMap" scope="instance">
                <description>Creates a KeyMap for this element</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The KeyMap config. See &lt;a ext:cls=&quot;apf.KeyMap&quot; href=&quot;output/apf.KeyMap.html&quot;&gt;apf.KeyMap&lt;/a&gt; for more details</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isScrollable" scope="instance">
                <description>Returns true if this element is scrollable.</description>
                <parameters/>
            </method>
            <method name="scrollTo" scope="instance">
                <description>Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().</description>
                <parameters>
                    <parameter name="side" type="String" usage="required">
                        <description>Either &quot;left&quot; for scrollLeft values or &quot;top&quot; for scrollTop values.</description>
                    </parameter>
                    <parameter name="value" type="Number" usage="required">
                        <description>The new scroll value</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="scroll" scope="instance">
                <description>Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
                within this element's scrollable range.</description>
                <parameters>
                    <parameter name="direction" type="String" usage="required">
                        <description>Possible values are: &quot;l&quot; (or &quot;left&quot;), &quot;r&quot; (or &quot;right&quot;), &quot;t&quot; (or &quot;top&quot;, or &quot;up&quot;), &quot;b&quot; (or &quot;bottom&quot;, or &quot;down&quot;).</description>
                    </parameter>
                    <parameter name="distance" type="Number" usage="required">
                        <description>How far to scroll the element in pixels</description>
                    </parameter>
                    <parameter name="animate" type="Boolean/Object" usage="optional">
                        <description>(optional) true for the default animation or a standard Element animation config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="translatePoints" scope="instance">
                <description>Translates the passed page coordinates into left/top css values for this element</description>
                <parameters>
                    <parameter name="x" type="Number/Array" usage="required">
                        <description>The page x or an array containing [x, y]</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="optional">
                        <description>(optional) The page y, required if x is not an array</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getScroll" scope="instance">
                <description>Returns the current scroll position of the element.</description>
                <parameters/>
            </method>
            <method name="getColor" scope="instance">
                <description>Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
                are convert to standard 6 digit hex color.</description>
                <parameters>
                    <parameter name="attr" type="String" usage="required">
                        <description>The css attribute</description>
                    </parameter>
                    <parameter name="defaultValue" type="String" usage="required">
                        <description>The default value to use when a valid color isn't found</description>
                    </parameter>
                    <parameter name="prefix" type="String" usage="optional">
                        <description>(optional) defaults to #. Use an empty string when working with
                        color anims.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="boxWrap" scope="instance">
                <description>Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a
                    gradient background, rounded corners and a 4-way shadow.  Example usage:
                    &lt;pre&gt;&lt;code&gt;
                    // Basic box wrap
                    apf.get(&quot;foo&quot;).boxWrap();

                    // You can also add a custom class and use CSS inheritance rules to customize the box look.
                    // 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example
                    // for how to create a custom box wrap style.
                apf.get(&quot;foo&quot;).boxWrap().addClass(&quot;x-box-blue&quot;);&lt;/pre&gt;&lt;/code&gt;</description>
                <parameters>
                    <parameter name="class" type="String" usage="optional">
                        <description>(optional) A base CSS class to apply to the containing wrapper element (defaults to 'x-box').
                            Note that there are a number of CSS rules that are dependent on this name to make the overall effect work,
                        so if you supply an alternate base class, make sure you also supply all of the necessary rules.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getAttributeNS" scope="instance">
                <description>Returns the value of a namespaced attribute from the element's underlying DOM node.</description>
                <parameters>
                    <parameter name="namespace" type="String" usage="required">
                        <description>The namespace in which to look for the attribute</description>
                    </parameter>
                    <parameter name="name" type="String" usage="required">
                        <description>The attribute name</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTextWidth" scope="instance">
                <description>Returns the width in pixels of the passed text, or the width of the text in this Element.</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to measure. Defaults to the innerHTML of the element.</description>
                    </parameter>
                    <parameter name="min" type="Number" usage="optional">
                        <description>(Optional) The minumum value to return.</description>
                    </parameter>
                    <parameter name="max" type="Number" usage="optional">
                        <description>(Optional) The maximum value to return.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="Element.get" scope="static">
                <description>&amp;lt;static&amp;gt; Static method to retrieve apf.Element objects.
                    &lt;p&gt;&lt;b&gt;This method does not retrieve &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;Component&lt;/a&gt;s.&lt;/b&gt; This method
                    retrieves apf.Element objects which encapsulate DOM elements. To retrieve a Component by
                    its ID, use &lt;a ext:cls=&quot;apf.ComponentMgr&quot; ext:member=&quot;get&quot; href=&quot;output/apf.ComponentMgr.html#get&quot;&gt;apf.ComponentMgr.get&lt;/a&gt;.&lt;/p&gt;
                    &lt;p&gt;Uses simple caching to consistently return the same object.
                Automatically fixes if an object was recreated with the same id via AJAX or DOM.&lt;/p&gt;</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The id of the node, a DOM Node or an existing Element.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="Element.fly" scope="static">
                <description>&amp;lt;static&amp;gt; Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
                the dom node can be overwritten by other code.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The dom node or id</description>
                    </parameter>
                    <parameter name="named" type="String" usage="optional">
                        <description>(optional) Allows for creation of named reusable flyweights to
                        prevent conflicts (e.g. internally apf uses &quot;_internal&quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="on" scope="instance">
                <description>Appends an event handler (shorthand for &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.Element.html#addListener&quot;&gt;addListener&lt;/a&gt;).</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to handle</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The handler function the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope (this element) of the handler function</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) An object containing standard &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.Element.html#addListener&quot;&gt;addListener&lt;/a&gt; options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="un" scope="instance">
                <description>Removes an event handler from this element (shorthand for &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;removeListener&quot; href=&quot;output/apf.Element.html#removeListener&quot;&gt;removeListener&lt;/a&gt;).</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>the type of event to remove</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>the method the event invokes</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.EventManager" superclass="Object">
        <description>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
            several useful events directly.
        See &lt;a ext:cls=&quot;apf.EventObject&quot; href=&quot;output/apf.EventObject.html&quot;&gt;apf.EventObject&lt;/a&gt; for more details on normalized event objects.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="ieDeferSrc" type="Object" scope="instance" access="read-write">
                <description>Url used for onDocumentReady with using SSL (defaults to apf.SSL_SECURE_URL)</description>
            </property>
            <property name="textResizeInterval" type="Object" scope="instance" access="read-write">
                <description>The frequency, in milliseconds, to check for text resize events (defaults to 50)</description>
            </property>
        </properties>
        <methods>
            <method name="addListener" scope="instance">
                <description>Appends an event handler to an element.  The shorthand version &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;on&quot; href=&quot;output/apf.EventManager.html#on&quot;&gt;on&lt;/a&gt; is equivalent.  Typically you will
                use &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.Element.html#addListener&quot;&gt;apf.Element.addListener&lt;/a&gt; directly on an Element in favor of calling this version.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The html element or id to assign the event handler to</description>
                    </parameter>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to listen for</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The handler function the event invokes This function is passed
                            the following parameters:&lt;ul&gt;
                            &lt;li&gt;evt : EventObject&lt;div class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.EventObject&quot; href=&quot;output/apf.EventObject.html&quot;&gt;EventObject&lt;/a&gt; describing the event.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;t : Element&lt;div class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;Element&lt;/a&gt; which was the target of the event.
                            Note that this may be filtered by using the &lt;tt&gt;delegate&lt;/tt&gt; option.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;o : Object&lt;div class=&quot;sub-desc&quot;&gt;The options object from the addListener call.&lt;/div&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the handler
                        function (the handler function's &quot;this&quot; context)</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) An object containing handler configuration properties.
                            This may contain any of the following properties:&lt;ul&gt;
                            &lt;li&gt;scope {Object} : The scope in which to execute the handler function. The handler function's &quot;this&quot; context.&lt;/li&gt;
                            &lt;li&gt;delegate {String} : A simple selector to filter the target or look for a descendant of the target&lt;/li&gt;
                            &lt;li&gt;stopEvent {Boolean} : True to stop the event. That is stop propagation, and prevent the default action.&lt;/li&gt;
                            &lt;li&gt;preventDefault {Boolean} : True to prevent the default action&lt;/li&gt;
                            &lt;li&gt;stopPropagation {Boolean} : True to prevent event propagation&lt;/li&gt;
                            &lt;li&gt;normalized {Boolean} : False to pass a browser event to the handler function instead of an apf.EventObject&lt;/li&gt;
                            &lt;li&gt;delay {Number} : The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;
                            &lt;li&gt;single {Boolean} : True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;
                            &lt;li&gt;buffer {Number} : Causes the handler to be scheduled to run in an &lt;a ext:cls=&quot;apf.util.DelayedTask&quot; href=&quot;output/apf.util.DelayedTask.html&quot;&gt;apf.util.DelayedTask&lt;/a&gt; delayed
                            by the specified number of milliseconds. If the event fires again within that time, the original
                            handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;
                            &lt;/ul&gt;&lt;br&gt;
                        &lt;p&gt;See &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.Element.html#addListener&quot;&gt;apf.Element.addListener&lt;/a&gt; for examples of how to use these options.&lt;/p&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeListener" scope="instance">
                <description>Removes an event handler from an element.  The shorthand version &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;un&quot; href=&quot;output/apf.EventManager.html#un&quot;&gt;un&lt;/a&gt; is equivalent.  Typically
                you will use &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;removeListener&quot; href=&quot;output/apf.Element.html#removeListener&quot;&gt;apf.Element.removeListener&lt;/a&gt; directly on an Element in favor of calling this version.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The id or html element from which to remove the event</description>
                    </parameter>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The handler function to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeAll" scope="instance">
                <description>Removes all event handers from an element.  Typically you will use &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;removeAllListeners&quot; href=&quot;output/apf.Element.html#removeAllListeners&quot;&gt;apf.Element.removeAllListeners&lt;/a&gt;
                directly on an Element in favor of calling this version.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The id or html element from which to remove the event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onDocumentReady" scope="instance">
                <description>Fires when the document is ready (before onload and before images are loaded). Can be
                accessed shorthanded as apf.onReady().</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) An object that becomes the scope of the handler</description>
                    </parameter>
                    <parameter name="options" type="boolean" usage="optional">
                        <description>(optional) An object containing standard &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.EventManager.html#addListener&quot;&gt;addListener&lt;/a&gt; options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onWindowResize" scope="instance">
                <description>Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>An object that becomes the scope of the handler</description>
                    </parameter>
                    <parameter name="options" type="boolean" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="onTextResize" scope="instance">
                <description>Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>An object that becomes the scope of the handler</description>
                    </parameter>
                    <parameter name="options" type="boolean" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeResizeListener" scope="instance">
                <description>Removes the passed window resize listener.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope of handler</description>
                    </parameter>
                </parameters>
            </method>
            <method name="on" scope="instance">
                <description>Appends an event handler to an element.  Shorthand for &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.EventManager.html#addListener&quot;&gt;addListener&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The html element or id to assign the event handler to</description>
                    </parameter>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to listen for</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The handler function the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the handler
                        function (the handler function's &quot;this&quot; context)</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) An object containing standard &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;addListener&quot; href=&quot;output/apf.EventManager.html#addListener&quot;&gt;addListener&lt;/a&gt; options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="un" scope="instance">
                <description>Removes an event handler from an element.  Shorthand for &lt;a ext:cls=&quot;apf.EventManager&quot; ext:member=&quot;removeListener&quot; href=&quot;output/apf.EventManager.html#removeListener&quot;&gt;removeListener&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The id or html element from which to remove the event</description>
                    </parameter>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The handler function to remove</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.EventObject" superclass="Object">
        <description>EventObject exposes the Yahoo! UI Event functionality directly on the object
            passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code
            Example:
            &lt;pre&gt;&lt;code&gt;function handleClick(e){ // e is not a standard event object, it is a apf.EventObject
            e.preventDefault();
            var target = e.getTarget();
            ...
            }
            var myDiv = apf.get(&quot;myDiv&quot;);
            myDiv.on(&quot;click&quot;, handleClick);
            //or
            apf.EventManager.on(&quot;myDiv&quot;, 'click', handleClick);
        apf.EventManager.addListener(&quot;myDiv&quot;, 'click', handleClick);&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="browserEvent" type="Object" scope="instance" access="read-write">
                <description>The normal browser event</description>
            </property>
            <property name="button" type="Object" scope="instance" access="read-write">
                <description>The button pressed in a mouse event</description>
            </property>
            <property name="shiftKey" type="Object" scope="instance" access="read-write">
                <description>True if the shift key was down during the event</description>
            </property>
            <property name="ctrlKey" type="Object" scope="instance" access="read-write">
                <description>True if the control key was down during the event</description>
            </property>
            <property name="altKey" type="Object" scope="instance" access="read-write">
                <description>True if the alt key was down during the event</description>
            </property>
            <property name="BACKSPACE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="TAB" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_CENTER" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="ENTER" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="RETURN" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="SHIFT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="CTRL" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="ALT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="PAUSE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="CAPS_LOCK" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="ESC" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="SPACE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="PAGE_UP" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="PAGE_DOWN" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="END" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="HOME" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="LEFT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="UP" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="RIGHT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="DOWN" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="PRINT_SCREEN" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="INSERT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="DELETE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="ZERO" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="ONE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="TWO" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="THREE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="FOUR" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="FIVE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="SIX" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="SEVEN" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="EIGHT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NINE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="A" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="B" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="C" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="D" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="E" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="G" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="H" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="I" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="J" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="K" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="L" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="M" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="N" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="O" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="P" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="Q" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="R" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="S" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="T" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="U" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="V" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="W" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="X" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="Y" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="Z" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="CONTEXT_MENU" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_ZERO" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_ONE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_TWO" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_THREE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_FOUR" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_FIVE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_SIX" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_SEVEN" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_EIGHT" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_NINE" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_MULTIPLY" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_PLUS" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_MINUS" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_PERIOD" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="NUM_DIVISION" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F1" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F2" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F3" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F4" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F5" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F6" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F7" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F8" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F9" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F10" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F11" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
            <property name="F12" type="Number" scope="instance" access="read-write">
                <description>Key constant</description>
            </property>
        </properties>
        <methods>
            <method name="stopEvent" scope="instance">
                <description>Stop the event (preventDefault and stopPropagation)</description>
                <parameters/>
            </method>
            <method name="preventDefault" scope="instance">
                <description>Prevents the browsers default handling of the event.</description>
                <parameters/>
            </method>
            <method name="stopPropagation" scope="instance">
                <description>Cancels bubbling of the event.</description>
                <parameters/>
            </method>
            <method name="getCharCode" scope="instance">
                <description>Gets the character code for the event.</description>
                <parameters/>
            </method>
            <method name="getKey" scope="instance">
                <description>Returns a normalized keyCode for the event.</description>
                <parameters/>
            </method>
            <method name="getPageX" scope="instance">
                <description>Gets the x coordinate of the event.</description>
                <parameters/>
            </method>
            <method name="getPageY" scope="instance">
                <description>Gets the y coordinate of the event.</description>
                <parameters/>
            </method>
            <method name="getTime" scope="instance">
                <description>Gets the time of the event.</description>
                <parameters/>
            </method>
            <method name="getXY" scope="instance">
                <description>Gets the page coordinates of the event.</description>
                <parameters/>
            </method>
            <method name="getTarget" scope="instance">
                <description>Gets the target for the event.</description>
                <parameters>
                    <parameter name="selector" type="String" usage="optional">
                        <description>(optional) A simple selector to filter the target or look for an ancestor of the target</description>
                    </parameter>
                    <parameter name="maxDepth" type="Number/Mixed" usage="optional">
                        <description>(optional) The max depth to
                        search as a number or element (defaults to 10 || document.body)</description>
                    </parameter>
                    <parameter name="returnEl" type="Boolean" usage="optional">
                        <description>(optional) True to return a apf.Element object instead of DOM node</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRelatedTarget" scope="instance">
                <description>Gets the related target.</description>
                <parameters/>
            </method>
            <method name="getWheelDelta" scope="instance">
                <description>Normalizes mouse wheel delta across browsers</description>
                <parameters/>
            </method>
            <method name="hasModifier" scope="instance">
                <description>Returns true if the control, meta, shift or alt key was pressed during this event.</description>
                <parameters/>
            </method>
            <method name="within" scope="instance">
                <description>Returns true if the target of this event is a child of el.  If the target is el, it returns false.
                    Example usage:&lt;pre&gt;&lt;code&gt;// Handle click on any child of an element
                    apf.getBody().on('click', function(e){
                    if(e.within('some-el')){
                    alert('Clicked on a child of some-el!');
                    }
                    });

                    // Handle click directly on an element, ignoring clicks on child nodes
                    apf.getBody().on('click', function(e,t){
                    if((t.id == 'some-el') &amp;&amp; !e.within(t, true)){
                    alert('Clicked directly on some-el!');
                    }
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The id, DOM element or apf.Element to check</description>
                    </parameter>
                    <parameter name="related" type="Boolean" usage="optional">
                        <description>(optional) true to test if the related target is within el instead of the target</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Fx" superclass="Object">
        <description>&lt;p&gt;A class to provide basic animation and visual effects support.  &lt;b&gt;Note:&lt;/b&gt; This class is automatically applied
            to the &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; interface when included, so all effects calls should be performed via Element.
            Conversely, since the effects are not actually defined in Element, apf.Fx &lt;b&gt;must&lt;/b&gt; be included in order for the
            Element effects to work.&lt;/p&gt;&lt;br/&gt;
            &lt;p&gt;It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that
            they return the Element object itself as the method return value, it is not always possible to mix the two in a single
            method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
            Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
            while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
            expected results and should be done with care.&lt;/p&gt;&lt;br/&gt;
            &lt;p&gt;Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
            that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:&lt;/p&gt;
            &lt;pre&gt;Value  Description
            -----  -----------------------------
            tl     The top left corner
            t      The center of the top edge
            tr     The top right corner
            l      The center of the left edge
            r      The center of the right edge
            bl     The bottom left corner
            b      The center of the bottom edge
            br     The bottom right corner&lt;/pre&gt;
            &lt;b&gt;Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section
        below are common options that can be passed to any Fx method.&lt;/b&gt;</description>
        <properties/>
        <methods>
            <method name="slideIn" scope="instance">
                <description>Slides the element into view.  An anchor point can be optionally passed to set the point of
                    origin for the slide effect.  This function automatically handles wrapping the element with
                    a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: slide the element in from the top
                    el.slideIn();

                    // custom: slide the element in from the right with a 2-second duration
                    el.slideIn('r', { duration: 2 });

                    // common config options shown with default values
                    el.slideIn('t', {
                    easing: 'easeOut',
                    duration: .5
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="anchor" type="String" usage="optional">
                        <description>(optional) One of the valid Fx anchor positions (defaults to top: 't')</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="slideOut" scope="instance">
                <description>Slides the element out of view.  An anchor point can be optionally passed to set the end point
                    for the slide effect.  When the effect is completed, the element will be hidden (visibility =
                    'hidden') but block elements will still take up space in the document.  The element must be removed
                    from the DOM using the 'remove' config option if desired.  This function automatically handles
                    wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: slide the element out to the top
                    el.slideOut();

                    // custom: slide the element out to the right with a 2-second duration
                    el.slideOut('r', { duration: 2 });

                    // common config options shown with default values
                    el.slideOut('t', {
                    easing: 'easeOut',
                    duration: .5,
                    remove: false,
                    useDisplay: false
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="anchor" type="String" usage="optional">
                        <description>(optional) One of the valid Fx anchor positions (defaults to top: 't')</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="puff" scope="instance">
                <description>Fades the element out while slowly expanding it in all directions.  When the effect is completed, the
                    element will be hidden (visibility = 'hidden') but block elements will still take up space in the document.
                    The element must be removed from the DOM using the 'remove' config option if desired.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default
                    el.puff();

                    // common config options shown with default values
                    el.puff({
                    easing: 'easeOut',
                    duration: .5,
                    remove: false,
                    useDisplay: false
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="switchOff" scope="instance">
                <description>Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
                    When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still
                    take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default
                    el.switchOff();

                    // all config options shown with default values
                    el.switchOff({
                    easing: 'easeIn',
                    duration: .3,
                    remove: false,
                    useDisplay: false
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="highlight" scope="instance">
                <description>Highlights the Element by setting a color (applies to the background-color by default, but can be
                    changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original
                    color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: highlight background to yellow
                    el.highlight();

                    // custom: highlight foreground text to blue for 2 seconds
                    el.highlight(&quot;0000ff&quot;, { attr: 'color', duration: 2 });

                    // common config options shown with default values
                    el.highlight(&quot;ffff9c&quot;, {
                    attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value
                    endColor: (current color) or &quot;ffffff&quot;,
                    easing: 'easeIn',
                    duration: 1
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="color" type="String" usage="optional">
                        <description>(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="frame" scope="instance">
                <description>Shows a ripple of exploding, attenuating borders to draw attention to an Element.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: a single light blue ripple
                    el.frame();

                    // custom: 3 red ripples lasting 3 seconds total
                    el.frame(&quot;ff0000&quot;, 3, { duration: 3 });

                    // common config options shown with default values
                    el.frame(&quot;C3DAF9&quot;, 1, {
                    duration: 1 //duration of entire animation (not each individual ripple)
                    // Note: Easing is not configurable and will be ignored if included
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="color" type="String" usage="optional">
                        <description>(optional) The color of the border. Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').</description>
                    </parameter>
                    <parameter name="count" type="Number" usage="optional">
                        <description>(optional) The number of ripples to display (defaults to 1)</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="pause" scope="instance">
                <description>Creates a pause before any subsequent queued effects begin.  If there are
                    no effects queued after the pause it will have no effect.
                    Usage:
                &lt;pre&gt;&lt;code&gt;el.pause(1);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="seconds" type="Number" usage="required">
                        <description>The length of time to pause (in seconds)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fadeIn" scope="instance">
                <description>Fade an element in (from transparent to opaque).  The ending opacity can be specified
                    using the &quot;endOpacity&quot; config option.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: fade in from opacity 0 to 100%
                    el.fadeIn();

                    // custom: fade in from opacity 0 to 75% over 2 seconds
                    el.fadeIn({ endOpacity: .75, duration: 2});

                    // common config options shown with default values
                    el.fadeIn({
                    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
                    easing: 'easeOut',
                    duration: .5
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fadeOut" scope="instance">
                <description>Fade an element out (from opaque to transparent).  The ending opacity can be specified
                    using the &quot;endOpacity&quot; config option.  Note that IE may require useDisplay:true in order
                    to redisplay correctly.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: fade out from the element's current opacity to 0
                    el.fadeOut();

                    // custom: fade out from the element's current opacity to 25% over 2 seconds
                    el.fadeOut({ endOpacity: .25, duration: 2});

                    // common config options shown with default values
                    el.fadeOut({
                    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
                    easing: 'easeOut',
                    duration: .5,
                    remove: false,
                    useDisplay: false
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="scale" scope="instance">
                <description>Animates the transition of an element's dimensions from a starting height/width
                    to an ending height/width.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// change height and width to 100x100 pixels
                    el.scale(100, 100);

                    // common config options shown with default values.  The height and width will default to
                    // the element's existing values if passed as null.
                    el.scale(
                    [element's width],
                    [element's height], {
                    easing: 'easeOut',
                    duration: .35
                    }
                );&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width (pass undefined to keep the original width)</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height (pass undefined to keep the original height)</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="shift" scope="instance">
                <description>Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
                    Any of these properties not specified in the config object will not be changed.  This effect
                    requires that at least one new dimension, position or opacity setting must be passed in on
                    the config object in order for the function to have any effect.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// slide the element horizontally to x position 200 while changing the height and opacity
                    el.shift({ x: 200, height: 50, opacity: .8 });

                    // common config options shown with default values.
                    el.shift({
                    width: [element's width],
                    height: [element's height],
                    x: [element's x position],
                    y: [element's y position],
                    opacity: [element's opacity],
                    easing: 'easeOut',
                    duration: .35
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="required">
                        <description>Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="ghost" scope="instance">
                <description>Slides the element while fading it out of view.  An anchor point can be optionally passed to set the
                    ending point of the effect.
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// default: slide the element downward while fading out
                    el.ghost();

                    // custom: slide the element out to the right with a 2-second duration
                    el.ghost('r', { duration: 2 });

                    // common config options shown with default values
                    el.ghost('b', {
                    easing: 'easeOut',
                    duration: .5,
                    remove: false,
                    useDisplay: false
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="anchor" type="String" usage="optional">
                        <description>(optional) One of the valid Fx anchor positions (defaults to bottom: 'b')</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) Object literal with any of the Fx config options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="syncFx" scope="instance">
                <description>Ensures that all effects queued after syncFx is called on the element are
                run concurrently.  This is the opposite of &lt;a ext:cls=&quot;apf.Fx&quot; ext:member=&quot;sequenceFx&quot; href=&quot;output/apf.Fx.html#sequenceFx&quot;&gt;sequenceFx&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="sequenceFx" scope="instance">
                <description>Ensures that all effects queued after sequenceFx is called on the element are
                run in sequence.  This is the opposite of &lt;a ext:cls=&quot;apf.Fx&quot; ext:member=&quot;syncFx&quot; href=&quot;output/apf.Fx.html#syncFx&quot;&gt;syncFx&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="hasActiveFx" scope="instance">
                <description>Returns true if the element has any effects actively running or queued, else returns false.</description>
                <parameters/>
            </method>
            <method name="stopFx" scope="instance">
                <description>Stops any running effects and clears the element's internal effects queue if it contains
                any additional effects that haven't started yet.</description>
                <parameters/>
            </method>
            <method name="hasFxBlock" scope="instance">
                <description>Returns true if the element is currently blocking so that no other effect can be queued
                    until this effect is finished, else returns false if blocking is not set.  This is commonly
                    used to ensure that an effect initiated by a user action runs to completion prior to the
                same effect being restarted (e.g., firing only one effect even if the user clicks several times).</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.History" superclass="apf.util.Observable">
        <description>History management component that allows you to register arbitrary tokens that signify application
            history state on navigation actions.  You can then handle the history &lt;a ext:cls=&quot;apf.History&quot; ext:member=&quot;change&quot; href=&quot;output/apf.History.html#change&quot;&gt;change&lt;/a&gt; event in order
            to reset your application UI to the appropriate state when the user navigates forward or backward through
        the browser history stack.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="fieldId" type="String" scope="instance" access="read-write">
                <description>The id of the hidden field required for storing the current history token.</description>
            </property>
            <property name="iframeId" type="String" scope="instance" access="read-write">
                <description>The id of the iframe required by IE to manage the history stack.</description>
            </property>
        </properties>
        <methods>
            <method name="init" scope="instance">
                <description>Initialize the global History instance.</description>
                <parameters>
                    <parameter name="onReady" type="Boolean" usage="optional">
                        <description>(optional) A callback function that will be called once the history
                        component is fully initialized.</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The callback scope</description>
                    </parameter>
                </parameters>
            </method>
            <method name="add" scope="instance">
                <description>Add a new token to the history stack. This can be any arbitrary value, although it would
                    commonly be the concatenation of a component id and another id marking the specifc history
                    state of that component.  Example usage:
                    &lt;pre&gt;&lt;code&gt;// Handle tab changes on a TabPanel
                    tabPanel.on('tabchange', function(tabPanel, tab){
                    apf.History.add(tabPanel.id + ':' + tab.id);
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="token" type="String" usage="required">
                        <description>The value that defines a particular application-specific history state</description>
                    </parameter>
                    <parameter name="preventDuplicates" type="Boolean" usage="required">
                        <description>When true, if the passed token matches the current token
                            it will not save a new history step. Set to false if the same state can be saved more than once
                        at the same history stack location (defaults to true).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="back" scope="instance">
                <description>Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).</description>
                <parameters/>
            </method>
            <method name="forward" scope="instance">
                <description>Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).</description>
                <parameters/>
            </method>
            <method name="getToken" scope="instance">
                <description>Retrieves the currently-active history token.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.KeyMap" superclass="Object">
        <description>Handles mapping keys to actions for an element. One key map can be used for multiple actions.
            The constructor accepts the same config object as defined by &lt;a ext:cls=&quot;apf.KeyMap&quot; ext:member=&quot;addBinding&quot; href=&quot;output/apf.KeyMap.html#addBinding&quot;&gt;addBinding&lt;/a&gt;.
            If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
            combination it will call the function with this signature (if the match is a multi-key
            combination the callback will still be called only once): (String key, apf.EventObject e)
            A KeyMap can also handle a string representation of keys.&lt;br /&gt;
            Usage:&#13;
            &lt;pre&gt;&lt;code&gt;// map one key by key code
            var map = new apf.KeyMap(&quot;my-element&quot;, {
            key: 13, // or apf.EventObject.ENTER
            fn: myHandler,
            scope: myObject
            });

            // map multiple keys to one action by string
            var map = new apf.KeyMap(&quot;my-element&quot;, {
            key: &quot;a\r\n\t&quot;,
            fn: myHandler,
            scope: myObject
            });

            // map multiple keys to multiple actions by strings and array of codes
            var map = new apf.KeyMap(&quot;my-element&quot;, [
            {
            key: [10,13],
            fn: function(){ alert(&quot;Return was pressed&quot;); }
            }, {
            key: &quot;abc&quot;,
            fn: function(){ alert('a, b or c was pressed'); }
            }, {
            key: &quot;\t&quot;,
            ctrl:true,
            shift:true,
            fn: function(){ alert('Control + shift + tab was pressed.'); }
            }
            ]);&lt;/code&gt;&lt;/pre&gt;
        &lt;b&gt;Note: A KeyMap starts enabled&lt;/b&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to bind to</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config (see &lt;a ext:cls=&quot;apf.KeyMap&quot; ext:member=&quot;addBinding&quot; href=&quot;output/apf.KeyMap.html#addBinding&quot;&gt;addBinding&lt;/a&gt;)</description>
                    </parameter>
                    <parameter name="eventName" type="String" usage="optional">
                        <description>(optional) The event to bind to (defaults to &quot;keydown&quot;)</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="stopEvent" type="Boolean" scope="instance" access="read-write">
                <description>True to stop the event from bubbling and prevent the default browser action if the
                key was handled by the KeyMap (defaults to false)</description>
            </property>
        </properties>
        <methods>
            <method name="addBinding" scope="instance">
                <description>Add a new binding to this KeyMap. The following config object properties are supported:
                    &lt;pre&gt;Property    Type             Description&#13;
                    ----------  ---------------  ----------------------------------------------------------------------&#13;
                    key         String/Array     A single keycode or an array of keycodes to handle&#13;
                    shift       Boolean          True to handle key only when shift is pressed (defaults to false)&#13;
                    ctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)&#13;
                    alt         Boolean          True to handle key only when alt is pressed (defaults to false)&#13;
                    handler     Function         The function to call when KeyMap finds the expected key combination&#13;
                    fn          Function         Alias of handler (for backwards-compatibility)&#13;
                    scope       Object           The scope of the callback function&#13;
                    stopEvent   Boolean          True to stop the event&lt;/pre&gt;
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// Create a KeyMap
                    var map = new apf.KeyMap(document, {
                    key: apf.EventObject.ENTER,
                    fn: handleKey,
                    scope: this
                    });

                    //Add a new binding to the existing KeyMap later
                    map.addBinding({
                    key: 'abc',
                    shift: true,
                    fn: handleKey,
                    scope: this
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="config" type="Object/Array" usage="required">
                        <description>A single KeyMap config or an array of configs</description>
                    </parameter>
                </parameters>
            </method>
            <method name="on" scope="instance">
                <description>Shorthand for adding a single key listener</description>
                <parameters>
                    <parameter name="key" type="Number/Array/Object" usage="required">
                        <description>Either the numeric key code, array of key codes or an object with the
                            following options:
                        {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isEnabled" scope="instance">
                <description>Returns true if this KeyMap is enabled</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>Enables this KeyMap</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>Disable this KeyMap</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.KeyNav" superclass="Object">
        <description>&lt;p&gt;Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
            navigation keys to function calls that will get called when the keys are pressed, providing an easy
            way to implement custom navigation schemes for any UI component.&lt;/p&gt;
            &lt;p&gt;The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
            pageUp, pageDown, del, home, end.  Usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var nav = new apf.KeyNav(&quot;my-element&quot;, {
            &quot;left&quot; : function(e){
            this.moveLeft(e.ctrlKey);
            },
            &quot;right&quot; : function(e){
            this.moveRight(e.ctrlKey);
            },
            &quot;enter&quot; : function(e){
            this.save();
            },
            scope : this
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to bind to</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="enable" scope="instance">
                <description>Enable this KeyNav</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>Disable this KeyNav</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.Layer" superclass="apf.Element">
        <description>An extended &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; object that supports a shadow and shim, constrain to viewport and
        automatic maintaining of shadow/shim positions.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>An object with config options.</description>
                    </parameter>
                    <parameter name="existingEl" type="String/HTMLElement" usage="optional">
                        <description>(optional) Uses an existing DOM element. If the element is not found it creates it.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setZIndex" scope="instance">
                <description>Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically
                    incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow
                element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).</description>
                <parameters>
                    <parameter name="zindex" type="Number" usage="required">
                        <description>The new z-index to set</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.LoadMask" superclass="Object">
        <description>A simple utility class for generically masking elements while loading data.  If the &lt;a ext:cls=&quot;apf.LoadMask&quot; ext:member=&quot;store&quot; href=&quot;output/apf.LoadMask.html#store&quot;&gt;store&lt;/a&gt;
            config option is specified, the masking will be automatically synchronized with the store's loading
            process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
            element's Updater load indicator and will be destroyed after the initial load.
            &lt;p&gt;Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// Basic mask:
            var myMask = new apf.LoadMask(apf.getBody(), {msg:&quot;Please wait...&quot;});
        myMask.show();&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new LoadMask</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element or DOM node, or its id</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="disabled" type="Boolean" scope="instance" access="read-write">
                <description>Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)</description>
            </property>
        </properties>
        <methods>
            <method name="disable" scope="instance">
                <description>Disables the mask to prevent it from being displayed</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>Enables the mask so that it can be displayed</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Show this LoadMask over the configured Element.</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hide this LoadMask.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.MessageBox" superclass="Object">
        <description>&lt;p&gt;Utility class for generating different styles of message boxes.  The alias apf.Msg can also be used.&lt;p/&gt;
            &lt;p&gt;Note that the MessageBox is asynchronous.  Unlike a regular JavaScript &lt;code&gt;alert&lt;/code&gt; (which will halt
            browser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code
            that should only run &lt;em&gt;after&lt;/em&gt; some user feedback from the MessageBox, you must use a callback function
            (see the &lt;code&gt;function&lt;/code&gt; parameter for &lt;a ext:cls=&quot;apf.MessageBox&quot; ext:member=&quot;show&quot; href=&quot;output/apf.MessageBox.html#show&quot;&gt;show&lt;/a&gt; for more details).&lt;/p&gt;
            &lt;p&gt;Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// Basic alert:
            apf.Msg.alert('Status', 'Changes saved successfully.');

            // Prompt for user data and process the result using a callback:
            apf.Msg.prompt('Name', 'Please enter your name:', function(btn, text){
            if (btn == 'ok'){
            // process text value and close...
            }
            });

            // Show a dialog using config options:
            apf.Msg.show({
            title:'Save Changes?',
            msg: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',
            buttons: apf.Msg.YESNOCANCEL,
            fn: processResult,
            animEl: 'elId',
            icon: apf.MessageBox.QUESTION
        });&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="OK" type="Object" scope="instance" access="read-write">
                <description>Button config that displays a single OK button</description>
            </property>
            <property name="CANCEL" type="Object" scope="instance" access="read-write">
                <description>Button config that displays a single Cancel button</description>
            </property>
            <property name="OKCANCEL" type="Object" scope="instance" access="read-write">
                <description>Button config that displays OK and Cancel buttons</description>
            </property>
            <property name="YESNO" type="Object" scope="instance" access="read-write">
                <description>Button config that displays Yes and No buttons</description>
            </property>
            <property name="YESNOCANCEL" type="Object" scope="instance" access="read-write">
                <description>Button config that displays Yes, No and Cancel buttons</description>
            </property>
            <property name="INFO" type="String" scope="instance" access="read-write">
                <description>The CSS class that provides the INFO icon image</description>
            </property>
            <property name="WARNING" type="String" scope="instance" access="read-write">
                <description>The CSS class that provides the WARNING icon image</description>
            </property>
            <property name="QUESTION" type="String" scope="instance" access="read-write">
                <description>The CSS class that provides the QUESTION icon image</description>
            </property>
            <property name="ERROR" type="String" scope="instance" access="read-write">
                <description>The CSS class that provides the ERROR icon image</description>
            </property>
            <property name="defaultTextHeight" type="Number" scope="instance" access="read-write">
                <description>The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)</description>
            </property>
            <property name="maxWidth" type="Number" scope="instance" access="read-write">
                <description>The maximum width in pixels of the message box (defaults to 600)</description>
            </property>
            <property name="minWidth" type="Number" scope="instance" access="read-write">
                <description>The minimum width in pixels of the message box (defaults to 100)</description>
            </property>
            <property name="minProgressWidth" type="Number" scope="instance" access="read-write">
                <description>The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful
                for setting a different minimum width than text-only dialogs may need (defaults to 250)</description>
            </property>
            <property name="buttonText" type="Object" scope="instance" access="read-write">
                <description>An object containing the default button text strings that can be overriden for localized language support.
                    Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific
                    resource file for handling language support across the framework.
                Customize the default text like so: apf.MessageBox.buttonText.yes = &quot;oui&quot;; //french</description>
            </property>
        </properties>
        <methods>
            <method name="getDialog" scope="instance">
                <description>Returns a reference to the underlying &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; element</description>
                <parameters/>
            </method>
            <method name="updateText" scope="instance">
                <description>Updates the message box body text</description>
                <parameters>
                    <parameter name="text" type="String" usage="optional">
                        <description>(optional) Replaces the message box element's innerHTML with the specified string (defaults to
                        the XHTML-compliant non-breaking space character '&amp;amp;#160;')</description>
                    </parameter>
                </parameters>
            </method>
            <method name="updateProgress" scope="instance">
                <description>Updates a progress-style message box's text and progress bar.  Only relevant on message boxes
                initiated via &lt;a ext:cls=&quot;apf.MessageBox&quot; ext:member=&quot;progress&quot; href=&quot;output/apf.MessageBox.html#progress&quot;&gt;apf.MessageBox.progress&lt;/a&gt; or by calling &lt;a ext:cls=&quot;apf.MessageBox&quot; ext:member=&quot;show&quot; href=&quot;output/apf.MessageBox.html#show&quot;&gt;apf.MessageBox.show&lt;/a&gt; with progress: true.</description>
                <parameters>
                    <parameter name="value" type="Number" usage="required">
                        <description>Any number between 0 and 1 (e.g., .5, defaults to 0)</description>
                    </parameter>
                    <parameter name="progressText" type="String" usage="required">
                        <description>The progress text to display inside the progress bar (defaults to '')</description>
                    </parameter>
                    <parameter name="msg" type="String" usage="required">
                        <description>The message box's body text is replaced with the specified string (defaults to undefined
                        so that any existing body text will not get overwritten by default unless a new value is passed in)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isVisible" scope="instance">
                <description>Returns true if the message box is currently displayed</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hides the message box if it is displayed</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Displays a new message box, or reinitializes an existing message box, based on the config options
                    passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,
                although those calls are basic shortcuts and do not support all of the config options allowed here.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The following config options are supported: &lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;animEl&lt;/b&gt; : String/Element&lt;div class=&quot;sub-desc&quot;&gt;An id or Element from which the message box should animate as it
                            opens and closes (defaults to undefined)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;buttons&lt;/b&gt; : Object/Boolean&lt;div class=&quot;sub-desc&quot;&gt;A button config object (e.g., apf.MessageBox.OKCANCEL or {ok:'Foo',
                            cancel:'Bar'}), or false to not show any buttons (defaults to false)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;closable&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;False to hide the top-right close button (defaults to true). Note that
                            progress and wait dialogs will ignore this property and always hide the close button as they can only
                            be closed programmatically.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;cls&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;A custom CSS class to apply to the message box's container element&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;defaultTextHeight&lt;/b&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The default height in pixels of the message box's multiline textarea
                            if displayed (defaults to 75)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;fn&lt;/b&gt; : Function&lt;div class=&quot;sub-desc&quot;&gt;A callback function which is called when the dialog is dismissed either
                            by clicking on the configured buttons, or on the dialog close button, or by pressing
                            the return button to enter input.
                            &lt;p&gt;Progress and wait dialogs will ignore this option since they do not respond to user
                            actions and can only be closed programmatically, so any required function should be called
                            by the same code after it closes the dialog. Parameters passed:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;buttonId&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The ID of the button pressed, one of:&lt;div class=&quot;sub-desc&quot;&gt;&lt;ul&gt;
                            &lt;li&gt;&lt;tt&gt;ok&lt;/tt&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;yes&lt;/tt&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;no&lt;/tt&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;cancel&lt;/tt&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;text&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;Value of the input field if either &lt;tt&gt;{@link #show-option-prompt prompt}&lt;/tt&gt;
                            or &lt;tt&gt;{@link #show-option-multiline multiline}&lt;/tt&gt; is true&lt;/div&gt;&lt;/li&gt;
                            &lt;/p&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;scope&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The scope of the callback function&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;icon&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;A CSS class that provides a background image to be used as the body icon for the
                            dialog (e.g. apf.MessageBox.WARNING or 'custom-class') (defaults to '')&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;iconCls&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The standard &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;iconCls&quot; href=&quot;output/apf.Window.html#iconCls&quot;&gt;apf.Window.iconCls&lt;/a&gt; to
                            add an optional header icon (defaults to '')&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;maxWidth&lt;/b&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The maximum width in pixels of the message box (defaults to 600)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;minWidth&lt;/b&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The minimum width in pixels of the message box (defaults to 100)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;modal&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;False to allow user interaction with the page while the message box is
                            displayed (defaults to true)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;msg&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;A string that will replace the existing message box body text (defaults to the
                            XHTML-compliant non-breaking space character '&amp;amp;#160;')&lt;/div&gt;&lt;/li&gt;
                            &lt;a id=&quot;show-option-multiline&quot;&gt;&lt;/a&gt;&lt;li&gt;&lt;b&gt;multiline&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;
                            True to prompt the user to enter multi-line text (defaults to false)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;progress&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;True to display a progress bar (defaults to false)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;progressText&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The text to display inside the progress bar if progress = true (defaults to '')&lt;/div&gt;&lt;/li&gt;
                            &lt;a id=&quot;show-option-prompt&quot;&gt;&lt;/a&gt;&lt;li&gt;&lt;b&gt;prompt&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;True to prompt the user to enter single-line text (defaults to false)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;proxyDrag&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;True to display a lightweight proxy while dragging (defaults to false)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;title&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The title text&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;value&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The string value to set into the active textbox element if displayed&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;wait&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;True to display a progress bar (defaults to false)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;waitConfig&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;A &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;waitConfig&quot; href=&quot;output/apf.ProgressBar.html#waitConfig&quot;&gt;apf.ProgressBar.waitConfig&lt;/a&gt; object (applies only if wait = true)&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;width&lt;/b&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The width of the dialog in pixels&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            Example usage:
                            &lt;pre&gt;&lt;code&gt;apf.Msg.show({
                            title: 'Address',
                            msg: 'Please enter your address:',
                            width: 300,
                            buttons: apf.MessageBox.OKCANCEL,
                            multiline: true,
                            fn: saveAddress,
                            animEl: 'addAddressBtn',
                            icon: apf.MessageBox.INFO
                        });&lt;/code&gt;&lt;/pre&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setIcon" scope="instance">
                <description>Adds the specified icon to the dialog.  By default, the class 'ext-mb-icon' is applied for default
                    styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
                    to clear any existing icon.  The following built-in icon classes are supported, but you can also pass
                    in a custom class name:
                    &lt;pre&gt;apf.MessageBox.INFO
                    apf.MessageBox.WARNING
                    apf.MessageBox.QUESTION
                apf.MessageBox.ERROR&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="icon" type="String" usage="required">
                        <description>A CSS classname specifying the icon's background image url, or empty string to clear the icon</description>
                    </parameter>
                </parameters>
            </method>
            <method name="progress" scope="instance">
                <description>Displays a message box with a progress bar.  This message box has no buttons and is not closeable by
                    the user.  You are responsible for updating the progress bar as needed via &lt;a ext:cls=&quot;apf.MessageBox&quot; ext:member=&quot;updateProgress&quot; href=&quot;output/apf.MessageBox.html#updateProgress&quot;&gt;apf.MessageBox.updateProgress&lt;/a&gt;
                and closing the message box when the process is complete.</description>
                <parameters>
                    <parameter name="title" type="String" usage="required">
                        <description>The title bar text</description>
                    </parameter>
                    <parameter name="msg" type="String" usage="required">
                        <description>The message box body text</description>
                    </parameter>
                    <parameter name="progressText" type="String" usage="optional">
                        <description>(optional) The text to display inside the progress bar (defaults to '')</description>
                    </parameter>
                </parameters>
            </method>
            <method name="wait" scope="instance">
                <description>Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
                    interaction while waiting for a long-running process to complete that does not have defined intervals.
                You are responsible for closing the message box when the process is complete.</description>
                <parameters>
                    <parameter name="msg" type="String" usage="required">
                        <description>The message box body text</description>
                    </parameter>
                    <parameter name="title" type="String" usage="optional">
                        <description>(optional) The title bar text</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="optional">
                        <description>(optional) A &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;waitConfig&quot; href=&quot;output/apf.ProgressBar.html#waitConfig&quot;&gt;apf.ProgressBar.waitConfig&lt;/a&gt; object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="alert" scope="instance">
                <description>Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
                    If a callback function is passed it will be called after the user clicks the button, and the
                    id of the button that was clicked will be passed as the only parameter to the callback
                (could also be the top-right close button).</description>
                <parameters>
                    <parameter name="title" type="String" usage="required">
                        <description>The title bar text</description>
                    </parameter>
                    <parameter name="msg" type="String" usage="required">
                        <description>The message box body text</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="optional">
                        <description>(optional) The callback function invoked after the message box is closed</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the callback function</description>
                    </parameter>
                </parameters>
            </method>
            <method name="confirm" scope="instance">
                <description>Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
                    If a callback function is passed it will be called after the user clicks either button,
                    and the id of the button that was clicked will be passed as the only parameter to the callback
                (could also be the top-right close button).</description>
                <parameters>
                    <parameter name="title" type="String" usage="required">
                        <description>The title bar text</description>
                    </parameter>
                    <parameter name="msg" type="String" usage="required">
                        <description>The message box body text</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="optional">
                        <description>(optional) The callback function invoked after the message box is closed</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the callback function</description>
                    </parameter>
                </parameters>
            </method>
            <method name="prompt" scope="instance">
                <description>Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
                    The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
                    clicks either button, and the id of the button that was clicked (could also be the top-right
                close button) and the text that was entered will be passed as the two parameters to the callback.</description>
                <parameters>
                    <parameter name="title" type="String" usage="required">
                        <description>The title bar text</description>
                    </parameter>
                    <parameter name="msg" type="String" usage="required">
                        <description>The message box body text</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="optional">
                        <description>(optional) The callback function invoked after the message box is closed</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the callback function</description>
                    </parameter>
                    <parameter name="multiline" type="Boolean/Number" usage="optional">
                        <description>(optional) True to create a multiline textbox using the defaultTextHeight
                        property, or the height in pixels to create the textbox (defaults to false / single-line)</description>
                    </parameter>
                    <parameter name="value" type="String" usage="optional">
                        <description>(optional) Default value of the text input element (defaults to '')</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.PagingToolbar" superclass="apf.Toolbar">
        <description>A specialized toolbar that is bound to a &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; and provides automatic paging controls.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new PagingToolbar</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="beforePageText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;Page&quot;)</description>
            </property>
            <property name="afterPageText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;of {0}&quot;). Note that this string is
                    formatted using {0} as a token that is replaced by the number of total pages. This token should be
                preserved when overriding this string if showing the total page count is desired.</description>
            </property>
            <property name="firstText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;First Page&quot;)</description>
            </property>
            <property name="prevText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;Previous Page&quot;)</description>
            </property>
            <property name="nextText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;Next Page&quot;)</description>
            </property>
            <property name="lastText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;Last Page&quot;)</description>
            </property>
            <property name="refreshText" type="String" scope="instance" access="read-write">
                <description>Customizable piece of the default paging text (defaults to &quot;Refresh&quot;)</description>
            </property>
            <property name="paramNames" type="Object" scope="instance" access="read-write">
                <description>Object mapping of parameter names for load calls (defaults to {start: 'start', limit: 'limit'})</description>
            </property>
        </properties>
        <methods>
            <method name="changePage" scope="instance">
                <description>Change the active page</description>
                <parameters>
                    <parameter name="page" type="Integer" usage="required">
                        <description>The page to display</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unbind" scope="instance">
                <description>Unbinds the paging toolbar from the specified &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;</description>
                <parameters>
                    <parameter name="store" type="apf.data.Store" usage="required">
                        <description>The data store to unbind</description>
                    </parameter>
                </parameters>
            </method>
            <method name="bind" scope="instance">
                <description>Binds the paging toolbar to the specified &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;</description>
                <parameters>
                    <parameter name="store" type="apf.data.Store" usage="required">
                        <description>The data store to bind</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Panel" superclass="apf.Container">
        <description>Panel is a container that has specific functionality and structural components that make it the perfect building
            block for application-oriented user interfaces. The Panel contains bottom and top toolbars, along with separate
            header, footer and body sections.  It also provides built-in expandable and collapsible behavior, along with a
            variety of prebuilt tool buttons that can be wired up to provide other customized behavior.  Panels can be easily
        dropped into any Container or layout, and the layout and rendering pipeline is completely managed by the framework.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="header" type="apf.Element" scope="instance" access="read-write">
                <description>The Panel's header &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;Element&lt;/a&gt;. Read-only.
                &lt;p&gt;This Element is used to house the &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;title&quot; href=&quot;output/apf.Panel.html#title&quot;&gt;title&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;tools&quot; href=&quot;output/apf.Panel.html#tools&quot;&gt;tools&lt;/a&gt;&lt;/p&gt;</description>
            </property>
            <property name="body" type="apf.Element" scope="instance" access="read-write">
                <description>
                    The Panel's body &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;Element&lt;/a&gt; which may be used to contain HTML content.
                    The content may be specified in the &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;html&quot; href=&quot;output/apf.Panel.html#html&quot;&gt;html&lt;/a&gt; config, or it may be loaded using the
                    &lt;a ext:cls=&quot;autoLoad&quot; href=&quot;output/autoLoad.html&quot;&gt;autoLoad&lt;/a&gt; config, or through the Panel's &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;getUpdater&quot; href=&quot;output/apf.Panel.html#getUpdater&quot;&gt;Updater&lt;/a&gt;. Read-only.
                    &lt;p&gt;If this is used to load visible HTML elements in either way, then
                    the Panel may not be used as a Layout for hosting nested Panels.&lt;/p&gt;
                    &lt;p&gt;If this Panel is intended to be used as the host of a Layout (See &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Panel.html#layout&quot;&gt;layout&lt;/a&gt;
                    then the body Element must not be loaded or changed - it is under the control
                of the Panel's Layout.</description>
            </property>
            <property name="footer" type="apf.Element" scope="instance" access="read-write">
                <description>
                    The Panel's footer &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;Element&lt;/a&gt;. Read-only.
                &lt;p&gt;This Element is used to house the Panel's &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;buttons&quot; href=&quot;output/apf.Panel.html#buttons&quot;&gt;buttons&lt;/a&gt;.&lt;/p&gt;</description>
            </property>
            <property name="buttons" type="Array" scope="instance" access="read-write">
                <description>This Panel's Array of buttons as created from the &lt;tt&gt;buttons&lt;/tt&gt;
                config property. Read only.</description>
            </property>
            <property name="dd" type="apf.dd.DragSource." scope="instance" access="read-write">
                <description>&lt;p&gt;If this Panel is configured &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;draggable&quot; href=&quot;output/apf.Panel.html#draggable&quot;&gt;draggable&lt;/a&gt;, this property will contain
                    an instance of &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; which handles dragging the Panel.&lt;/p&gt;
                    The developer must provide implementations of the abstract methods of &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt;
                in order to supply behaviour for each stage of the drag/drop process. See &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;draggable&quot; href=&quot;output/apf.Panel.html#draggable&quot;&gt;draggable&lt;/a&gt;.</description>
            </property>
        </properties>
        <methods>
            <method name="setIconClass" scope="instance">
                <description>Sets the CSS class that provides the icon image for this panel.  This method will replace any existing
                icon class if one has already been set.</description>
                <parameters>
                    <parameter name="cls" type="String" usage="required">
                        <description>The new CSS class name</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTopToolbar" scope="instance">
                <description>Returns the toolbar from the top (tbar) section of the panel.</description>
                <parameters/>
            </method>
            <method name="getBottomToolbar" scope="instance">
                <description>Returns the toolbar from the bottom (bbar) section of the panel.</description>
                <parameters/>
            </method>
            <method name="addButton" scope="instance">
                <description>Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred
                approach is to add buttons via the &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;buttons&quot; href=&quot;output/apf.Panel.html#buttons&quot;&gt;buttons&lt;/a&gt; config.</description>
                <parameters>
                    <parameter name="config" type="String/Object" usage="required">
                        <description>A valid &lt;a ext:cls=&quot;apf.Button&quot; href=&quot;output/apf.Button.html&quot;&gt;apf.Button&lt;/a&gt; config. A string will become the text for a default
                        button config, an object will be treated as a button config object.</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The function to be called on button &lt;a ext:cls=&quot;apf.Button&quot; ext:member=&quot;click&quot; href=&quot;output/apf.Button.html#click&quot;&gt;apf.Button.click&lt;/a&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope to use for the button handler function</description>
                    </parameter>
                </parameters>
            </method>
            <method name="collapse" scope="instance">
                <description>Collapses the panel body so that it becomes hidden.  Fires the &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;beforecollapse&quot; href=&quot;output/apf.Panel.html#beforecollapse&quot;&gt;beforecollapse&lt;/a&gt; event which will
                cancel the collapse action if it returns false.</description>
                <parameters>
                    <parameter name="animate" type="Boolean" usage="required">
                        <description>True to animate the transition, else false (defaults to the value of the
                        &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;animCollapse&quot; href=&quot;output/apf.Panel.html#animCollapse&quot;&gt;animCollapse&lt;/a&gt; panel config)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="expand" scope="instance">
                <description>Expands the panel body so that it becomes visible.  Fires the &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;beforeexpand&quot; href=&quot;output/apf.Panel.html#beforeexpand&quot;&gt;beforeexpand&lt;/a&gt; event which will
                cancel the expand action if it returns false.</description>
                <parameters>
                    <parameter name="animate" type="Boolean" usage="required">
                        <description>True to animate the transition, else false (defaults to the value of the
                        &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;animCollapse&quot; href=&quot;output/apf.Panel.html#animCollapse&quot;&gt;animCollapse&lt;/a&gt; panel config)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toggleCollapse" scope="instance">
                <description>Shortcut for performing an &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;expand&quot; href=&quot;output/apf.Panel.html#expand&quot;&gt;expand&lt;/a&gt; or &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;collapse&quot; href=&quot;output/apf.Panel.html#collapse&quot;&gt;collapse&lt;/a&gt; based on the current state of the panel.</description>
                <parameters>
                    <parameter name="animate" type="Boolean" usage="required">
                        <description>True to animate the transition, else false (defaults to the value of the
                        &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;animCollapse&quot; href=&quot;output/apf.Panel.html#animCollapse&quot;&gt;animCollapse&lt;/a&gt; panel config)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getFrameWidth" scope="instance">
                <description>Returns the width in pixels of the framing elements of this panel (not including the body width).  To
                retrieve the body width see &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;getInnerWidth&quot; href=&quot;output/apf.Panel.html#getInnerWidth&quot;&gt;getInnerWidth&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getFrameHeight" scope="instance">
                <description>Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and
                header and footer elements, but not including the body height).  To retrieve the body height see &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;getInnerHeight&quot; href=&quot;output/apf.Panel.html#getInnerHeight&quot;&gt;getInnerHeight&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getInnerWidth" scope="instance">
                <description>Returns the width in pixels of the body element (not including the width of any framing elements).
                For the frame width see &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;getFrameWidth&quot; href=&quot;output/apf.Panel.html#getFrameWidth&quot;&gt;getFrameWidth&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getInnerHeight" scope="instance">
                <description>Returns the height in pixels of the body element (not including the height of any framing elements).
                For the frame height see &lt;a ext:cls=&quot;apf.Panel&quot; ext:member=&quot;getFrameHeight&quot; href=&quot;output/apf.Panel.html#getFrameHeight&quot;&gt;getFrameHeight&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="setTitle" scope="instance">
                <description>Sets the title text for the panel and optionally the icon class.</description>
                <parameters>
                    <parameter name="title" type="String" usage="required">
                        <description>The title text to set</description>
                    </parameter>
                    <parameter name="iconCls" type="String" usage="optional">
                        <description>(optional) iconCls A user-defined CSS class that provides the icon image for this panel</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getUpdater" scope="instance">
                <description>Get the &lt;a ext:cls=&quot;apf.Updater&quot; href=&quot;output/apf.Updater.html&quot;&gt;apf.Updater&lt;/a&gt; for this panel. Enables you to perform Ajax updates of this panel's body.</description>
                <parameters/>
            </method>
            <method name="load" scope="instance">
                <description>Loads this content panel immediately with content returned from an XHR call.</description>
                <parameters>
                    <parameter name="config" type="Object/String/Function" usage="required">
                        <description>A config object containing any of the following options:
                            &lt;pre&gt;&lt;code&gt;panel.load({
                            url: &quot;your-url.php&quot;,
                            params: {param1: &quot;foo&quot;, param2: &quot;bar&quot;}, // or a URL encoded string
                            callback: yourFunction,
                            scope: yourObject, // optional scope for the callback
                            discardUrl: false,
                            nocache: false,
                            text: &quot;Loading...&quot;,
                            timeout: 30,
                            scripts: false
                            });&lt;/code&gt;&lt;/pre&gt;
                            The only required property is url. The optional properties nocache, text and scripts
                            are shorthand for disableCaching, indicatorText and loadScripts and are used to set their
                        associated property on this panel Updater instance.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.ProgressBar" superclass="apf.BoxComponent">
        <description>&lt;p&gt;An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.&lt;/p&gt;
            &lt;p&gt;In manual mode, you are responsible for showing, updating (via &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;updateProgress&quot; href=&quot;output/apf.ProgressBar.html#updateProgress&quot;&gt;updateProgress&lt;/a&gt;) and clearing the
            progress bar as needed from your own code.  This method is most appropriate when you want to show progress
            throughout an operation that has predictable points of interest at which you can update the control.&lt;/p&gt;
            &lt;p&gt;In automatic mode, you simply call &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;wait&quot; href=&quot;output/apf.ProgressBar.html#wait&quot;&gt;wait&lt;/a&gt; and let the progress bar run indefinitely, only clearing it
            once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time
            and then clear itself.  Automatic mode is most appropriate for timed operations or asymchronous operations in
        which you have no need for indicating intermediate progress.&lt;/p&gt;</description>
        <properties/>
        <methods>
            <method name="updateProgress" scope="instance">
                <description>Updates the progress bar value, and optionally its text.  If the text argument is not specified,
                    any existing text value will be unchanged.  To blank out existing text, pass ''.  Note that even
                    if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for
                determining when the progress is complete and calling &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;reset&quot; href=&quot;output/apf.ProgressBar.html#reset&quot;&gt;reset&lt;/a&gt; to clear and/or hide the control.</description>
                <parameters>
                    <parameter name="value" type="Float" usage="optional">
                        <description>(optional) A floating point value between 0 and 1 (e.g., .5, defaults to 0)</description>
                    </parameter>
                    <parameter name="text" type="String" usage="optional">
                        <description>(optional) The string to display in the progress text element (defaults to '')</description>
                    </parameter>
                </parameters>
            </method>
            <method name="wait" scope="instance">
                <description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
                    bar will automatically reset after a fixed amount of time and optionally call a callback function
                    if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
                    be manually cleared by calling &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;reset&quot; href=&quot;output/apf.ProgressBar.html#reset&quot;&gt;reset&lt;/a&gt;.  The wait method accepts a config object with
                    the following properties:
                    &lt;pre&gt;Property   Type          Description&#13;
                    ---------- ------------  ----------------------------------------------------------------------&#13;
                    duration   Number        The length of time in milliseconds that the progress bar should&#13;
                    run before resetting itself (defaults to undefined, in which case it&#13;
                    will run indefinitely until reset is called)&#13;
                    interval   Number        The length of time in milliseconds between each progress update&#13;
                    (defaults to 1000 ms)&#13;
                    increment  Number        The number of progress update segments to display within the progress&#13;
                    bar (defaults to 10).  If the bar reaches the end and is still&#13;
                    updating, it will automatically wrap back to the beginning.&#13;
                    text       String        Optional text to display in the progress bar element (defaults to '').&#13;
                    fn         Function      A callback function to execute after the progress bar finishes auto-&#13;
                    updating.  The function will be called with no arguments.  This function&#13;
                    will be ignored if duration is not specified since in that case the&#13;
                    progress bar can only be stopped programmatically, so any required function&#13;
                    should be called by the same code after it resets the progress bar.&#13;
                    scope      Object        The scope that is passed to the callback function (only applies when&#13;
                    duration and fn are both passed).&lt;/pre&gt;
                    Example usage:
                    &lt;pre&gt;&lt;code&gt;var p = new apf.ProgressBar({
                    renderTo: 'my-el'
                    });

                    //Wait for 5 seconds, then update the status el (progress bar will auto-reset)
                    p.wait({
                    interval: 100, //bar will move fast!
                    duration: 5000,
                    increment: 15,
                    text: 'Updating...',
                    scope: this,
                    fn: function(){
                    apf.fly('status').update('Done!');
                    }
                    });

                    //Or update indefinitely until some async action completes, then reset manually
                    p.wait();
                    myAction.on('complete', function(){
                    p.reset();
                    apf.fly('status').update('Done!');
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="config" type="Object" usage="optional">
                        <description>(optional) Configuration options</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isWaiting" scope="instance">
                <description>Returns true if the progress bar is currently in a &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;wait&quot; href=&quot;output/apf.ProgressBar.html#wait&quot;&gt;wait&lt;/a&gt; operation</description>
                <parameters/>
            </method>
            <method name="updateText" scope="instance">
                <description>Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress
                bar itself will display the updated text.</description>
                <parameters>
                    <parameter name="text" type="String" usage="optional">
                        <description>(optional) The string to display in the progress text element (defaults to '')</description>
                    </parameter>
                </parameters>
            </method>
            <method name="syncProgressBar" scope="instance">
                <description>Synchronizes the inner bar width to the proper proportion of the total componet width based
                    on the current progress &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;value&quot; href=&quot;output/apf.ProgressBar.html#value&quot;&gt;value&lt;/a&gt;.  This will be called automatically when the ProgressBar
                    is resized by a layout, but if it is rendered auto width, this method can be called from
                another resize handler to sync the ProgressBar if necessary.</description>
                <parameters/>
            </method>
            <method name="setSize" scope="instance">
                <description>Sets the size of the progress bar.</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width in pixels</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The new height in pixels</description>
                    </parameter>
                </parameters>
            </method>
            <method name="reset" scope="instance">
                <description>Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress
                bar will also be hidden (using the &lt;a ext:cls=&quot;apf.ProgressBar&quot; ext:member=&quot;hideMode&quot; href=&quot;output/apf.ProgressBar.html#hideMode&quot;&gt;hideMode&lt;/a&gt; property internally).</description>
                <parameters>
                    <parameter name="hide" type="Boolean" usage="optional">
                        <description>(optional) True to hide the progress bar (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.QuickTip" superclass="apf.ToolTip">
        <description>A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global
        &lt;a ext:cls=&quot;apf.QuickTips&quot; href=&quot;output/apf.QuickTips.html&quot;&gt;apf.QuickTips&lt;/a&gt; instance.  See the QuickTips class header for additional usage details and examples.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Tip</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="register" scope="instance">
                <description>Configures a new quick tip instance and assigns it to a target element.  The following config values are
                    supported (for example usage, see the &lt;a ext:cls=&quot;apf.QuickTips&quot; href=&quot;output/apf.QuickTips.html&quot;&gt;apf.QuickTips&lt;/a&gt; class header):
                    &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;
                    &lt;li&gt;autoHide&lt;/li&gt;
                    &lt;li&gt;cls&lt;/li&gt;
                    &lt;li&gt;dismissDelay (overrides the singleton value)&lt;/li&gt;
                    &lt;li&gt;target (required)&lt;/li&gt;
                    &lt;li&gt;text (required)&lt;/li&gt;
                    &lt;li&gt;title&lt;/li&gt;
                &lt;li&gt;width&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description>Removes this quick tip from its element and destroys it.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement/Element" usage="required">
                        <description>The element from which the quick tip is to be removed.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.QuickTips" superclass="Object">
        <description>&lt;p&gt;Provides attractive and customizable tooltips for any element. The QuickTips
            singleton is used to configure and manage tooltips globally for multiple elements
            in a generic manner.  To create individual tooltips with maximum customizability,
            you should consider either &lt;a ext:cls=&quot;apf.Tip&quot; href=&quot;output/apf.Tip.html&quot;&gt;apf.Tip&lt;/a&gt; or &lt;a ext:cls=&quot;apf.ToolTip&quot; href=&quot;output/apf.ToolTip.html&quot;&gt;apf.ToolTip&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;Quicktips can be configured via tag attributes directly in markup, or by
            registering quick tips programmatically via the &lt;a ext:cls=&quot;apf.QuickTips&quot; ext:member=&quot;register&quot; href=&quot;output/apf.QuickTips.html#register&quot;&gt;register&lt;/a&gt; method.&lt;/p&gt;
            &lt;p&gt;The singleton's instance of &lt;a ext:cls=&quot;apf.QuickTip&quot; href=&quot;output/apf.QuickTip.html&quot;&gt;apf.QuickTip&lt;/a&gt; is available via
            &lt;a ext:cls=&quot;apf.QuickTips&quot; ext:member=&quot;getQuickTip&quot; href=&quot;output/apf.QuickTips.html#getQuickTip&quot;&gt;getQuickTip&lt;/a&gt;, and supports all the methods, and all the all the
            configuration properties of apf.QuickTip. These settings will apply to all
            tooltips shown by the singleton.&lt;/p&gt;
            &lt;p&gt;Below is the summary of the configuration properties which can be used.
            For detailed descriptions see &lt;a ext:cls=&quot;apf.QuickTips&quot; ext:member=&quot;getQuickTip&quot; href=&quot;output/apf.QuickTips.html#getQuickTip&quot;&gt;getQuickTip&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;&lt;b&gt;QuickTips singleton configs (all are optional)&lt;/b&gt;&lt;/p&gt;
            &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;&lt;li&gt;dismissDelay&lt;/li&gt;
            &lt;li&gt;hideDelay&lt;/li&gt;
            &lt;li&gt;maxWidth&lt;/li&gt;
            &lt;li&gt;minWidth&lt;/li&gt;
            &lt;li&gt;showDelay&lt;/li&gt;
            &lt;li&gt;trackMouse&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
            &lt;p&gt;&lt;b&gt;Target element configs (optional unless otherwise noted)&lt;/b&gt;&lt;/p&gt;
            &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;&lt;li&gt;autoHide&lt;/li&gt;
            &lt;li&gt;cls&lt;/li&gt;
            &lt;li&gt;dismissDelay (overrides singleton value)&lt;/li&gt;
            &lt;li&gt;target (required)&lt;/li&gt;
            &lt;li&gt;text (required)&lt;/li&gt;
            &lt;li&gt;title&lt;/li&gt;
            &lt;li&gt;width&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
            &lt;p&gt;Here is an example showing how some of these config options could be used:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// Init the singleton.  Any tag-based quick tips will start working.
            apf.QuickTips.init();

            // Apply a set of config properties to the singleton
            apf.apply(apf.QuickTips.getQuickTip(), {
            maxWidth: 200,
            minWidth: 100,
            showDelay: 50,
            trackMouse: true
            });

            // Manually register a quick tip for a specific element
            q.register({
            target: 'my-div',
            title: 'My Tooltip',
            text: 'This tooltip was added in code',
            width: 100,
            dismissDelay: 20
            });&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;To register a quick tip in markup, you simply add one or more of the valid QuickTip attributes prefixed with
            the &lt;b&gt;ext:&lt;/b&gt; namespace.  The HTML element itself is automatically set as the quick tip target. Here is the summary
            of supported attributes (optional unless otherwise noted):&lt;/p&gt;
            &lt;ul&gt;&lt;li&gt;&lt;b&gt;hide&lt;/b&gt;: Specifying &quot;user&quot; is equivalent to setting autoHide = false.  Any other value will be the
            same as autoHide = true.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;qclass&lt;/b&gt;: A CSS class to be applied to the quick tip (equivalent to the 'cls' target element config).&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;qtip (required)&lt;/b&gt;: The quick tip text (equivalent to the 'text' target element config).&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;qtitle&lt;/b&gt;: The quick tip title (equivalent to the 'title' target element config).&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;qwidth&lt;/b&gt;: The quick tip width (equivalent to the 'width' target element config).&lt;/li&gt;&lt;/ul&gt;
            &lt;p&gt;Here is an example of configuring an HTML element to display a tooltip from markup:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// Add a quick tip to an HTML button
            &amp;lt;input type=&quot;button&quot; value=&quot;OK&quot; ext:qtitle=&quot;OK Button&quot; ext:qwidth=&quot;100&quot;
        ext:qtip=&quot;This is a quick tip from markup!&quot;&gt;&amp;lt;/input&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="init" scope="instance">
                <description>Initialize the global QuickTips instance and prepare any quick tips.</description>
                <parameters>
                    <parameter name="autoRender" type="Boolean" usage="required">
                        <description>True to render the QuickTips container immediately to preload images. (Defaults to true)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="enable" scope="instance">
                <description>Enable quick tips globally.</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>Disable quick tips globally.</description>
                <parameters/>
            </method>
            <method name="isEnabled" scope="instance">
                <description>Returns true if quick tips are enabled, else false.</description>
                <parameters/>
            </method>
            <method name="getQuickTip" scope="instance">
                <description>Gets the global QuickTips instance.</description>
                <parameters/>
            </method>
            <method name="register" scope="instance">
                <description>Configures a new quick tip instance and assigns it to a target element.  See
                &lt;a ext:cls=&quot;apf.QuickTip&quot; ext:member=&quot;register&quot; href=&quot;output/apf.QuickTip.html#register&quot;&gt;apf.QuickTip.register&lt;/a&gt; for details.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description>Removes any registered quick tip from the target element and destroys it.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement/Element" usage="required">
                        <description>The element from which the quick tip is to be removed.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="tips" scope="instance">
                <description>Alias of &lt;a ext:cls=&quot;apf.QuickTips&quot; ext:member=&quot;register&quot; href=&quot;output/apf.QuickTips.html#register&quot;&gt;register&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Resizable" superclass="apf.util.Observable">
        <description>&lt;p&gt;Applies drag handles to an element to make it resizable. The drag handles are inserted into the element
            and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap
            the textarea in a div and set &quot;resizeChild&quot; to true (or to the id of the element), &lt;b&gt;or&lt;/b&gt; set wrap:true in your config and
            the element will be wrapped for you automatically.&lt;/p&gt;
            &lt;p&gt;Here is the list of valid resize handles:&lt;/p&gt;
            &lt;pre&gt;Value   Description&#13;
            ------  -------------------&#13;
            'n'     north&#13;
            's'     south&#13;
            'e'     east&#13;
            'w'     west&#13;
            'nw'    northwest&#13;
            'sw'    southwest&#13;
            'se'    southeast&#13;
            'ne'    northeast&#13;
            'all'   all&lt;/pre&gt;
            &lt;p&gt;Here's an example showing the creation of a typical Resizable:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var resizer = new apf.Resizable(&quot;element-id&quot;, {
            handles: 'all',
            minWidth: 200,
            minHeight: 100,
            maxWidth: 500,
            maxHeight: 400,
            pinned: true
            });
            resizer.on(&quot;resize&quot;, myHandler);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;To hide a particular handle, set its display to none in CSS, or through script:&lt;br&gt;
        resizer.east.setDisplayed(false);&lt;/p&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new resizable component</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The id or element to resize</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="proxy" type="apf.Element." scope="instance" access="read-write">
                <description>The proxy Element that is resized in place of the real Element during the resize operation.
                    This may be queried using &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;getBox&quot; href=&quot;output/apf.Element.html#getBox&quot;&gt;apf.Element.getBox&lt;/a&gt; to provide the new area to resize to.
                Read only.</description>
            </property>
        </properties>
        <methods>
            <method name="resizeTo" scope="instance">
                <description>
                Perform a manual resize</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="resizeElement" scope="instance">
                <description>&lt;p&gt;Performs resizing of the associated Element. This method is called internally by this
                    class, and should not be called by user code.&lt;/p&gt;
                    &lt;p&gt;If a Resizable is being used to resize an Element which encapsulates a more complex UI
                    component such as a Panel, this method may be overridden by specifying an implementation
                    as a config option to provide appropriate behaviour at the end of the resize operation on
                    mouseup, for example resizing the Panel, and relaying the Panel's content.&lt;/p&gt;
                    &lt;p&gt;The new area to be resized to is available by examining the state of the &lt;a ext:cls=&quot;apf.Resizable&quot; ext:member=&quot;proxy&quot; href=&quot;output/apf.Resizable.html#proxy&quot;&gt;proxy&lt;/a&gt;
                    Element. Example:&#13;
                    &lt;pre&gt;&lt;code&gt;new apf.Panel({
                    title: 'Resize me',
                    x: 100,
                    y: 100,
                    renderTo: apf.getBody(),
                    floating: true,
                    frame: true,
                    width: 400,
                    height: 200,
                    listeners: {
                    render: function(p) {
                    new apf.Resizable(p.getEl(), {
                    handles: 'all',
                    pinned: true,
                    transparent: true,
                    resizeElement: function() {
                    var box = this.proxy.getBox();
                    p.updateBox(box);
                    if (p.layout) {
                    p.doLayout();
                    }
                    return box;
                    }
                    });
                    }
                    }
                }).show();&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="getEl" scope="instance">
                <description>Returns the element this component is bound to.</description>
                <parameters/>
            </method>
            <method name="getResizeChild" scope="instance">
                <description>Returns the resizeChild element (or null).</description>
                <parameters/>
            </method>
            <method name="destroy" scope="instance">
                <description>Destroys this resizable. If the element was wrapped and
                removeEl is not true then the element remains.</description>
                <parameters>
                    <parameter name="removeEl" type="Boolean" usage="optional">
                        <description>(optional) true to remove the element from the DOM</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Shadow" superclass="Object">
        <description>Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
            and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
        functionality that can also provide the same shadow effect, see the &lt;a ext:cls=&quot;apf.Layer&quot; href=&quot;output/apf.Layer.html&quot;&gt;apf.Layer&lt;/a&gt; class.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Shadow</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="show" scope="instance">
                <description>Displays the shadow under the target element</description>
                <parameters>
                    <parameter name="targetEl" type="Mixed" usage="required">
                        <description>The id or element under which the shadow should display</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isVisible" scope="instance">
                <description>Returns true if the shadow is visible, else false</description>
                <parameters/>
            </method>
            <method name="realign" scope="instance">
                <description>Direct alignment when values are already available. Show must be called at least once before
                calling this method to ensure it is initialized.</description>
                <parameters>
                    <parameter name="left" type="Number" usage="required">
                        <description>The target element left position</description>
                    </parameter>
                    <parameter name="top" type="Number" usage="required">
                        <description>The target element top position</description>
                    </parameter>
                    <parameter name="width" type="Number" usage="required">
                        <description>The target element width</description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description>The target element height</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hide" scope="instance">
                <description>Hides this shadow</description>
                <parameters/>
            </method>
            <method name="setZIndex" scope="instance">
                <description>Adjust the z-index of this shadow</description>
                <parameters>
                    <parameter name="zindex" type="Number" usage="required">
                        <description>The new z-index</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Slider" superclass="apf.BoxComponent">
        <description>Slider which supports vertical or horizontal orientation, keyboard adjustments,
            configurable snapping, axis clicking and animation. Can be added as an item to
            any container. Example usage:&#13;
            &lt;pre&gt;&lt;code&gt;new apf.Slider({
            renderTo: apf.getBody(),
            width: 200,
            value: 50,
            increment: 10,
            minValue: 0,
            maxValue: 100
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="dragging" type="boolean" scope="instance" access="read-write">
                <description>True while the thumb is in a drag operation</description>
            </property>
        </properties>
        <methods>
            <method name="setValue" scope="instance">
                <description>Programmatically sets the value of the Slider. Ensures that the value is constrained within
                the minValue and maxValue.</description>
                <parameters>
                    <parameter name="value" type="Number" usage="required">
                        <description>The value to set the slider to. (This will be constrained within minValue and maxValue)</description>
                    </parameter>
                    <parameter name="animate" type="Boolean" usage="required">
                        <description>Turn on or off animation, defaults to true</description>
                    </parameter>
                </parameters>
            </method>
            <method name="syncThumb" scope="instance">
                <description>Synchronizes the thumb position to the proper proportion of the total component width based
                    on the current slider &lt;a ext:cls=&quot;apf.Slider&quot; ext:member=&quot;value&quot; href=&quot;output/apf.Slider.html#value&quot;&gt;value&lt;/a&gt;.  This will be called automatically when the Slider
                    is resized by a layout, but if it is rendered auto width, this method can be called from
                another resize handler to sync the Slider if necessary.</description>
                <parameters/>
            </method>
            <method name="getValue" scope="instance">
                <description>Returns the current value of the slider</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.SplitBar" superclass="apf.util.Observable">
        <description>Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).
            &lt;br&gt;&lt;br&gt;
            Usage:
            &lt;pre&gt;&lt;code&gt;var split = new apf.SplitBar(&quot;elementToDrag&quot;, &quot;elementToSize&quot;,
            apf.SplitBar.HORIZONTAL, apf.SplitBar.LEFT);
            split.setAdapter(new apf.SplitBar.AbsoluteLayoutAdapter(&quot;container&quot;));
            split.minSize = 100;
            split.maxSize = 600;
            split.animate = true;
        split.on('moved', splitterMoved);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new SplitBar</description>
                <parameters>
                    <parameter name="dragElement" type="Mixed" usage="required">
                        <description>The element to be dragged and act as the SplitBar.</description>
                    </parameter>
                    <parameter name="resizingElement" type="Mixed" usage="required">
                        <description>The element to be resized based on where the SplitBar element is dragged</description>
                    </parameter>
                    <parameter name="orientation" type="Number" usage="optional">
                        <description>(optional) Either apf.SplitBar.HORIZONTAL or apf.SplitBar.VERTICAL. (Defaults to HORIZONTAL)</description>
                    </parameter>
                    <parameter name="placement" type="Number" usage="optional">
                        <description>(optional) Either apf.SplitBar.LEFT or apf.SplitBar.RIGHT for horizontal or &#13;
                            apf.SplitBar.TOP or apf.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial&#13;
                        position of the SplitBar).</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="minSize" type="Number" scope="instance" access="read-write">
                <description>The minimum size of the resizing element. (Defaults to 0)</description>
            </property>
            <property name="maxSize" type="Number" scope="instance" access="read-write">
                <description>The maximum size of the resizing element. (Defaults to 2000)</description>
            </property>
            <property name="animate" type="Boolean" scope="instance" access="read-write">
                <description>Whether to animate the transition to the new size</description>
            </property>
            <property name="useShim" type="Boolean" scope="instance" access="read-write">
                <description>Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes.</description>
            </property>
        </properties>
        <methods>
            <method name="getAdapter" scope="instance">
                <description>Get the adapter this SplitBar uses</description>
                <parameters/>
            </method>
            <method name="setAdapter" scope="instance">
                <description>Set the adapter this SplitBar uses</description>
                <parameters>
                    <parameter name="adapter" type="Object" usage="required">
                        <description>A SplitBar adapter object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getMinimumSize" scope="instance">
                <description>Gets the minimum size for the resizing element</description>
                <parameters/>
            </method>
            <method name="setMinimumSize" scope="instance">
                <description>Sets the minimum size for the resizing element</description>
                <parameters>
                    <parameter name="minSize" type="Number" usage="required">
                        <description>The minimum size</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getMaximumSize" scope="instance">
                <description>Gets the maximum size for the resizing element</description>
                <parameters/>
            </method>
            <method name="setMaximumSize" scope="instance">
                <description>Sets the maximum size for the resizing element</description>
                <parameters>
                    <parameter name="maxSize" type="Number" usage="required">
                        <description>The maximum size</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setCurrentSize" scope="instance">
                <description>Sets the initialize size for the resizing element</description>
                <parameters>
                    <parameter name="size" type="Number" usage="required">
                        <description>The initial size</description>
                    </parameter>
                </parameters>
            </method>
            <method name="destroy" scope="instance">
                <description>Destroy this splitbar.</description>
                <parameters>
                    <parameter name="removeEl" type="Boolean" usage="required">
                        <description>True to remove the element</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.SplitBar.AbsoluteLayoutAdapter" superclass="apf.SplitBar.BasicLayoutAdapter">
        <description>Adapter that  moves the splitter element to align with the resized sizing element.
        Used with an absolute positioned SplitBar.</description>
        <properties>
            <property name="SplitBar.AbsoluteLayoutAdapter.VERTICAL" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Orientation constant - Create a vertical SplitBar</description>
            </property>
            <property name="SplitBar.AbsoluteLayoutAdapter.HORIZONTAL" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Orientation constant - Create a horizontal SplitBar</description>
            </property>
            <property name="SplitBar.AbsoluteLayoutAdapter.LEFT" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Placement constant - The resizing element is to the left of the splitter element</description>
            </property>
            <property name="SplitBar.AbsoluteLayoutAdapter.RIGHT" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Placement constant - The resizing element is to the right of the splitter element</description>
            </property>
            <property name="SplitBar.AbsoluteLayoutAdapter.TOP" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Placement constant - The resizing element is positioned above the splitter element</description>
            </property>
            <property name="SplitBar.AbsoluteLayoutAdapter.BOTTOM" type="Number" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Placement constant - The resizing element is positioned under splitter element</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.SplitBar.BasicLayoutAdapter" superclass="Object">
        <description>Default Adapter. It assumes the splitter and resizing element are not positioned
        elements and only gets/sets the width of the element. Generally used for table based layouts.</description>
        <properties/>
        <methods>
            <method name="getElementSize" scope="instance">
                <description>Called before drag operations to get the current size of the resizing element.</description>
                <parameters>
                    <parameter name="s" type="apf.SplitBar" usage="required">
                        <description>The SplitBar using this adapter</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setElementSize" scope="instance">
                <description>Called after drag operations to set the size of the resizing element.</description>
                <parameters>
                    <parameter name="s" type="apf.SplitBar" usage="required">
                        <description>The SplitBar using this adapter</description>
                    </parameter>
                    <parameter name="newSize" type="Number" usage="required">
                        <description>The new size to set</description>
                    </parameter>
                    <parameter name="onComplete" type="Function" usage="required">
                        <description>A function to be invoked when resizing is complete</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.SplitButton" superclass="apf.Button">
        <description>A split button that provides a built-in dropdown arrow that can fire an event separately from the default
            click event of the button.  Typically this would be used to display a dropdown menu that provides additional
            options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:
            &lt;pre&gt;&lt;code&gt;// display a dropdown menu:
            new apf.SplitButton({
            renderTo: 'button-ct', // the container id
            text: 'Options',
            handler: optionsHandler, // handle a click on the button itself
            menu: new apf.menu.Menu({
            items: [
            // these items will render as dropdown menu items when the arrow is clicked:
            {text: 'Item 1', handler: item1Handler},
            {text: 'Item 2', handler: item2Handler}
            ]
            })
            });

            // Instead of showing a menu, you provide any type of custom
            // functionality you want when the dropdown arrow is clicked:
            new apf.SplitButton({
            renderTo: 'button-ct',
            text: 'Options',
            handler: optionsHandler,
            arrowHandler: myCustomHandler
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new menu button</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setArrowHandler" scope="instance">
                <description>Sets this button's arrow click handler.</description>
                <parameters>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The function to call when the arrow is clicked</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) Scope for the function passed above</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.StatusBar" superclass="apf.Toolbar">
        <description>&lt;p&gt;Basic status bar component that can be used as the bottom toolbar of any &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;apf.Panel&lt;/a&gt;.  In addition to
            supporting the standard &lt;a ext:cls=&quot;apf.Toolbar&quot; href=&quot;output/apf.Toolbar.html&quot;&gt;apf.Toolbar&lt;/a&gt; interface for adding buttons, menus and other items, the StatusBar
            provides a greedy status element that can be aligned to either side and has convenient methods for setting the
            status text and icon.  You can also indicate that something is processing using the &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;showBusy&quot; href=&quot;output/apf.StatusBar.html#showBusy&quot;&gt;showBusy&lt;/a&gt; method.&lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Although StatusBar supports xtype:'statusbar', at this time apf.Toolbar (the base class) does
            not support xtype.  For this reason, if you are adding Toolbar items into the StatusBar you must declare it
            using the &quot;new StatusBar()&quot; syntax for the items to render correctly.&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            title: 'StatusBar',
            // etc.
            bbar: new apf.StatusBar({
            id: 'my-status',

            // defaults to use when the status is cleared:
            defaultText: 'Default status text',
            defaultIconCls: 'default-icon',

            // values to set initially:
            text: 'Ready',
            iconCls: 'ready-icon',

            // any standard Toolbar items:
            items: [{
            text: 'A Button'
            }, '-', 'Plain Text']
            })
            });

            // Update the status bar later in code:
            var sb = apf.getCmp('my-status');
            sb.setStatus({
            text: 'OK',
            iconCls: 'ok-icon',
            clear: true // auto-clear after a set interval
            });

            // Set the status bar to show that something is processing:
            sb.showBusy();

            // processing....

        sb.clearStatus(); // once completeed&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new StatusBar</description>
                <parameters>
                    <parameter name="config" type="Object/Array" usage="required">
                        <description>A config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setStatus" scope="instance">
                <description>Sets the status &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;text&quot; href=&quot;output/apf.StatusBar.html#text&quot;&gt;text&lt;/a&gt; and/or &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;iconCls&quot; href=&quot;output/apf.StatusBar.html#iconCls&quot;&gt;iconCls&lt;/a&gt;. Also supports automatically clearing the
                status that was set after a specified interval.</description>
                <parameters>
                    <parameter name="config" type="Object/String" usage="optional">
                        <description>A config object specifying what status to set, or a string assumed
                            to be the status text (and all other options are defaulted as explained below). A config
                            object containing any or all of the following properties can be passed:&lt;ul&gt;
                            &lt;li&gt;&lt;tt&gt;text&lt;/tt&gt; {String} : (optional) The status text to display. If not specified, any current
                            status text will remain unchanged.&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;iconCls&lt;/tt&gt; {String} : (optional) The CSS class used to customize the status icon (see
                            &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;iconCls&quot; href=&quot;output/apf.StatusBar.html#iconCls&quot;&gt;iconCls&lt;/a&gt; for details). If not specified, any current iconCls will remain unchanged.&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;clear&lt;/tt&gt; {Boolean/Number/Object} : (optional) Allows you to set an internal callback that will
                            automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not
                            specified, the new status will not be auto-cleared and will stay until updated again or cleared using
                            &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;clearStatus&quot; href=&quot;output/apf.StatusBar.html#clearStatus&quot;&gt;clearStatus&lt;/a&gt;. If &lt;tt&gt;true&lt;/tt&gt; is passed, the status will be cleared using &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;autoClear&quot; href=&quot;output/apf.StatusBar.html#autoClear&quot;&gt;autoClear&lt;/a&gt;,
                            &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;defaultText&quot; href=&quot;output/apf.StatusBar.html#defaultText&quot;&gt;defaultText&lt;/a&gt; and &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;defaultIconCls&quot; href=&quot;output/apf.StatusBar.html#defaultIconCls&quot;&gt;defaultIconCls&lt;/a&gt; via a fade out animation. If a numeric value is passed,
                            it will be used as the callback interval (in milliseconds), overriding the &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;autoClear&quot; href=&quot;output/apf.StatusBar.html#autoClear&quot;&gt;autoClear&lt;/a&gt; value.
                            All other options will be defaulted as with the boolean option. To customize any other options,
                            you can pass an object in the format:&lt;ul&gt;
                            &lt;li&gt;&lt;tt&gt;wait&lt;/tt&gt; {Number} : (optional) The number of milliseconds to wait before clearing
                            (defaults to &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;autoClear&quot; href=&quot;output/apf.StatusBar.html#autoClear&quot;&gt;autoClear&lt;/a&gt;).&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;anim&lt;/tt&gt; {Number} : (optional) False to clear the status immediately once the callback
                            executes (defaults to true which fades the status out).&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;useDefaults&lt;/tt&gt; {Number} : (optional) False to completely clear the status text and iconCls
                            (defaults to true which uses &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;defaultText&quot; href=&quot;output/apf.StatusBar.html#defaultText&quot;&gt;defaultText&lt;/a&gt; and &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;defaultIconCls&quot; href=&quot;output/apf.StatusBar.html#defaultIconCls&quot;&gt;defaultIconCls&lt;/a&gt;).&lt;/li&gt;
                            &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
                            Example usage:&lt;pre&gt;&lt;code&gt;// Simple call to update the text
                            statusBar.setStatus('New status');

                            // Set the status and icon, auto-clearing with default options:
                            statusBar.setStatus({
                            text: 'New status',
                            iconCls: 'x-status-custom',
                            clear: true
                            });

                            // Auto-clear with custom options:
                            statusBar.setStatus({
                            text: 'New status',
                            iconCls: 'x-status-custom',
                            clear: {
                            wait: 8000,
                            anim: false,
                            useDefaults: false
                            }
                        });&lt;/code&gt;&lt;/pre&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearStatus" scope="instance">
                <description>Clears the status &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;text&quot; href=&quot;output/apf.StatusBar.html#text&quot;&gt;text&lt;/a&gt; and &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;iconCls&quot; href=&quot;output/apf.StatusBar.html#iconCls&quot;&gt;iconCls&lt;/a&gt;. Also supports clearing via an optional fade out animation.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="optional">
                        <description>(optional) A config object containing any or all of the following properties. If this
                            object is not specified the status will be cleared using the defaults below:&lt;ul&gt;
                            &lt;li&gt;&lt;tt&gt;anim&lt;/tt&gt; {Boolean} : (optional) True to clear the status by fading out the status element (defaults
                            to false which clears immediately).&lt;/li&gt;
                            &lt;li&gt;&lt;tt&gt;useDefaults&lt;/tt&gt; {Boolean} : (optional) True to reset the text and icon using &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;defaultText&quot; href=&quot;output/apf.StatusBar.html#defaultText&quot;&gt;defaultText&lt;/a&gt; and
                            &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;defaultIconCls&quot; href=&quot;output/apf.StatusBar.html#defaultIconCls&quot;&gt;defaultIconCls&lt;/a&gt; (defaults to false which sets the text to '' and removes any existing icon class).&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setText" scope="instance">
                <description>Convenience method for setting the status text directly.  For more flexible options see &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;setStatus&quot; href=&quot;output/apf.StatusBar.html#setStatus&quot;&gt;setStatus&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="text" type="String" usage="optional">
                        <description>(optional) The text to set (defaults to '')</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getText" scope="instance">
                <description>Returns the current status text.</description>
                <parameters/>
            </method>
            <method name="setIcon" scope="instance">
                <description>Convenience method for setting the status icon directly.  For more flexible options see &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;setStatus&quot; href=&quot;output/apf.StatusBar.html#setStatus&quot;&gt;setStatus&lt;/a&gt;.
                See &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;iconCls&quot; href=&quot;output/apf.StatusBar.html#iconCls&quot;&gt;iconCls&lt;/a&gt; for complete details about customizing the icon.</description>
                <parameters>
                    <parameter name="iconCls" type="String" usage="optional">
                        <description>(optional) The icon class to set (defaults to '', and any current icon class is removed)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="showBusy" scope="instance">
                <description>Convenience method for setting the status text and icon to special values that are pre-configured to indicate
                a &quot;busy&quot; state, usually for loading or processing activities.</description>
                <parameters>
                    <parameter name="config" type="Object/String" usage="optional">
                        <description>(optional) A config object in the same format supported by &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;setStatus&quot; href=&quot;output/apf.StatusBar.html#setStatus&quot;&gt;setStatus&lt;/a&gt;, or a
                            string to use as the status text (in which case all other options for setStatus will be defaulted). Use the
                            &lt;tt&gt;text&lt;/tt&gt; and/or &lt;tt&gt;iconCls&lt;/tt&gt; properties on the config to override the default &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;busyText&quot; href=&quot;output/apf.StatusBar.html#busyText&quot;&gt;busyText&lt;/a&gt;
                            and &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;busyIconCls&quot; href=&quot;output/apf.StatusBar.html#busyIconCls&quot;&gt;busyIconCls&lt;/a&gt; settings. If the config argument is not specified, &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;busyText&quot; href=&quot;output/apf.StatusBar.html#busyText&quot;&gt;busyText&lt;/a&gt; and
                        &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;busyIconCls&quot; href=&quot;output/apf.StatusBar.html#busyIconCls&quot;&gt;busyIconCls&lt;/a&gt; will be used in conjunction with all of the default options for &lt;a ext:cls=&quot;apf.StatusBar&quot; ext:member=&quot;setStatus&quot; href=&quot;output/apf.StatusBar.html#setStatus&quot;&gt;setStatus&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.StoreMgr" superclass="apf.util.MixedCollection">
        <description>The default global group of stores.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="register" scope="instance">
                <description>
                    Registers one or more Stores with the StoreMgr. You do not normally need to register stores
                manually.  Any store initialized with a &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;storeId&quot; href=&quot;output/apf.data.Store.html#storeId&quot;&gt;apf.data.Store.storeId&lt;/a&gt; will be auto-registered.</description>
                <parameters>
                    <parameter name="store1" type="apf.data.Store" usage="required">
                        <description>A Store instance</description>
                    </parameter>
                    <parameter name="store2" type="apf.data.Store" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                    <parameter name="etc..." type="apf.data.Store" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description>Unregisters one or more Stores with the StoreMgr</description>
                <parameters>
                    <parameter name="id1" type="String/Object" usage="required">
                        <description>The id of the Store, or a Store instance</description>
                    </parameter>
                    <parameter name="id2" type="String/Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                    <parameter name="etc..." type="String/Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="lookup" scope="instance">
                <description>Gets a registered Store by id</description>
                <parameters>
                    <parameter name="id" type="String/Object" usage="required">
                        <description>The id of the Store, or a Store instance</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.TabPanel" superclass="apf.Panel">
        <description>&lt;p&gt;A basic tab container. TabPanels can be used exactly like a standard &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;apf.Panel&lt;/a&gt; for layout
            purposes, but also have special support for containing child Components that are managed using a CardLayout
            layout manager, and displayed as seperate tabs.&lt;/p&gt;
            &lt;p&gt;There is no actual tab class &amp;mdash; each tab is simply an &lt;a ext:cls=&quot;apf.BoxComponent&quot; href=&quot;output/apf.BoxComponent.html&quot;&gt;Component&lt;/a&gt; such
            as a &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;Panel&lt;/a&gt;. However, when rendered in a TabPanel, each child Component can fire
            additional events that only exist for tabs and are not available from other Component. These are:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;activate&lt;/b&gt;: Fires when this Component becomes the active tab.
            &lt;div class=&quot;mdetail-params&quot;&gt;
            &lt;strong style=&quot;font-weight: normal;&quot;&gt;Listeners will be called with the following arguments:&lt;/strong&gt;
            &lt;ul&gt;&lt;li&gt;&lt;code&gt;tab&lt;/code&gt; : Panel&lt;div class=&quot;sub-desc&quot;&gt;The tab that was activated&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;
            &lt;/div&gt;&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;deactivate&lt;/b&gt;: Fires when the Component that was the active tab becomes deactivated.
            &lt;div class=&quot;mdetail-params&quot;&gt;
            &lt;strong style=&quot;font-weight: normal;&quot;&gt;Listeners will be called with the following arguments:&lt;/strong&gt;
            &lt;ul&gt;&lt;li&gt;&lt;code&gt;tab&lt;/code&gt; : Panel&lt;div class=&quot;sub-desc&quot;&gt;The tab that was deactivated&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;
            &lt;/div&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;To add Components to a TabPanel which are generated dynamically on the server, it is necessary to
            create a server script to generate the Javascript to create the Component required.&lt;/p&gt;
            For example, to add a GridPanel to a TabPanel where the GridPanel is generated by the server
            based on certain parameters, you would need to execute an Ajax request to invoke your the script,
            and process the response object to add it to the TabPanel:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;apf.Ajax.request({
            url: 'gen-invoice-grid.php',
            params: {
            startDate = apf.getCmp('start-date').getValue(),
            endDate = apf.getCmp('end-date').getValue()
            },
            success: function(xhr) {
            var newComponent = eval(xhr.responseText);
            myTabPanel.add(newComponent);
            myTabPanel.setActiveTab(newComponent);
            },
            failure: function() {
            apf.Msg.alert(&quot;Grid create failed&quot;, &quot;Server communication failure&quot;);
            }
            });&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;The server script would need to return an executable Javascript statement which, when processed
            using &lt;tt&gt;eval()&lt;/tt&gt; will return either a config object with an &lt;a ext:cls=&quot;apf.Component&quot; ext:member=&quot;xtype&quot; href=&quot;output/apf.Component.html#xtype&quot;&gt;xtype&lt;/a&gt;,
            or an instantiated Component. For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{function() {
            function formatDate(value){
            return value ? value.dateFormat('M d, Y') : '';
            };

            var store = new apf.data.Store({
            url: 'get-invoice-data.php',
            baseParams: {
            startDate: '01/01/2008',
            endDate: '01/31/2008'
            }
            reader: new apf.data.JsonReader({
            record: 'transaction',
            id: 'id',
            totalRecords: 'total'
            }, [
            'customer',
            'invNo',
            {name: 'date', type: 'date', dateFormat: 'm/d/Y'},
            {name: 'value', type: 'float'}
            ])
            });

            var grid = new apf.grid.GridPanel({
            title: 'Invoice Report',
            bbar: new apf.PagingToolbar(store),
            store: store,
            columns: [
            {header: &quot;Customer&quot;, width: 250, dataIndex: 'customer', sortable: true},
            {header: &quot;Invoice Number&quot;, width: 120, dataIndex: 'invNo', sortable: true},
            {header: &quot;Invoice Date&quot;, width: 100, dataIndex: 'date', renderer: formatDate, sortable: true},
            {header: &quot;Value&quot;, width: 120, dataIndex: 'value', renderer: 'usMoney', sortable: true}
            ],
            });
            store.load();
            return grid;
            })();&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;Since that code is &lt;i&gt;generated&lt;/i&gt; by a server script, the &lt;tt&gt;baseParams&lt;/tt&gt; for the Store
            can be configured into the Store. The metadata to allow generation of the Record layout, and the
            ColumnModel is also known on the server, so these can be generated into the code.&lt;/p&gt;
            &lt;p&gt;When that code fragment is passed through the &lt;tt&gt;eval&lt;/tt&gt; function in the success handler
            of the Ajax request, the code is executed by the Javascript processor, and the anonymous function
            runs, and returns the grid.&lt;/p&gt;
            &lt;p&gt;There are several other methods available for creating TabPanels. The output of the following
            examples should produce exactly the same appearance. The tabs can be created and rendered completely
            in code, as in this example:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tabs = new apf.TabPanel({
            renderTo: apf.getBody(),
            activeTab: 0,
            items: [{
            title: 'Tab 1',
            html: 'A simple tab'
            },{
            title: 'Tab 2',
            html: 'Another one'
            }]
            });&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;TabPanels can also be rendered from pre-existing markup in a couple of ways.  See the &lt;a ext:cls=&quot;apf.TabPanel&quot; ext:member=&quot;autoTabs&quot; href=&quot;output/apf.TabPanel.html#autoTabs&quot;&gt;autoTabs&lt;/a&gt; example for
            rendering entirely from markup that is already structured correctly as a TabPanel (a container div with
            one or more nested tab divs with class 'x-tab'). You can also render from markup that is not strictly
            structured by simply specifying by id which elements should be the container and the tabs. Using this method,
            tab content can be pulled from different elements within the page by id regardless of page structure.  Note
            that the tab divs in this example contain the class 'x-hide-display' so that they can be rendered deferred
            without displaying outside the tabs. You could alternately set &lt;a ext:cls=&quot;apf.TabPanel&quot; ext:member=&quot;deferredRender&quot; href=&quot;output/apf.TabPanel.html#deferredRender&quot;&gt;deferredRender&lt;/a&gt; to false to render all
            content tabs on page load. For example:
            &lt;pre&gt;&lt;code&gt;var tabs = new apf.TabPanel({
            renderTo: 'my-tabs',
            activeTab: 0,
            items:[
            {contentEl:'tab1', title:'Tab 1'},
            {contentEl:'tab2', title:'Tab 2'}
            ]
            });

            // Note that the tabs do not have to be nested within the container (although they can be)
            &amp;lt;div id=&quot;my-tabs&quot;&gt;&amp;lt;/div&gt;
            &amp;lt;div id=&quot;tab1&quot; class=&quot;x-hide-display&quot;&gt;A simple tab&amp;lt;/div&gt;
        &amp;lt;div id=&quot;tab2&quot; class=&quot;x-hide-display&quot;&gt;Another one&amp;lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="header" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
            <property name="title" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
        </properties>
        <methods>
            <method name="readTabs" scope="instance">
                <description>True to scan the markup in this tab panel for autoTabs using the autoTabSelector</description>
                <parameters>
                    <parameter name="removeExisting" type="Boolean" usage="required">
                        <description>True to remove existing tabs</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTabEl" scope="instance">
                <description>Gets the DOM element for tab strip item which activates the
                    child panel with the specified ID. Access this to change the visual treatment of the
                item, for example by changing the CSS class name.</description>
                <parameters>
                    <parameter name="tab" type="Panel" usage="required">
                        <description>The tab</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beginUpdate" scope="instance">
                <description>Suspends any internal calculations or scrolling while doing a bulk operation. See &lt;a ext:cls=&quot;apf.TabPanel&quot; ext:member=&quot;endUpdate&quot; href=&quot;output/apf.TabPanel.html#endUpdate&quot;&gt;endUpdate&lt;/a&gt;</description>
                <parameters/>
            </method>
            <method name="endUpdate" scope="instance">
                <description>Resumes calculations and scrolling at the end of a bulk operation. See &lt;a ext:cls=&quot;apf.TabPanel&quot; ext:member=&quot;beginUpdate&quot; href=&quot;output/apf.TabPanel.html#beginUpdate&quot;&gt;beginUpdate&lt;/a&gt;</description>
                <parameters/>
            </method>
            <method name="hideTabStripItem" scope="instance">
                <description>Hides the tab strip item for the passed tab</description>
                <parameters>
                    <parameter name="item" type="Number/String/Panel" usage="required">
                        <description>The tab index, id or item</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unhideTabStripItem" scope="instance">
                <description>Unhides the tab strip item for the passed tab</description>
                <parameters>
                    <parameter name="item" type="Number/String/Panel" usage="required">
                        <description>The tab index, id or item</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setActiveTab" scope="instance">
                <description>Sets the specified tab as the active tab. This method fires the &lt;a ext:cls=&quot;apf.TabPanel&quot; ext:member=&quot;beforetabchange&quot; href=&quot;output/apf.TabPanel.html#beforetabchange&quot;&gt;beforetabchange&lt;/a&gt; event which
                can return false to cancel the tab change.</description>
                <parameters>
                    <parameter name="tab" type="String/Panel" usage="required">
                        <description>The id or tab Panel to activate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getActiveTab" scope="instance">
                <description>Gets the currently active tab.</description>
                <parameters/>
            </method>
            <method name="getItem" scope="instance">
                <description>Gets the specified tab by id.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The tab id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="scrollToTab" scope="instance">
                <description>Scrolls to a particular tab if tab scrolling is enabled</description>
                <parameters>
                    <parameter name="item" type="Panel" usage="required">
                        <description>The item to scroll to</description>
                    </parameter>
                    <parameter name="animate" type="Boolean" usage="required">
                        <description>True to enable animations</description>
                    </parameter>
                </parameters>
            </method>
            <method name="activate" scope="instance">
                <description>Sets the specified tab as the active tab. This method fires the &lt;a ext:cls=&quot;apf.TabPanel&quot; ext:member=&quot;beforetabchange&quot; href=&quot;output/apf.TabPanel.html#beforetabchange&quot;&gt;beforetabchange&lt;/a&gt; event which
                can return false to cancel the tab change.</description>
                <parameters>
                    <parameter name="tab" type="String/Panel" usage="required">
                        <description>The id or tab Panel to activate</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.TaskMgr" superclass="Object">
        <description>A static &lt;a ext:cls=&quot;apf.util.TaskRunner&quot; href=&quot;output/apf.util.TaskRunner.html&quot;&gt;apf.util.TaskRunner&lt;/a&gt; instance that can be used to start and stop arbitrary tasks.  See
            &lt;a ext:cls=&quot;apf.util.TaskRunner&quot; href=&quot;output/apf.util.TaskRunner.html&quot;&gt;apf.util.TaskRunner&lt;/a&gt; for supported methods and task config properties.
            &lt;pre&gt;&lt;code&gt;// Start a simple clock task that updates a div once per second
            var task = {
            run: function(){
            apf.fly('clock').update(new Date().format('g:i:s A'));
            },
            interval: 1000 //1 second
            }
        apf.TaskMgr.start(task);&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Template" superclass="Object">
        <description>Represents an HTML fragment template. Templates can be precompiled for greater performance.
            For a list of available format functions, see &lt;a ext:cls=&quot;apf.util.Format&quot; href=&quot;output/apf.util.Format.html&quot;&gt;apf.util.Format&lt;/a&gt;.&lt;br /&gt;
            Usage:
            &lt;pre&gt;&lt;code&gt;var t = new apf.Template(
            '&amp;lt;div name=&quot;{id}&quot;&amp;gt;',
            '&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name:trim} {value:ellipsis(10)}&amp;lt;/span&amp;gt;',
            '&amp;lt;/div&amp;gt;'
            );
            t.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});&lt;/code&gt;&lt;/pre&gt;
        For more information see this blog post with examples: &lt;a href=&quot;http://www.jackslocum.com/blog/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/&quot;&gt;DomHelper - Create Elements using DOM, HTML fragments and Templates&lt;/a&gt;.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="html" type="String/Array" usage="required">
                        <description>The HTML fragment or an array of fragments to join(&quot;&quot;) or multiple arguments to join(&quot;&quot;)</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="disableFormats" type="Boolean" scope="instance" access="read-write">
                <description>True to disable format functions (defaults to false)</description>
            </property>
            <property name="re" type="RegExp" scope="instance" access="read-write">
                <description>The regular expression used to match template variables</description>
            </property>
        </properties>
        <methods>
            <method name="applyTemplate" scope="instance">
                <description>Returns an HTML fragment of this template with the specified values applied.</description>
                <parameters>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                </parameters>
            </method>
            <method name="set" scope="instance">
                <description>Sets the HTML used as the template and optionally compiles it.</description>
                <parameters>
                    <parameter name="html" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="compile" type="Boolean" usage="optional">
                        <description>(optional) True to compile the template (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="compile" scope="instance">
                <description>Compiles the template into an internal function, eliminating the RegEx overhead.</description>
                <parameters/>
            </method>
            <method name="insertFirst" scope="instance">
                <description>Applies the supplied values to the template and inserts the new node(s) as the first child of el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertBefore" scope="instance">
                <description>Applies the supplied values to the template and inserts the new node(s) before el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertAfter" scope="instance">
                <description>Applies the supplied values to the template and inserts the new node(s) after el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="append" scope="instance">
                <description>Applies the supplied values to the template and appends the new node(s) to el.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="overwrite" scope="instance">
                <description>Applies the supplied values to the template and overwrites the content of el with the new node(s).</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The context element</description>
                    </parameter>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                    <parameter name="returnElement" type="Boolean" usage="optional">
                        <description>(optional) true to return a apf.Element (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="Template.from" scope="static">
                <description>&amp;lt;static&amp;gt; Creates a template from the passed element's value (&lt;i&gt;display:none&lt;/i&gt; textarea, preferred) or innerHTML.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>A DOM element or its id</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>A configuration object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="apply" scope="instance">
                <description>Alias for &lt;a ext:cls=&quot;apf.Template&quot; ext:member=&quot;applyTemplate&quot; href=&quot;output/apf.Template.html#applyTemplate&quot;&gt;applyTemplate&lt;/a&gt;
                Returns an HTML fragment of this template with the specified values applied.</description>
                <parameters>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Tip" superclass="apf.Panel">
        <description>This is the base class for &lt;a ext:cls=&quot;apf.QuickTip&quot; href=&quot;output/apf.QuickTip.html&quot;&gt;apf.QuickTip&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Tooltip&quot; href=&quot;output/apf.Tooltip.html&quot;&gt;apf.Tooltip&lt;/a&gt; that provides the basic layout and
            positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned
        tips that are displayed programmatically, or it can be extended to provide custom tip implementations.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Tip</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="showAt" scope="instance">
                <description>Shows this tip at the specified XY position.  Example usage:
                    &lt;pre&gt;&lt;code&gt;// Show the tip at x:50 and y:100
                tip.showAt([50,100]);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="xy" type="Array" usage="required">
                        <description>An array containing the x and y coordinates</description>
                    </parameter>
                </parameters>
            </method>
            <method name="showBy" scope="instance">
                <description>&lt;b&gt;Experimental&lt;/b&gt;. Shows this tip at a position relative to another element using a standard &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;apf.Element.alignTo&lt;/a&gt;
                    anchor position value.  Example usage:
                    &lt;pre&gt;&lt;code&gt;// Show the tip at the default position ('tl-br?')
                    tip.showBy('my-el');

                    // Show the tip's top-left corner anchored to the element's top-right corner
                tip.showBy('my-el', 'tl-tr');&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>An HTMLElement, apf.Element or string id of the target element to align to</description>
                    </parameter>
                    <parameter name="position" type="String" usage="optional">
                        <description>(optional) A valid &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;apf.Element.alignTo&lt;/a&gt; anchor position (defaults to 'tl-br?' or
                        &lt;a ext:cls=&quot;apf.Tip&quot; ext:member=&quot;defaultAlign&quot; href=&quot;output/apf.Tip.html#defaultAlign&quot;&gt;defaultAlign&lt;/a&gt; if specified).</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.ToolTip" superclass="apf.Tip">
        <description>A standard tooltip implementation for providing additional information when hovering over a target element.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Tooltip</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="hide" scope="instance">
                <description>Hides this tooltip if visible.</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Shows this tooltip at the current event target XY position.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.Toolbar" superclass="apf.BoxComponent">
        <description>Basic Toolbar class. Toolbar elements can be created explicitly via their constructors, or implicitly
        via their xtypes.  Some items also have shortcut strings for creation.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Toolbar</description>
                <parameters>
                    <parameter name="config" type="Object/Array" usage="required">
                        <description>A config object or an array of buttons to add</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="items" type="apf.util.MixedCollection" scope="instance" access="read-write">
                <description>A MixedCollection of this Toolbar's items</description>
            </property>
        </properties>
        <methods>
            <method name="add" scope="instance">
                <description>Adds element(s) to the toolbar -- this function takes a variable number of
                arguments of mixed type and adds them to the toolbar.</description>
                <parameters>
                    <parameter name="arg1" type="Mixed" usage="required">
                        <description>The following types of arguments are all valid:&lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a ext:cls=&quot;apf.Toolbar.Button&quot; href=&quot;output/apf.Toolbar.Button.html&quot;&gt;apf.Toolbar.Button&lt;/a&gt; config: A valid button config object (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addButton&quot; href=&quot;output/apf.Toolbar.html#addButton&quot;&gt;addButton&lt;/a&gt;)&lt;/li&gt;
                            &lt;li&gt;HtmlElement: Any standard HTML element (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addElement&quot; href=&quot;output/apf.Toolbar.html#addElement&quot;&gt;addElement&lt;/a&gt;)&lt;/li&gt;
                            &lt;li&gt;Field: Any form field (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addField&quot; href=&quot;output/apf.Toolbar.html#addField&quot;&gt;addField&lt;/a&gt;)&lt;/li&gt;
                            &lt;li&gt;Item: Any subclass of &lt;a ext:cls=&quot;apf.Toolbar.Item&quot; href=&quot;output/apf.Toolbar.Item.html&quot;&gt;apf.Toolbar.Item&lt;/a&gt; (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addItem&quot; href=&quot;output/apf.Toolbar.html#addItem&quot;&gt;addItem&lt;/a&gt;)&lt;/li&gt;
                            &lt;li&gt;String: Any generic string (gets wrapped in a &lt;a ext:cls=&quot;apf.Toolbar.TextItem&quot; href=&quot;output/apf.Toolbar.TextItem.html&quot;&gt;apf.Toolbar.TextItem&lt;/a&gt;, equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addText&quot; href=&quot;output/apf.Toolbar.html#addText&quot;&gt;addText&lt;/a&gt;).
                            Note that there are a few special strings that are treated differently as explained next.&lt;/li&gt;
                            &lt;li&gt;'separator' or '-': Creates a separator element (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addSeparator&quot; href=&quot;output/apf.Toolbar.html#addSeparator&quot;&gt;addSeparator&lt;/a&gt;)&lt;/li&gt;
                            &lt;li&gt;' ': Creates a spacer element (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addSpacer&quot; href=&quot;output/apf.Toolbar.html#addSpacer&quot;&gt;addSpacer&lt;/a&gt;)&lt;/li&gt;
                            &lt;li&gt;'-&gt;': Creates a fill element (equivalent to &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addFill&quot; href=&quot;output/apf.Toolbar.html#addFill&quot;&gt;addFill&lt;/a&gt;)&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="arg2" type="Mixed" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="etc." type="Mixed" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="addSeparator" scope="instance">
                <description>Adds a separator</description>
                <parameters/>
            </method>
            <method name="addSpacer" scope="instance">
                <description>Adds a spacer element</description>
                <parameters/>
            </method>
            <method name="addFill" scope="instance">
                <description>Adds a fill element that forces subsequent additions to the right side of the toolbar</description>
                <parameters/>
            </method>
            <method name="addElement" scope="instance">
                <description>Adds any standard HTML element to the toolbar</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element or id of the element to add</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addItem" scope="instance">
                <description>Adds any Toolbar.Item or subclass</description>
                <parameters>
                    <parameter name="item" type="apf.Toolbar.Item" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="addButton" scope="instance">
                <description>Adds a button (or buttons). See &lt;a ext:cls=&quot;apf.Toolbar.Button&quot; href=&quot;output/apf.Toolbar.Button.html&quot;&gt;apf.Toolbar.Button&lt;/a&gt; for more info on the config.</description>
                <parameters>
                    <parameter name="config" type="Object/Array" usage="required">
                        <description>A button config or array of configs</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addText" scope="instance">
                <description>Adds text to the toolbar</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to add</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertButton" scope="instance">
                <description>Inserts any &lt;a ext:cls=&quot;apf.Toolbar.Item&quot; href=&quot;output/apf.Toolbar.Item.html&quot;&gt;apf.Toolbar.Item&lt;/a&gt;/&lt;a ext:cls=&quot;apf.Toolbar.Button&quot; href=&quot;output/apf.Toolbar.Button.html&quot;&gt;apf.Toolbar.Button&lt;/a&gt; at the specified index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index where the item is to be inserted</description>
                    </parameter>
                    <parameter name="item" type="Object/apf.Toolbar.Item/apf.Toolbar.Button/Array" usage="required">
                        <description>The button, or button config object to be
                        inserted, or an array of buttons/configs.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addDom" scope="instance">
                <description>Adds a new element to the toolbar from the passed &lt;a ext:cls=&quot;apf.DomHelper&quot; href=&quot;output/apf.DomHelper.html&quot;&gt;apf.DomHelper&lt;/a&gt; config</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="addField" scope="instance">
                <description>Adds a dynamically rendered apf.form field (TextField, ComboBox, etc). Note: the field should not have
                been rendered yet. For a field that has already been rendered, use &lt;a ext:cls=&quot;apf.Toolbar&quot; ext:member=&quot;addElement&quot; href=&quot;output/apf.Toolbar.html#addElement&quot;&gt;addElement&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="field" type="apf.form.Field" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Toolbar.Button" superclass="apf.Button">
        <description>A button that renders into a toolbar. Use the &lt;tt&gt;handler&lt;/tt&gt; config to specify a callback function
            to handle the button's click event.
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            tbar : [
            {text: 'OK', handler: okHandler} // tbbutton is the default xtype if not specified
            ]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Button</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A standard &lt;a ext:cls=&quot;apf.Button&quot; href=&quot;output/apf.Button.html&quot;&gt;apf.Button&lt;/a&gt; config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Toolbar.Fill" superclass="apf.Toolbar.Spacer">
        <description>A simple element that adds a greedy (100% width) horizontal space between items in a toolbar.
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            tbar : [
            'Item 1',
            {xtype: 'tbfill'}, // or '-&gt;'
            'Item 2'
            ]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Spacer</description>
                <parameters/>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Toolbar.Item" superclass="Object">
        <description>The base class that other classes should extend in order to get some basic common toolbar item functionality.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Item</description>
                <parameters>
                    <parameter name="el" type="HTMLElement" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getEl" scope="instance">
                <description>Get this item's HTML Element</description>
                <parameters/>
            </method>
            <method name="destroy" scope="instance">
                <description>Removes and destroys this item.</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Shows this item.</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hides this item.</description>
                <parameters/>
            </method>
            <method name="setVisible" scope="instance">
                <description>Convenience function for boolean show/hide.</description>
                <parameters>
                    <parameter name="visible" type="Boolean" usage="required">
                        <description>true to show/false to hide</description>
                    </parameter>
                </parameters>
            </method>
            <method name="focus" scope="instance">
                <description>Try to focus this item</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>Disables this item.</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>Enables this item.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.Toolbar.Separator" superclass="apf.Toolbar.Item">
        <description>A simple class that adds a vertical separator bar between toolbar items.  Example usage:
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            tbar : [
            'Item 1',
            {xtype: 'tbseparator'}, // or '-'
            'Item 2'
            ]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Separator</description>
                <parameters/>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Toolbar.Spacer" superclass="apf.Toolbar.Item">
        <description>A simple element that adds extra horizontal space between items in a toolbar.
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            tbar : [
            'Item 1',
            {xtype: 'tbspacer'}, // or ' '
            'Item 2'
            ]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Spacer</description>
                <parameters/>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Toolbar.SplitButton" superclass="apf.SplitButton">
        <description>A split button that renders into a toolbar.
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            tbar : [
            {
            xtype: 'tbsplit',
            text: 'Options',
            handler: optionsHandler, // handle a click on the button itself
            menu: new apf.menu.Menu({
            items: [
            // These items will display in a dropdown menu when the split arrow is clicked
            {text: 'Item 1', handler: item1Handler},
            {text: 'Item 2', handler: item2Handler}
            ]
            })
            }
            ]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new SplitButton</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A standard &lt;a ext:cls=&quot;apf.SplitButton&quot; href=&quot;output/apf.SplitButton.html&quot;&gt;apf.SplitButton&lt;/a&gt; config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Toolbar.TextItem" superclass="apf.Toolbar.Item">
        <description>A simple class that renders text directly into a toolbar.
            &lt;pre&gt;&lt;code&gt;new apf.Panel({
            tbar : [
            {xtype: 'tbtext', text: 'Item 1'} // or simply 'Item 1'
            ]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new TextItem</description>
                <parameters>
                    <parameter name="text" type="String/Object" usage="required">
                        <description>A text string, or a config object containing a &lt;tt&gt;text&lt;/tt&gt; property</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.Updater" superclass="apf.util.Observable">
        <description>Provides AJAX-style update capabilities for Element objects.  Updater can be used to &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;update&quot; href=&quot;output/apf.Updater.html#update&quot;&gt;update&lt;/a&gt; an Element once,
            or you can use &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;startAutoRefresh&quot; href=&quot;output/apf.Updater.html#startAutoRefresh&quot;&gt;startAutoRefresh&lt;/a&gt; to set up an auto-updating Element on a specific interval.&lt;br&gt;&lt;br&gt;
            Usage:&lt;br&gt;
            &lt;pre&gt;&lt;code&gt;// Get it from a apf.Element object
            var el = apf.get(&quot;foo&quot;);
            var mgr = el.getUpdater();
            mgr.update({
            url: &quot;http://myserver.com/index.php&quot;,
            params: {
            param1: &quot;foo&quot;,
            param2: &quot;bar&quot;
            }
            });
            ...
            mgr.formUpdate(&quot;myFormId&quot;, &quot;http://myserver.com/index.php&quot;);
            &lt;br&gt;
            // or directly (returns the same Updater instance)
            var mgr = new apf.Updater(&quot;myElementId&quot;);
            mgr.startAutoRefresh(60, &quot;http://myserver.com/index.php&quot;);
            mgr.on(&quot;update&quot;, myFcnNeedsToKnow);
            &lt;br&gt;
            // short handed call directly from the element object
            apf.get(&quot;foo&quot;).load({
            url: &quot;bar.php&quot;,
            scripts: true,
            params: &quot;param1=foo&amp;amp;param2=bar&quot;,
            text: &quot;Loading Foo...&quot;
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create new Updater directly.</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to update</description>
                    </parameter>
                    <parameter name="forceNew" type="Boolean" usage="optional">
                        <description>(optional) By default the constructor checks to see if the passed element already
                        has an Updater and if it does it returns the same instance. This will skip that check (useful for extending this class).</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="el" type="apf.Element" scope="instance" access="read-write">
                <description>The Element object</description>
            </property>
            <property name="defaultUrl" type="String" scope="instance" access="read-write">
                <description>Cached url to use for refreshes. Overwritten every time update() is called unless &quot;discardUrl&quot; param is set to true.</description>
            </property>
            <property name="sslBlankUrl" type="String" scope="instance" access="read-write">
                <description>Blank page URL to use with SSL file uploads (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;sslBlankUrl&quot; href=&quot;output/apf.Updater.defaults.html#sslBlankUrl&quot;&gt;apf.Updater.defaults.sslBlankUrl&lt;/a&gt;).</description>
            </property>
            <property name="disableCaching" type="Boolean" scope="instance" access="read-write">
                <description>Whether to append unique parameter on get request to disable caching (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;disableCaching&quot; href=&quot;output/apf.Updater.defaults.html#disableCaching&quot;&gt;apf.Updater.defaults.disableCaching&lt;/a&gt;).</description>
            </property>
            <property name="indicatorText" type="String" scope="instance" access="read-write">
                <description>Text for loading indicator (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;indicatorText&quot; href=&quot;output/apf.Updater.defaults.html#indicatorText&quot;&gt;apf.Updater.defaults.indicatorText&lt;/a&gt;).</description>
            </property>
            <property name="showLoadIndicator" type="String" scope="instance" access="read-write">
                <description>Whether to show indicatorText when loading (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;showLoadIndicator&quot; href=&quot;output/apf.Updater.defaults.html#showLoadIndicator&quot;&gt;apf.Updater.defaults.showLoadIndicator&lt;/a&gt;).</description>
            </property>
            <property name="timeout" type="Number" scope="instance" access="read-write">
                <description>Timeout for requests or form posts in seconds (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;timeout&quot; href=&quot;output/apf.Updater.defaults.html#timeout&quot;&gt;apf.Updater.defaults.timeout&lt;/a&gt;).</description>
            </property>
            <property name="loadScripts" type="Boolean" scope="instance" access="read-write">
                <description>True to process scripts in the output (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;loadScripts&quot; href=&quot;output/apf.Updater.defaults.html#loadScripts&quot;&gt;apf.Updater.defaults.loadScripts&lt;/a&gt;).</description>
            </property>
            <property name="transaction" type="Object" scope="instance" access="read-write">
                <description>Transaction object of the current executing transaction, or null if there is no active transaction.</description>
            </property>
            <property name="refreshDelegate" type="Function" scope="instance" access="read-write">
                <description>Delegate for refresh() prebound to &quot;this&quot;, use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments</description>
            </property>
            <property name="updateDelegate" type="Function" scope="instance" access="read-write">
                <description>Delegate for update() prebound to &quot;this&quot;, use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments</description>
            </property>
            <property name="formUpdateDelegate" type="Function" scope="instance" access="read-write">
                <description>Delegate for formUpdate() prebound to &quot;this&quot;, use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments</description>
            </property>
            <property name="renderer" type="Object" scope="instance" access="read-write">
                <description>The renderer for this Updater (defaults to &lt;a ext:cls=&quot;apf.Updater.BasicRenderer&quot; href=&quot;output/apf.Updater.BasicRenderer.html&quot;&gt;apf.Updater.BasicRenderer&lt;/a&gt;).</description>
            </property>
        </properties>
        <methods>
            <method name="getDefaultRenderer" scope="instance">
                <description>This is an overrideable method which returns a reference to a default
                    renderer class if none is specified when creating the apf.Updater.
                Defaults to &lt;a ext:cls=&quot;apf.Updater.BasicRenderer&quot; href=&quot;output/apf.Updater.BasicRenderer.html&quot;&gt;apf.Updater.BasicRenderer&lt;/a&gt;</description>
                <parameters/>
            </method>
            <method name="getEl" scope="instance">
                <description>Get the Element this Updater is bound to</description>
                <parameters/>
            </method>
            <method name="update" scope="instance">
                <description>Performs an &lt;b&gt;asynchronous&lt;/b&gt; request, updating this element with the response.
                    If params are specified it uses POST, otherwise it uses GET.&lt;br&gt;&lt;br&gt;
                    &lt;b&gt;Note:&lt;/b&gt; Due to the asynchronous nature of remote server requests, the Element
                    will not have been fully updated when the function returns. To post-process the returned
                data, use the callback option, or an &lt;b&gt;&lt;tt&gt;update&lt;/tt&gt;&lt;/b&gt; event handler.</description>
                <parameters>
                    <parameter name="options" type="Object" usage="required">
                        <description>A config object containing any of the following options:&lt;ul&gt;
                            &lt;li&gt;url : &lt;b&gt;String/Function&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;The URL to request or a function which
                            &lt;i&gt;returns&lt;/i&gt; the URL (defaults to the value of &lt;a ext:cls=&quot;apf.Ajax&quot; ext:member=&quot;url&quot; href=&quot;output/apf.Ajax.html#url&quot;&gt;apf.Ajax.url&lt;/a&gt; if not specified).&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;method : &lt;b&gt;String&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;The HTTP method to
                            use. Defaults to POST if the &lt;tt&gt;params&lt;/tt&gt; argument is present, otherwise GET.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;params : &lt;b&gt;String/Object/Function&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;The
                            parameters to pass to the server (defaults to none). These may be specified as a url-encoded
                            string, or as an object containing properties which represent parameters,
                            or as a function, which returns such an object.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;scripts : &lt;b&gt;Boolean&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;If &lt;tt&gt;true&lt;/tt&gt;
                            any &amp;lt;script&amp;gt; tags embedded in the response text will be extracted
                            and executed (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;loadScripts&quot; href=&quot;output/apf.Updater.defaults.html#loadScripts&quot;&gt;apf.Updater.defaults.loadScripts&lt;/a&gt;). If this option is specified,
                            the callback will be called &lt;i&gt;after&lt;/i&gt; the execution of the scripts.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;callback : &lt;b&gt;Function&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;A function to
                            be called when the response from the server arrives. The following
                            parameters are passed:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;el&lt;/b&gt; : apf.Element&lt;p class=&quot;sub-desc&quot;&gt;The Element being updated.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;success&lt;/b&gt; : Boolean&lt;p class=&quot;sub-desc&quot;&gt;True for success, false for failure.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;response&lt;/b&gt; : XMLHttpRequest&lt;p class=&quot;sub-desc&quot;&gt;The XMLHttpRequest which processed the update.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;options&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;The config object passed to the update call.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
                            &lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;scope : &lt;b&gt;Object&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;The scope in which
                            to execute the callback (The callback's &lt;tt&gt;this&lt;/tt&gt; reference.) If the
                            &lt;tt&gt;params&lt;/tt&gt; argument is a function, this scope is used for that function also.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;discardUrl : &lt;b&gt;Boolean&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;By default, the URL of this request becomes
                            the default URL for this Updater object, and will be subsequently used in &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;refresh&quot; href=&quot;output/apf.Updater.html#refresh&quot;&gt;refresh&lt;/a&gt;
                            calls. To bypass this behavior, pass &lt;tt&gt;discardUrl:true&lt;/tt&gt; (defaults to false).&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;timeout : &lt;b&gt;Number&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;The number of seconds to wait for a response before
                            timing out (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;timeout&quot; href=&quot;output/apf.Updater.defaults.html#timeout&quot;&gt;apf.Updater.defaults.timeout&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;text : &lt;b&gt;String&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;The text to use as the innerHTML of the
                            &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;indicatorText&quot; href=&quot;output/apf.Updater.defaults.html#indicatorText&quot;&gt;apf.Updater.defaults.indicatorText&lt;/a&gt; div (defaults to 'Loading...'). To replace the entire div, not
                            just the text, override &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;indicatorText&quot; href=&quot;output/apf.Updater.defaults.html#indicatorText&quot;&gt;apf.Updater.defaults.indicatorText&lt;/a&gt; directly.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;nocache : &lt;b&gt;Boolean&lt;/b&gt;&lt;p class=&quot;sub-desc&quot;&gt;Only needed for GET
                            requests, this option causes an extra, auto-generated parameter to be appended to the request
                            to defeat caching (defaults to &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;disableCaching&quot; href=&quot;output/apf.Updater.defaults.html#disableCaching&quot;&gt;apf.Updater.defaults.disableCaching&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
                            &lt;p&gt;
                            For example:
                            &lt;pre&gt;&lt;code&gt;um.update({
                            url: &quot;your-url.php&quot;,
                            params: {param1: &quot;foo&quot;, param2: &quot;bar&quot;}, // or a URL encoded string
                            callback: yourFunction,
                            scope: yourObject, //(optional scope)
                            discardUrl: true,
                            nocache: true,
                            text: &quot;Loading...&quot;,
                            timeout: 60,
                            scripts: false // Save time by avoiding RegExp execution.
                        });&lt;/code&gt;&lt;/pre&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="formUpdate" scope="instance">
                <description>Performs an async form post, updating this element with the response. If the form has the attribute
                    enctype=&quot;multipart/form-data&quot;, it assumes it's a file upload.
                Uses this.sslBlankUrl for SSL file uploads to prevent IE security warning.</description>
                <parameters>
                    <parameter name="form" type="String/HTMLElement" usage="required">
                        <description>The form Id or form element</description>
                    </parameter>
                    <parameter name="url" type="String" usage="optional">
                        <description>(optional) The url to pass the form to. If omitted the action attribute on the form will be used.</description>
                    </parameter>
                    <parameter name="reset" type="Boolean" usage="optional">
                        <description>(optional) Whether to try to reset the form after the update</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) Callback when transaction is complete. The following
                            parameters are passed:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;el&lt;/b&gt; : apf.Element&lt;p class=&quot;sub-desc&quot;&gt;The Element being updated.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;success&lt;/b&gt; : Boolean&lt;p class=&quot;sub-desc&quot;&gt;True for success, false for failure.&lt;/p&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;response&lt;/b&gt; : XMLHttpRequest&lt;p class=&quot;sub-desc&quot;&gt;The XMLHttpRequest which processed the update.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="refresh" scope="instance">
                <description>Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately</description>
                <parameters>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="startAutoRefresh" scope="instance">
                <description>Set this element to auto refresh.  Can be canceled by calling &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;stopAutoRefresh&quot; href=&quot;output/apf.Updater.html#stopAutoRefresh&quot;&gt;stopAutoRefresh&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="interval" type="Number" usage="required">
                        <description>How often to update (in seconds).</description>
                    </parameter>
                    <parameter name="url" type="String/Object/Function" usage="optional">
                        <description>(optional) The url for this request, a config object in the same format
                            supported by &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;load&quot; href=&quot;output/apf.Updater.html#load&quot;&gt;load&lt;/a&gt;, or a function to call to get the url (defaults to the last used url). Note that while
                            the url used in a load call can be reused by this method, other load config options will not be reused and must be
                        sepcified as part of a config object passed as this paramter if needed.</description>
                    </parameter>
                    <parameter name="params" type="String/Object" usage="optional">
                        <description>(optional) The parameters to pass as either a url encoded string
                        &quot;&amp;param1=1&amp;param2=2&quot; or as an object {param1: 1, param2: 2}</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess)</description>
                    </parameter>
                    <parameter name="refreshNow" type="Boolean" usage="optional">
                        <description>(optional) Whether to execute the refresh now, or wait the interval</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stopAutoRefresh" scope="instance">
                <description>Stop auto refresh on this element.</description>
                <parameters/>
            </method>
            <method name="isAutoRefreshing" scope="instance">
                <description>Returns true if the Updater is currently set to auto refresh its content (see &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;startAutoRefresh&quot; href=&quot;output/apf.Updater.html#startAutoRefresh&quot;&gt;startAutoRefresh&lt;/a&gt;), otherwise false.</description>
                <parameters/>
            </method>
            <method name="showLoading" scope="instance">
                <description>Display the element's &quot;loading&quot; state. By default, the element is updated with &lt;a ext:cls=&quot;apf.Updater&quot; ext:member=&quot;indicatorText&quot; href=&quot;output/apf.Updater.html#indicatorText&quot;&gt;indicatorText&lt;/a&gt;. This
                method may be overridden to perform a custom action while this Updater is actively updating its contents.</description>
                <parameters/>
            </method>
            <method name="setRenderer" scope="instance">
                <description>Sets the content renderer for this Updater. See &lt;a ext:cls=&quot;apf.Updater.BasicRenderer&quot; ext:member=&quot;render&quot; href=&quot;output/apf.Updater.BasicRenderer.html#render&quot;&gt;apf.Updater.BasicRenderer.render&lt;/a&gt; for more details.</description>
                <parameters>
                    <parameter name="renderer" type="Object" usage="required">
                        <description>The object implementing the render() method</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRenderer" scope="instance">
                <description>Returns the content renderer for this Updater. See &lt;a ext:cls=&quot;apf.Updater.BasicRenderer&quot; ext:member=&quot;render&quot; href=&quot;output/apf.Updater.BasicRenderer.html#render&quot;&gt;apf.Updater.BasicRenderer.render&lt;/a&gt; for more details.</description>
                <parameters/>
            </method>
            <method name="setDefaultUrl" scope="instance">
                <description>Sets the default URL used for updates.</description>
                <parameters>
                    <parameter name="defaultUrl" type="String/Function" usage="required">
                        <description>The url or a function to call to get the url</description>
                    </parameter>
                </parameters>
            </method>
            <method name="abort" scope="instance">
                <description>Aborts the currently executing transaction, if any.</description>
                <parameters/>
            </method>
            <method name="isUpdating" scope="instance">
                <description>Returns true if an update is in progress, otherwise false.</description>
                <parameters/>
            </method>
            <method name="Updater.updateElement" scope="static">
                <description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Static convenience method. &lt;b&gt;This method is deprecated in favor of el.load({url:'foo.php', ...})&lt;/b&gt;.
                    Usage:
                &lt;pre&gt;&lt;code&gt;apf.Updater.updateElement(&quot;my-div&quot;, &quot;stuff.php&quot;);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to update</description>
                    </parameter>
                    <parameter name="url" type="String" usage="required">
                        <description>The url</description>
                    </parameter>
                    <parameter name="params" type="String/Object" usage="optional">
                        <description>(optional) Url encoded param string or an object of name/value pairs</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) A config object with any of the Updater properties you want to set - for
                        example: {disableCaching:true, indicatorText: &quot;Loading data...&quot;}</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Updater.BasicRenderer" superclass="Object">
        <description>Default Content renderer. Updates the elements innerHTML with the responseText.</description>
        <properties/>
        <methods>
            <method name="render" scope="instance">
                <description>This is called when the transaction is completed and it's time to update the element - The BasicRenderer
                    updates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),
                create an object with a &quot;render(el, response)&quot; method and pass it to setRenderer on the Updater.</description>
                <parameters>
                    <parameter name="el" type="apf.Element" usage="required">
                        <description>The element being rendered</description>
                    </parameter>
                    <parameter name="response" type="Object" usage="required">
                        <description>The XMLHttpRequest object</description>
                    </parameter>
                    <parameter name="updateManager" type="Updater" usage="required">
                        <description>The calling update manager</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description>A callback that will need to be called if loadScripts is true on the Updater</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.Updater.defaults" superclass="Object">
        <description>The defaults collection enables customizing the default properties of Updater</description>
        <properties>
            <property name="timeout" type="Number" scope="instance" access="read-write">
                <description>Timeout for requests or form posts in seconds (defaults to 30 seconds).</description>
            </property>
            <property name="loadScripts" type="Boolean" scope="instance" access="read-write">
                <description>True to process scripts by default (defaults to false).</description>
            </property>
            <property name="sslBlankUrl" type="String" scope="instance" access="read-write">
                <description>Blank page URL to use with SSL file uploads (defaults to &lt;a ext:cls=&quot;apf&quot; ext:member=&quot;SSL_SECURE_URL&quot; href=&quot;output/apf.html#SSL_SECURE_URL&quot;&gt;apf.SSL_SECURE_URL&lt;/a&gt; if set, or &quot;javascript:false&quot;).</description>
            </property>
            <property name="disableCaching" type="Boolean" scope="instance" access="read-write">
                <description>True to append a unique parameter to GET requests to disable caching (defaults to false).</description>
            </property>
            <property name="showLoadIndicator" type="Boolean" scope="instance" access="read-write">
                <description>Whether or not to show &lt;a ext:cls=&quot;apf.Updater.defaults&quot; ext:member=&quot;indicatorText&quot; href=&quot;output/apf.Updater.defaults.html#indicatorText&quot;&gt;indicatorText&lt;/a&gt; during loading (defaults to true).</description>
            </property>
            <property name="indicatorText" type="String" scope="instance" access="read-write">
                <description>Text for loading indicator (defaults to '&amp;lt;div class=&quot;loading-indicator&quot;&amp;gt;Loading...&amp;lt;/div&amp;gt;').</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.Viewport" superclass="apf.Container">
        <description>A specialized container representing the viewable application area (the browser viewport).
            &lt;p&gt; The Viewport renders itself to the document body, and automatically sizes itself to the size of
            the browser viewport and manages window resizing. There may only be one Viewport created
            in a page. Inner layouts are available by virtue of the fact that all &lt;a ext:cls=&quot;apf.Panel&quot; href=&quot;output/apf.Panel.html&quot;&gt;Panel&lt;/a&gt;s
            added to the Viewport, either through its &lt;a ext:cls=&quot;apf.Viewport&quot; ext:member=&quot;items&quot; href=&quot;output/apf.Viewport.html#items&quot;&gt;items&lt;/a&gt;, or through the items, or the &lt;a ext:cls=&quot;apf.Viewport&quot; ext:member=&quot;add&quot; href=&quot;output/apf.Viewport.html#add&quot;&gt;add&lt;/a&gt;
            method of any of its child Panels may themselves have a layout.&lt;/p&gt;
            &lt;p&gt;The Viewport does not provide scrolling, so child Panels within the Viewport should provide
            for scrolling if needed using the &lt;a ext:cls=&quot;apf.Viewport&quot; ext:member=&quot;autoScroll&quot; href=&quot;output/apf.Viewport.html#autoScroll&quot;&gt;autoScroll&lt;/a&gt; config.&lt;/p&gt;
            Example showing a classic application border layout :&lt;pre&gt;&lt;code&gt;new apf.Viewport({
            layout: 'border',
            items: [{
            region: 'north',
            html: '&amp;lt;h1 class=&quot;x-panel-header&quot;&gt;Page Title&amp;lt;/h1&gt;',
            autoHeight: true,
            border: false,
            margins: '0 0 5 0'
            }, {
            region: 'west',
            collapsible: true,
            title: 'Navigation',
            xtype: 'treepanel',
            width: 200,
            autoScroll: true,
            split: true,
            loader: new apf.tree.TreeLoader(),
            root: new apf.tree.AsyncTreeNode({
            expanded: true,
            children: [{
            text: 'Menu Option 1',
            leaf: true
            }, {
            text: 'Menu Option 2',
            leaf: true
            }, {
            text: 'Menu Option 3',
            leaf: true
            }]
            }),
            rootVisible: false,
            listeners: {
            click: function(n) {
            apf.Msg.alert('Navigation Tree Click', 'You clicked: &quot;' + n.attributes.text + '&quot;');
            }
            }
            }, {
            region: 'center',
            xtype: 'tabpanel',
            items: {
            title: 'Default Tab',
            html: 'The first tab\'s content. Others may be added dynamically'
            }
            }, {
            region: 'south',
            title: 'Information',
            collapsible: true,
            html: 'Information goes here',
            split: true,
            height: 100,
            minHeight: 100
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Viewport</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="initComponent" scope="instance">
                <description></description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.Window" superclass="apf.Panel">
        <description>A specialized panel intended for use as an application window.  Windows are floated and draggable by default, and
            also provide specific behavior like the ability to maximize and restore (with an event for minimizing, since the
            minimize behavior is application-specific).  Windows can also be linked to a &lt;a ext:cls=&quot;apf.WindowGroup&quot; href=&quot;output/apf.WindowGroup.html&quot;&gt;apf.WindowGroup&lt;/a&gt; or managed
        by the &lt;a ext:cls=&quot;apf.WindowManager&quot; href=&quot;output/apf.WindowManager.html&quot;&gt;apf.WindowManager&lt;/a&gt; to provide grouping, activation, to front/back and other application-specific behavior.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="dd" type="apf.dd.DD" scope="instance" access="read-write">
                <description>If this Window is configured &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;draggable&quot; href=&quot;output/apf.Window.html#draggable&quot;&gt;draggable&lt;/a&gt;, this property will contain
                an instance of &lt;a ext:cls=&quot;apf.dd.DD&quot; href=&quot;output/apf.dd.DD.html&quot;&gt;apf.dd.DD&lt;/a&gt; which handles dragging the Window's DOM Element.</description>
            </property>
        </properties>
        <methods>
            <method name="focus" scope="instance">
                <description>Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the
                window itself will receive focus.</description>
                <parameters/>
            </method>
            <method name="setAnimateTarget" scope="instance">
                <description>Sets the target element from which the window should animate while opening.</description>
                <parameters>
                    <parameter name="el" type="String/Element" usage="required">
                        <description>The target element or id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="show" scope="instance">
                <description>Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.</description>
                <parameters>
                    <parameter name="animateTarget" type="String/Element" usage="optional">
                        <description>(optional) The target element or id from which the window should
                        animate while opening (defaults to undefined with no animation)</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) A callback function to call after the window is displayed</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the callback</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hide" scope="instance">
                <description>Hides the window, setting it to invisible and applying negative offsets.</description>
                <parameters>
                    <parameter name="animateTarget" type="String/Element" usage="optional">
                        <description>(optional) The target element or id to which the window should
                        animate while hiding (defaults to null with no animation)</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) A callback function to call after the window is hidden</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the callback</description>
                    </parameter>
                </parameters>
            </method>
            <method name="minimize" scope="instance">
                <description>Placeholder method for minimizing the window.  By default, this method simply fires the &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;minimize&quot; href=&quot;output/apf.Window.html#minimize&quot;&gt;minimize&lt;/a&gt; event
                    since the behavior of minimizing a window is application-specific.  To implement custom minimize behavior,
                either the minimize event can be handled or this method can be overridden.</description>
                <parameters/>
            </method>
            <method name="close" scope="instance">
                <description>Closes the window, removes it from the DOM and destroys the window object.  The beforeclose event is fired
                before the close happens and will cancel the close action if it returns false.</description>
                <parameters/>
            </method>
            <method name="maximize" scope="instance">
                <description>Fits the window within its current container and automatically replaces the 'maximize' tool button with
                the 'restore' tool button.</description>
                <parameters/>
            </method>
            <method name="restore" scope="instance">
                <description>Restores a maximized window back to its original size and position prior to being maximized and also replaces
                the 'restore' tool button with the 'maximize' tool button.</description>
                <parameters/>
            </method>
            <method name="toggleMaximize" scope="instance">
                <description>A shortcut method for toggling between &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;maximize&quot; href=&quot;output/apf.Window.html#maximize&quot;&gt;maximize&lt;/a&gt; and &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;restore&quot; href=&quot;output/apf.Window.html#restore&quot;&gt;restore&lt;/a&gt; based on the current maximized
                state of the window.</description>
                <parameters/>
            </method>
            <method name="alignTo" scope="instance">
                <description>Aligns the window to the specified element</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to align to.</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The position to align to (see &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;apf.Element.alignTo&lt;/a&gt; for more details).</description>
                    </parameter>
                    <parameter name="offsets" type="Array" usage="optional">
                        <description>(optional) Offset the positioning by [x, y]</description>
                    </parameter>
                </parameters>
            </method>
            <method name="anchorTo" scope="instance">
                <description>Anchors this window to another element and realigns it when the window is resized or scrolled.</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to align to.</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The position to align to (see &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;apf.Element.alignTo&lt;/a&gt; for more details)</description>
                    </parameter>
                    <parameter name="offsets" type="Array" usage="optional">
                        <description>(optional) Offset the positioning by [x, y]</description>
                    </parameter>
                    <parameter name="monitorScroll" type="Boolean/Number" usage="optional">
                        <description>(optional) true to monitor body scroll and reposition. If this parameter
                        is a number, it is used as the buffer delay (defaults to 50ms).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toFront" scope="instance">
                <description>Brings this window to the front of any other visible windows</description>
                <parameters/>
            </method>
            <method name="setActive" scope="instance">
                <description>Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also
                fires the &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;activate&quot; href=&quot;output/apf.Window.html#activate&quot;&gt;activate&lt;/a&gt; or &lt;a ext:cls=&quot;apf.Window&quot; ext:member=&quot;deactivate&quot; href=&quot;output/apf.Window.html#deactivate&quot;&gt;deactivate&lt;/a&gt; event depending on which action occurred.</description>
                <parameters>
                    <parameter name="active" type="Boolean" usage="required">
                        <description>True to activate the window, false to deactivate it (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toBack" scope="instance">
                <description>Sends this window to the back of (lower z-index than) any other visible windows</description>
                <parameters/>
            </method>
            <method name="center" scope="instance">
                <description>Centers this window in the viewport</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.WindowGroup" superclass="Object">
        <description>An object that represents a group of &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; instances and provides z-order management
        and window activation behavior.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters/>
            </constructor>
        </constructors>
        <properties>
            <property name="zseed" type="Number" scope="instance" access="read-write">
                <description>The starting z-index for windows (defaults to 9000)</description>
            </property>
        </properties>
        <methods>
            <method name="get" scope="instance">
                <description>Gets a registered window by id.</description>
                <parameters>
                    <parameter name="id" type="String/Object" usage="required">
                        <description>The id of the window or a &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; instance</description>
                    </parameter>
                </parameters>
            </method>
            <method name="bringToFront" scope="instance">
                <description>Brings the specified window to the front of any other active windows.</description>
                <parameters>
                    <parameter name="win" type="String/Object" usage="required">
                        <description>The id of the window or a &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; instance</description>
                    </parameter>
                </parameters>
            </method>
            <method name="sendToBack" scope="instance">
                <description>Sends the specified window to the back of other active windows.</description>
                <parameters>
                    <parameter name="win" type="String/Object" usage="required">
                        <description>The id of the window or a &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; instance</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hideAll" scope="instance">
                <description>Hides all windows in the group.</description>
                <parameters/>
            </method>
            <method name="getActive" scope="instance">
                <description>Gets the currently-active window in the group.</description>
                <parameters/>
            </method>
            <method name="getBy" scope="instance">
                <description>Returns zero or more windows in the group using the custom search function passed to this method.
                    The function should accept a single &lt;a ext:cls=&quot;apf.Window&quot; href=&quot;output/apf.Window.html&quot;&gt;apf.Window&lt;/a&gt; reference as its only argument and should
                return true if the window matches the search criteria, otherwise it should return false.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The search function</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the function (defaults to the window
                        that gets passed to the function if not specified)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Executes the specified function once for every window in the group, passing each
                window as the only parameter. Returning false from the function will stop the iteration.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to execute for each item</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the function</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.WindowMgr" superclass="apf.WindowGroup">
        <description>The default global window group that is available automatically.  To have more than one group of windows
        with separate z-order stacks, create additional instances of &lt;a ext:cls=&quot;apf.WindowGroup&quot; href=&quot;output/apf.WindowGroup.html&quot;&gt;apf.WindowGroup&lt;/a&gt; as needed.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.XTemplate" superclass="apf.Template">
        <description>&lt;p&gt;A template class that supports advanced functionality like autofilling arrays, conditional processing with
            basic comparison operators, sub-templates, basic math function support, special built-in template variables,
            inline code execution and more.  XTemplate also provides the templating mechanism built into &lt;a ext:cls=&quot;apf.DataView&quot; href=&quot;output/apf.DataView.html&quot;&gt;apf.DataView&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;XTemplate supports many special tags and built-in operators that aren't defined as part of the API, but are
            supported in the templates that can be created.  The following examples demonstrate all of the supported features.
            This is the data object used for reference in each code example:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var data = {
            name: 'Jack Slocum',
            title: 'Lead Developer',
            company: 'apf JS, LLC',
            email: 'jack@extjs.com',
            address: '4 Red Bulls Drive',
            city: 'Cleveland',
            state: 'Ohio',
            zip: '44102',
            drinks: ['Red Bull', 'Coffee', 'Water'],
            kids: [{
            name: 'Sara Grace',
            age:3
            },{
            name: 'Zachary',
            age:2
            },{
            name: 'John James',
            age:0
            }]
            };&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Auto filling of arrays and scope switching&lt;/b&gt;&lt;br/&gt;Using the &lt;tt&gt;tpl&lt;/tt&gt; tag and the &lt;tt&gt;for&lt;/tt&gt; operator,
            you can switch to the scope of the object specified by &lt;tt&gt;for&lt;/tt&gt; and access its members to populate the template.
            If the variable in &lt;tt&gt;for&lt;/tt&gt; is an array, it will auto-fill, repeating the template block inside the &lt;tt&gt;tpl&lt;/tt&gt;
            tag for each item in the array:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Title: {title}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Company: {company}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Kids: ',
            '&amp;lt;tpl for=&quot;kids&quot;&gt;',
            '&amp;lt;p&gt;{name}&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;&amp;lt;/p&gt;'
            );
            tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Access to parent object from within sub-template scope&lt;/b&gt;&lt;br/&gt;When processing a sub-template, for example while
            looping through a child array, you can access the parent object's members via the &lt;tt&gt;parent&lt;/tt&gt; object:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Kids: ',
            '&amp;lt;tpl for=&quot;kids&quot;&gt;',
            '&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;',  // &lt;-- Note that the &amp;gt; is encoded
            '&amp;lt;p&gt;{name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;',
            '&amp;lt;/tpl&gt;&amp;lt;/p&gt;'
            );
            tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Array item index and basic math support&lt;/b&gt; &lt;br/&gt;While processing an array, the special variable &lt;tt&gt;{#}&lt;/tt&gt;
            will provide the current array index + 1 (starts at 1, not 0). Templates also support the basic math operators
            + - * and / that can be applied directly on numeric data values:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Kids: ',
            '&amp;lt;tpl for=&quot;kids&quot;&gt;',
            '&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;',  // &lt;-- Note that the &amp;gt; is encoded
            '&amp;lt;p&gt;{#}: {name}&amp;lt;/p&gt;',  // &lt;-- Auto-number each item
            '&amp;lt;p&gt;In 5 Years: {age+5}&amp;lt;/p&gt;',  // &lt;-- Basic math
            '&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;',
            '&amp;lt;/tpl&gt;&amp;lt;/p&gt;'
            );
            tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Auto-rendering of flat arrays&lt;/b&gt; &lt;br/&gt;Flat arrays that contain values (and not objects) can be auto-rendered
            using the special &lt;tt&gt;{.}&lt;/tt&gt; variable inside a loop.  This variable will represent the value of
            the array at the current index:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;{name}\'s favorite beverages:&amp;lt;/p&gt;',
            '&amp;lt;tpl for=&quot;drinks&quot;&gt;',
            '&amp;lt;div&gt; - {.}&amp;lt;/div&gt;',
            '&amp;lt;/tpl&gt;'
            );
            tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Basic conditional logic&lt;/b&gt; &lt;br/&gt;Using the &lt;tt&gt;tpl&lt;/tt&gt; tag and the &lt;tt&gt;if&lt;/tt&gt;
            operator you can provide conditional checks for deciding whether or not to render specific parts of the template.
            Note that there is no &lt;tt&gt;else&lt;/tt&gt; operator &amp;mdash; if needed, you should use two opposite &lt;tt&gt;if&lt;/tt&gt; statements.
            Properly-encoded attributes are required as seen in the following example:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Kids: ',
            '&amp;lt;tpl for=&quot;kids&quot;&gt;',
            '&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;',  // &lt;-- Note that the &amp;gt; is encoded
            '&amp;lt;p&gt;{name}&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;',
            '&amp;lt;/tpl&gt;&amp;lt;/p&gt;'
            );
            tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Ability to execute arbitrary inline code&lt;/b&gt; &lt;br/&gt;In an XTemplate, anything between {[ ... ]}  is considered
            code to be executed in the scope of the template. There are some special variables available in that code:
            &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;&lt;tt&gt;values&lt;/tt&gt;&lt;/b&gt;: The values in the current scope. If you are using scope changing sub-templates, you
            can change what &lt;tt&gt;values&lt;/tt&gt; is.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;&lt;tt&gt;parent&lt;/tt&gt;&lt;/b&gt;: The scope (values) of the ancestor template.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;&lt;tt&gt;xindex&lt;/tt&gt;&lt;/b&gt;: If you are in a looping template, the index of the loop you are in (1-based).&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;&lt;tt&gt;xcount&lt;/tt&gt;&lt;/b&gt;: If you are in a looping template, the total length of the array you are looping.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;&lt;tt&gt;fm&lt;/tt&gt;&lt;/b&gt;: An alias for &lt;tt&gt;apf.util.Format&lt;/tt&gt;.&lt;/li&gt;
            &lt;/ul&gt;
            This example demonstrates basic row striping using an inline code block and the &lt;tt&gt;xindex&lt;/tt&gt; variable:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Company: {[values.company.toUpperCase() + &quot;, &quot; + values.title]}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Kids: ',
            '&amp;lt;tpl for=&quot;kids&quot;&gt;',
            '&amp;lt;div class=&quot;{[xindex % 2 === 0 ? &quot;even&quot; : &quot;odd&quot;]}&quot;&gt;',
            '{name}',
            '&amp;lt;/div&gt;',
            '&amp;lt;/tpl&gt;&amp;lt;/p&gt;'
            );
            tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Template member functions&lt;/b&gt; &lt;br/&gt;One or more member functions can be defined directly on the config
            object passed into the XTemplate constructor for more complex processing:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var tpl = new apf.XTemplate(
            '&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;',
            '&amp;lt;p&gt;Kids: ',
            '&amp;lt;tpl for=&quot;kids&quot;&gt;',
            '&amp;lt;tpl if=&quot;this.isGirl(name)&quot;&gt;',
            '&amp;lt;p&gt;Girl: {name} - {age}&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;',
            '&amp;lt;tpl if=&quot;this.isGirl(name) == false&quot;&gt;',
            '&amp;lt;p&gt;Boy: {name} - {age}&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;',
            '&amp;lt;tpl if=&quot;this.isBaby(age)&quot;&gt;',
            '&amp;lt;p&gt;{name} is a baby!&amp;lt;/p&gt;',
            '&amp;lt;/tpl&gt;',
            '&amp;lt;/tpl&gt;&amp;lt;/p&gt;', {
            isGirl: function(name){
            return name == 'Sara Grace';
            },
            isBaby: function(age){
            return age &lt; 1;
            }
            });
        tpl.overwrite(panel.body, data);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="parts" type="String/Array/Object" usage="required">
                        <description>The HTML fragment or an array of fragments to join(&quot;&quot;), or multiple arguments
                        to join(&quot;&quot;) that can also include a config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="re" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
            <property name="disableFormats" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
        </properties>
        <methods>
            <method name="applyTemplate" scope="instance">
                <description>Returns an HTML fragment of this template with the specified values applied.</description>
                <parameters>
                    <parameter name="values" type="Object" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                </parameters>
            </method>
            <method name="compile" scope="instance">
                <description>Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.</description>
                <parameters/>
            </method>
            <method name="set" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="XTemplate.from" scope="static">
                <description>&amp;lt;static&amp;gt; Creates a template from the passed element's value (&lt;i&gt;display:none&lt;/i&gt; textarea, preferred) or innerHTML.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>A DOM element or its id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="apply" scope="instance">
                <description>Alias for &lt;a ext:cls=&quot;apf.XTemplate&quot; ext:member=&quot;applyTemplate&quot; href=&quot;output/apf.XTemplate.html#applyTemplate&quot;&gt;applyTemplate&lt;/a&gt;
                Returns an HTML fragment of this template with the specified values applied.</description>
                <parameters>
                    <parameter name="values" type="Object/Array" usage="required">
                        <description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.air.DragType" superclass="Object">
        <description>Drag drop type constants&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="TEXT" type="Object" scope="instance" access="read-write">
                <description>Constant for text data</description>
            </property>
            <property name="HTML" type="Object" scope="instance" access="read-write">
                <description>Constant for html data</description>
            </property>
            <property name="URL" type="Object" scope="instance" access="read-write">
                <description>Constant for url data</description>
            </property>
            <property name="BITMAP" type="Object" scope="instance" access="read-write">
                <description>Constant for bitmap data</description>
            </property>
            <property name="FILES" type="Object" scope="instance" access="read-write">
                <description>Constant for file list data</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.air.FileProvider" superclass="apf.state.Provider">
        <description>An apf state provider implementation for Adobe AIR that stores state in the application
        storage directory.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.air.NativeObservable" superclass="apf.util.Observable">
        <description>Adds ability for apf Observable functionality to proxy events for native (AIR) object wrappers</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters/>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.air.NativeWindow" superclass="apf.air.NativeObservable">
        <description>Wraps the AIR NativeWindow class to give an apf friendly API. &lt;br/&gt;&lt;br/&gt;This class also adds
            automatic state management (position and size) for the window (by id) and it can be used
            for easily creating &quot;minimize to system tray&quot; for the main window in your application.&lt;br/&gt;&lt;br/&gt;
            Note: Many of the config options for this class can only be applied to NEW windows. Passing
        in an existing instance of a window along with those config options will have no effect.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="id" type="String" scope="instance" access="read-write">
                <description></description>
            </property>
        </properties>
        <methods>
            <method name="getNative" scope="instance">
                <description>Returns the air.NativeWindow instance</description>
                <parameters/>
            </method>
            <method name="getCenterXY" scope="instance">
                <description>Returns the x/y coordinates for centering the windw on the screen</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Shows the window</description>
                <parameters/>
            </method>
            <method name="activate" scope="instance">
                <description>Shows and activates the window</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hides the window</description>
                <parameters/>
            </method>
            <method name="close" scope="instance">
                <description>Closes the window</description>
                <parameters/>
            </method>
            <method name="isMinimized" scope="instance">
                <description>Returns true if this window is minimized</description>
                <parameters/>
            </method>
            <method name="isMaximized" scope="instance">
                <description>Returns true if this window is maximized</description>
                <parameters/>
            </method>
            <method name="moveTo" scope="instance">
                <description>Moves the window to the passed xy and y coordinates</description>
                <parameters>
                    <parameter name="x" type="Number" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="y" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="resize" scope="instance">
                <description></description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="height" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="NativeWindow.getRootWindow" scope="static">
                <description>&amp;lt;static&amp;gt; Returns the first opened window in your application</description>
                <parameters/>
            </method>
            <method name="NativeWindow.getRootHtmlWindow" scope="static">
                <description>&amp;lt;static&amp;gt; Returns the javascript &quot;window&quot; object of the first opened window in your application</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.air.NativeWindowGroup" superclass="Object">
        <description>A collection of NativeWindows.</description>
        <properties/>
        <methods>
            <method name="register" scope="instance">
                <description></description>
                <parameters>
                    <parameter name="win" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description></description>
                <parameters>
                    <parameter name="win" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="get" scope="instance">
                <description></description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="closeAll" scope="instance">
                <description>Closes all windows</description>
                <parameters/>
            </method>
            <method name="each" scope="instance">
                <description>Executes the specified function once for every window in the group, passing each
                window as the only parameter. Returning false from the function will stop the iteration.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to execute for each item</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the function</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.air.NativeWindowManager" superclass="apf.air.NativeWindowGroup">
        <description>Collection of all NativeWindows created.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.air.Sound" superclass="Object">
        <description>&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="play" scope="instance">
                <description>Play a sound.</description>
                <parameters>
                    <parameter name="file" type="String" usage="required">
                        <description>The file to be played. The path is resolved against applicationDirectory</description>
                    </parameter>
                    <parameter name="startAt" type="Number" usage="optional">
                        <description>(optional) A time in the sound file to skip to before playing</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.air.SystemMenu" superclass="Object">
        <description>Provides platform independent handling of adding item to the application menu, creating the menu or
            items as needed. &lt;br/&gt;&lt;br/&gt;
        This class also provides the ability to bind standard apf.Action instances with NativeMenuItems&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="add" scope="instance">
                <description>Add items to one of the application menus</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The application menu to add the actions to (e.g. 'File' or 'Edit').</description>
                    </parameter>
                    <parameter name="actions" type="Array" usage="required">
                        <description>An array of apf.Action objects or menu item configs</description>
                    </parameter>
                    <parameter name="mindex" type="Number" usage="required">
                        <description>The index of the character in &quot;text&quot; which should be used for
                        keyboard access</description>
                    </parameter>
                </parameters>
            </method>
            <method name="get" scope="instance">
                <description>Returns the application menu</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.data.ArrayReader" superclass="apf.data.JsonReader">
        <description>Data reader class to create an Array of &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; objects from an Array.
            Each element of that Array represents a row of data fields. The
            fields are pulled into a Record object using as a subscript, the &lt;em&gt;mapping&lt;/em&gt; property
            of the field definition if it exists, or the field's ordinal position in the definition.&lt;br&gt;
            &lt;p&gt;
            Example code:.
            &lt;pre&gt;&lt;code&gt;var Employee = apf.data.Record.create([
            {name: 'name', mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which
            {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
            ]);
            var myReader = new apf.data.ArrayReader({
            id: 0                     // The subscript within row Array that provides an ID for the Record (optional)
            }, Employee);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;
            This would consume an Array like this:
        &lt;pre&gt;&lt;code&gt;[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new ArrayReader</description>
                <parameters>
                    <parameter name="meta" type="Object" usage="required">
                        <description>Metadata configuration options.</description>
                    </parameter>
                    <parameter name="recordType" type="Object" usage="required">
                        <description>Either an Array of field definition objects
                            as specified to &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;,
                            or a &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;Record&lt;/a&gt; constructor
                        created using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="readRecords" scope="instance">
                <description>Create a data block containing apf.data.Records from an Array.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>An Array of row objects which represents the dataset.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.Connection" superclass="apf.util.Observable">
        <description>&lt;p&gt;The class encapsulates a connection to the page's originating domain, allowing requests to be made
            either to a configured URL, or to a URL specified at request time.&lt;/p&gt;
            &lt;p&gt;Requests made by this class are asynchronous, and will return immediately. No data from
            the server will be available to the statement immediately following the &lt;a ext:cls=&quot;apf.data.Connection&quot; ext:member=&quot;request&quot; href=&quot;output/apf.data.Connection.html#request&quot;&gt;request&lt;/a&gt; call.
            To process returned data, use a {@link #request-option-success callback} in the request options object,
            or an &lt;a ext:cls=&quot;apf.data.Connection&quot; ext:member=&quot;requestcomplete&quot; href=&quot;output/apf.data.Connection.html#requestcomplete&quot;&gt;event listener&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;{@link #request-option-isUpload File uploads} are not performed using normal &quot;Ajax&quot; techniques, that
            is they are &lt;b&gt;not&lt;/b&gt; performed using XMLHttpRequests. Instead the form is submitted in the standard
            manner with the DOM &lt;tt&gt;&amp;lt;form&gt;&lt;/tt&gt; element temporarily modified to have its
            &lt;a href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target&lt;/a&gt; set to refer
            to a dynamically generated, hidden &lt;tt&gt;&amp;lt;iframe&gt;&lt;/tt&gt; which is inserted into the document
            but removed after the return data has been gathered.&lt;/p&gt;
            &lt;p&gt;The server response is parsed by the browser to create the document for the IFRAME. If the
            server is using JSON to send the return object, then the
            &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17&quot;&gt;Content-Type&lt;/a&gt; header
            must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&lt;/p&gt;
            &lt;p&gt;The response text is retrieved from the document, and a fake XMLHttpRequest object
            is created containing a &lt;tt&gt;responseText&lt;/tt&gt; property in order to conform to the
            requirements of event handlers and callbacks.&lt;/p&gt;
            &lt;p&gt;Be aware that file upload packets are sent with the content type &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;multipart/form&lt;/a&gt;
            and some server technologies (notably JEE) may require some custom processing in order to
        retrieve parameter names and parameter values from the packet content.&lt;/p&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>a configuration object.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="request" scope="instance">
                <description>&lt;p&gt;Sends an HTTP request to a remote server.&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;Important:&lt;/b&gt; Ajax server requests are asynchronous, and this call will
                    return before the response has been received. Process any returned data
                    in a callback function.&lt;/p&gt;
                &lt;p&gt;To execute a callback function in the correct scope, use the &lt;tt&gt;scope&lt;/tt&gt; option.&lt;/p&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="optional">
                        <description>An object which may contain the following properties:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;url&lt;/b&gt; : String/Function (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The URL to
                            which to send the request, or a function to call which returns a URL string. The scope of the
                            function is specified by the &lt;tt&gt;scope&lt;/tt&gt; option. Defaults to configured URL.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;params&lt;/b&gt; : Object/String/Function (Optional)&lt;div class=&quot;sub-desc&quot;&gt;
                            An object containing properties which are used as parameters to the
                            request, a url encoded string or a function to call to get either. The scope of the function
                            is specified by the &lt;tt&gt;scope&lt;/tt&gt; option.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;method&lt;/b&gt; : String (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The HTTP method to use
                            for the request. Defaults to the configured method, or if no method was configured,
                            &quot;GET&quot; if no parameters are being sent, and &quot;POST&quot; if parameters are being sent. Note that
                            the method name is case-sensitive and should be all caps.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;callback&lt;/b&gt; : Function (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The
                            function to be called upon receipt of the HTTP response. The callback is
                            called regardless of success or failure and is passed the following
                            parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;options&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The parameter to the request call.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;success&lt;/b&gt; : Boolean&lt;div class=&quot;sub-desc&quot;&gt;True if the request succeeded.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;response&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The XMLHttpRequest object containing the response data.
                            See &lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot;&gt;http://www.w3.org/TR/XMLHttpRequest/&lt;/a&gt; for details about
                            accessing elements of the response.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;a id=&quot;request-option-success&quot;&gt;&lt;/a&gt;&lt;li&gt;&lt;b&gt;success&lt;/b&gt; : Function (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The function
                            to be called upon success of the request. The callback is passed the following
                            parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;response&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The XMLHttpRequest object containing the response data.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;options&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The parameter to the request call.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;failure&lt;/b&gt; : Function (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The function
                            to be called upon failure of the request. The callback is passed the
                            following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;response&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The XMLHttpRequest object containing the response data.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;options&lt;/b&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;The parameter to the request call.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;scope&lt;/b&gt; : Object (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The scope in
                            which to execute the callbacks: The &quot;this&quot; object for the callback function. If the &lt;tt&gt;url&lt;/tt&gt;, or &lt;tt&gt;params&lt;/tt&gt; options were
                            specified as functions from which to draw values, then this also serves as the scope for those function calls.
                            Defaults to the browser window.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;form&lt;/b&gt; : Element/HTMLElement/String (Optional)&lt;div class=&quot;sub-desc&quot;&gt;The &lt;tt&gt;&amp;lt;form&amp;gt;&lt;/tt&gt;
                            Element or the id of the &lt;tt&gt;&amp;lt;form&amp;gt;&lt;/tt&gt; to pull parameters from.&lt;/div&gt;&lt;/li&gt;
                            &lt;a id=&quot;request-option-isUpload&quot;&gt;&lt;/a&gt;&lt;li&gt;&lt;b&gt;isUpload&lt;/b&gt; : Boolean (Optional)&lt;div class=&quot;sub-desc&quot;&gt;True if the form object is a
                            file upload (will usually be automatically detected).
                            &lt;p&gt;File uploads are not performed using normal &quot;Ajax&quot; techniques, that is they are &lt;b&gt;not&lt;/b&gt;
                            performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
                            DOM &lt;tt&gt;&amp;lt;form&gt;&lt;/tt&gt; element temporarily modified to have its
                            &lt;a href=&quot;http://www.w3.org/TR/REC-html40/present/frames.html#adef-target&quot;&gt;target&lt;/a&gt; set to refer
                            to a dynamically generated, hidden &lt;tt&gt;&amp;lt;iframe&gt;&lt;/tt&gt; which is inserted into the document
                            but removed after the return data has been gathered.&lt;/p&gt;
                            &lt;p&gt;The server response is parsed by the browser to create the document for the IFRAME. If the
                            server is using JSON to send the return object, then the
                            &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17&quot;&gt;Content-Type&lt;/a&gt; header
                            must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&lt;/p&gt;
                            &lt;p&gt;The response text is retrieved from the document, and a fake XMLHttpRequest object
                            is created containing a &lt;tt&gt;responseText&lt;/tt&gt; property in order to conform to the
                            requirements of event handlers and callbacks.&lt;/p&gt;
                            &lt;p&gt;Be aware that file upload packets are sent with the content type &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;multipart/form&lt;/a&gt;
                            and some server technologies (notably JEE) may require some custom processing in order to
                            retrieve parameter names and parameter values from the packet content.&lt;/p&gt;
                            &lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;headers&lt;/b&gt; : Object (Optional)&lt;div class=&quot;sub-desc&quot;&gt;Request
                            headers to set for the request.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;xmlData&lt;/b&gt; : Object (Optional)&lt;div class=&quot;sub-desc&quot;&gt;XML document
                            to use for the post. Note: This will be used instead of params for the post
                            data. Any params will be appended to the URL.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;jsonData&lt;/b&gt; : Object/String (Optional)&lt;div class=&quot;sub-desc&quot;&gt;JSON
                            data to use as the post. Note: This will be used instead of params for the post
                            data. Any params will be appended to the URL.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;disableCaching&lt;/b&gt; : Boolean (Optional)&lt;div class=&quot;sub-desc&quot;&gt;True
                            to add a unique cache-buster param to GET requests.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/p&gt;
                            &lt;p&gt;The options object may also contain any other property which might be needed to perform
                        postprocessing in a callback because it is passed to callback functions.&lt;/p&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isLoading" scope="instance">
                <description>Determine whether this object has a request outstanding.</description>
                <parameters>
                    <parameter name="transactionId" type="Number" usage="optional">
                        <description>(Optional) defaults to the last transaction</description>
                    </parameter>
                </parameters>
            </method>
            <method name="abort" scope="instance">
                <description>Aborts any outstanding request.</description>
                <parameters>
                    <parameter name="transactionId" type="Number" usage="optional">
                        <description>(Optional) defaults to the last transaction</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.DataProxy" superclass="apf.util.Observable">
        <description>This class is an abstract base class for implementations which provide retrieval of
            unformatted data objects.&lt;br&gt;
            &lt;p&gt;
            DataProxy implementations are usually used in conjunction with an implementation of apf.data.DataReader
            (of the appropriate type which knows how to parse the data object) to provide a block of
            &lt;a ext:cls=&quot;apf.data.Records&quot; href=&quot;output/apf.data.Records.html&quot;&gt;apf.data.Records&lt;/a&gt; to an &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;.&lt;br&gt;
            &lt;p&gt;
            Custom implementations must implement the load method as described in
        &lt;a ext:cls=&quot;apf.data.HttpProxy&quot; ext:member=&quot;load&quot; href=&quot;output/apf.data.HttpProxy.html#load&quot;&gt;apf.data.HttpProxy.load&lt;/a&gt;.</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.data.DataReader" superclass="Object">
        <description>Abstract base class for reading structured data from a data source and converting
            it into an object containing &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; objects and metadata for use
            by an &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;.  This class is intended to be extended and should not
            be created directly. For existing implementations, see &lt;a ext:cls=&quot;apf.data.ArrayReader&quot; href=&quot;output/apf.data.ArrayReader.html&quot;&gt;apf.data.ArrayReader&lt;/a&gt;,
        &lt;a ext:cls=&quot;apf.data.JsonReader&quot; href=&quot;output/apf.data.JsonReader.html&quot;&gt;apf.data.JsonReader&lt;/a&gt; and &lt;a ext:cls=&quot;apf.data.XmlReader&quot; href=&quot;output/apf.data.XmlReader.html&quot;&gt;apf.data.XmlReader&lt;/a&gt;.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new DataReader</description>
                <parameters>
                    <parameter name="meta" type="Object" usage="required">
                        <description>Metadata configuration options (implementation-specific)</description>
                    </parameter>
                    <parameter name="recordType" type="Object" usage="required">
                        <description>Either an Array of field definition objects as specified
                            in &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;, or an &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; object created
                        using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="meta" type="Mixed" scope="instance" access="read-write">
                <description>This DataReader's configured metadata as passed to the constructor.</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.data.GroupingStore" superclass="apf.data.Store">
        <description>A specialized store implementation that provides for grouping records by one of the available fields.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new GroupingStore.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A config object containing the objects needed for the Store to access data,
                        and read the data into Records.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="clearGrouping" scope="instance">
                <description>Clears any existing grouping and refreshes the data using the default sort.</description>
                <parameters/>
            </method>
            <method name="groupBy" scope="instance">
                <description>Groups the data by the specified field.</description>
                <parameters>
                    <parameter name="field" type="String" usage="required">
                        <description>The field name by which to sort the store's data</description>
                    </parameter>
                    <parameter name="forceRegroup" type="Boolean" usage="optional">
                        <description>(optional) True to force the group to be refreshed even if the field passed
                        in is the same as the current grouping field, false to skip grouping on the same field (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.HttpProxy" superclass="apf.data.DataProxy">
        <description>An implementation of &lt;a ext:cls=&quot;apf.data.DataProxy&quot; href=&quot;output/apf.data.DataProxy.html&quot;&gt;apf.data.DataProxy&lt;/a&gt; that reads a data object from a &lt;a ext:cls=&quot;apf.data.Connection&quot; href=&quot;output/apf.data.Connection.html&quot;&gt;Connection&lt;/a&gt; object
            configured to reference a certain URL.&lt;br&gt;
            &lt;p&gt;
            &lt;b&gt;Note that this class cannot be used to retrieve data from a domain other than the domain
            from which the running page was served.&lt;br&gt;
            &lt;p&gt;
            For cross-domain access to remote data, use a &lt;a ext:cls=&quot;apf.data.ScriptTagProxy&quot; href=&quot;output/apf.data.ScriptTagProxy.html&quot;&gt;ScriptTagProxy&lt;/a&gt;.&lt;/b&gt;&lt;br&gt;
            &lt;p&gt;
            Be aware that to enable the browser to parse an XML document, the server must set
        the Content-Type header in the HTTP response to &quot;text/xml&quot;.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="conn" type="Object" usage="required">
                        <description>an &lt;a ext:cls=&quot;apf.data.Connection&quot; href=&quot;output/apf.data.Connection.html&quot;&gt;apf.data.Connection&lt;/a&gt; object, or options parameter to &lt;a ext:cls=&quot;apf.Ajax&quot; ext:member=&quot;request&quot; href=&quot;output/apf.Ajax.html#request&quot;&gt;apf.Ajax.request&lt;/a&gt;.
                        If an options parameter is passed, the singleton &lt;a ext:cls=&quot;apf.Ajax&quot; href=&quot;output/apf.Ajax.html&quot;&gt;apf.Ajax&lt;/a&gt; object will be used to make the request.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="conn" type="Object" scope="instance" access="read-write">
                <description>The Connection object (Or options parameter to &lt;a ext:cls=&quot;apf.Ajax&quot; ext:member=&quot;request&quot; href=&quot;output/apf.Ajax.html#request&quot;&gt;apf.Ajax.request&lt;/a&gt;) which this HttpProxy uses to make requests to the server.
                Properties of this object may be changed dynamically to change the way data is requested.</description>
            </property>
        </properties>
        <methods>
            <method name="getConnection" scope="instance">
                <description>Return the &lt;a ext:cls=&quot;apf.data.Connection&quot; href=&quot;output/apf.data.Connection.html&quot;&gt;apf.data.Connection&lt;/a&gt; object being used by this Proxy.</description>
                <parameters/>
            </method>
            <method name="load" scope="instance">
                <description>Load data from the configured &lt;a ext:cls=&quot;apf.data.Connection&quot; href=&quot;output/apf.data.Connection.html&quot;&gt;apf.data.Connection&lt;/a&gt;, read the data object into
                    a block of apf.data.Records using the passed &lt;a ext:cls=&quot;apf.data.DataReader&quot; href=&quot;output/apf.data.DataReader.html&quot;&gt;apf.data.DataReader&lt;/a&gt; implementation, and
                process that block using the passed callback.</description>
                <parameters>
                    <parameter name="params" type="Object" usage="required">
                        <description>An object containing properties which are to be used as HTTP parameters
                        for the request to the remote server.</description>
                    </parameter>
                    <parameter name="reader" type="apf.data.DataReader" usage="required">
                        <description>The Reader object which converts the data
                        object into a block of apf.data.Records.</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description>The function into which to pass the block of apf.data.Records.
                            The function must be passed &lt;ul&gt;
                            &lt;li&gt;The Record block object&lt;/li&gt;
                            &lt;li&gt;The &quot;arg&quot; argument from the load function&lt;/li&gt;
                            &lt;li&gt;A boolean success indicator&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope in which to call the callback</description>
                    </parameter>
                    <parameter name="arg" type="Object" usage="required">
                        <description>An optional argument which is passed to the callback as its second parameter.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.JsonReader" superclass="apf.data.DataReader">
        <description>Data reader class to create an Array of &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; objects from a JSON response
            based on mappings in a provided &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; constructor.&lt;br&gt;
            &lt;p&gt;
            Example code:
            &lt;pre&gt;&lt;code&gt;var Employee = apf.data.Record.create([
            {name: 'firstname'},                  // Map the Record's &quot;firstname&quot; field to the row object's key of the same name
            {name: 'job', mapping: 'occupation'}  // Map the &quot;job&quot; field to the row object's &quot;occupation&quot; key
            ]);
            var myReader = new apf.data.JsonReader({
            totalProperty: &quot;results&quot;,             // The property which contains the total dataset size (optional)
            root: &quot;rows&quot;,                         // The property which contains an Array of row objects
            id: &quot;id&quot;                              // The property within each row object that provides an ID for the record (optional)
            }, Employee);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;
            This would consume a JSON object of the form:
            &lt;pre&gt;&lt;code&gt;{
            'results': 2,
            'rows': [
            { 'id': 1, 'firstname': 'Bill', occupation: 'Gardener' },         // a row object
            { 'id': 2, 'firstname': 'Ben' , occupation: 'Horticulturalist' }  // another row object
            ]
            }&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;It is possible to change a JsonReader's metadata at any time by including a
            &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property in the data object. If this is detected in the
            object, a &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;Store&lt;/a&gt; object using this Reader will fire its
            &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;metachange&quot; href=&quot;output/apf.data.Store.html#metachange&quot;&gt;metachange&lt;/a&gt; event.&lt;/p&gt;
            &lt;p&gt;The &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property may contain any of the configuration
            options for this class. Additionally, it may contain a &lt;b&gt;&lt;tt&gt;fields&lt;/tt&gt;&lt;/b&gt;
            property which the JsonReader will use as an argument to &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;
            to configure the layout of the Records which it will produce.&lt;p&gt;
            Using the &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property, and the Store's &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;metachange&quot; href=&quot;output/apf.data.Store.html#metachange&quot;&gt;metachange&lt;/a&gt; event,
            it is possible to have a Store-driven control initialize itself. The metachange
            event handler may interrogate the &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property (which
            may contain any user-defined properties needed) and the &lt;b&gt;&lt;tt&gt;metaData.fields&lt;/tt&gt;&lt;/b&gt;
            property to perform any configuration required.&lt;/p&gt;
            &lt;p&gt;To use this facility to send the same data as the above example without
            having to code the creation of the Record constructor, you would create the
            JsonReader like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var myReader = new apf.data.JsonReader();&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;The first data packet from the server would configure the reader by
            containing a metaData property as well as the data:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
            'metaData': {
            totalProperty: 'results',
            root: 'rows',
            id: 'id',
            fields: [
            {name: 'name'},
            {name: 'occupation'} ]
            },
            'results': 2, 'rows': [
            { 'id': 1, 'name': 'Bill', occupation: 'Gardener' },
            { 'id': 2, 'name': 'Ben', occupation: 'Horticulturalist' } ]
        }&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new JsonReader</description>
                <parameters>
                    <parameter name="meta" type="Object" usage="required">
                        <description>Metadata configuration options.</description>
                    </parameter>
                    <parameter name="recordType" type="Object" usage="required">
                        <description>Either an Array of field definition objects as passed to
                        &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;, or a &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;Record&lt;/a&gt; constructor created using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="meta" type="Mixed" scope="instance" access="read-write">
                <description>This JsonReader's metadata as passed to the constructor, or as passed in
                the last data packet's &lt;b&gt;&lt;tt&gt;metaData&lt;/tt&gt;&lt;/b&gt; property.</description>
            </property>
            <property name="jsonData" type="Object" scope="instance" access="read-write">
                <description>After any data loads, the raw JSON data is available for further custom processing.  If no data is
                loaded or there is a load exception this property will be undefined.</description>
            </property>
        </properties>
        <methods>
            <method name="read" scope="instance">
                <description>
                This method is only used by a DataProxy which has retrieved data from a remote server.</description>
                <parameters>
                    <parameter name="response" type="Object" usage="required">
                        <description>The XHR object which contains the JSON data in its responseText.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="readRecords" scope="instance">
                <description>Create a data block containing apf.data.Records from a JSON object.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>An object which contains an Array of row objects in the property specified
                            in the config as 'root, and optionally a property, specified in the config as 'totalProperty'
                        which contains the total size of the dataset.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.JsonStore" superclass="apf.data.Store">
        <description>Small helper class to make creating Stores for remotely-loaded JSON data easier. JsonStore is pre-configured
            with a built-in &lt;a ext:cls=&quot;apf.data.HttpProxy&quot; href=&quot;output/apf.data.HttpProxy.html&quot;&gt;apf.data.HttpProxy&lt;/a&gt; and &lt;a ext:cls=&quot;apf.data.JsonReader&quot; href=&quot;output/apf.data.JsonReader.html&quot;&gt;apf.data.JsonReader&lt;/a&gt;.  If you require some other proxy/reader
            combination then you'll have to create a basic &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; configured as needed.&lt;br/&gt;
            &lt;pre&gt;&lt;code&gt;var store = new apf.data.JsonStore({
            url: 'get-images.php',
            root: 'images',
            fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
            });&lt;/code&gt;&lt;/pre&gt;
            This would consume a returned object of the form:
            &lt;pre&gt;&lt;code&gt;{
            images: [
            {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
            {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
            ]
            }&lt;/code&gt;&lt;/pre&gt;
            An object literal of this form could also be used as the &lt;a ext:cls=&quot;apf.data.JsonStore&quot; ext:member=&quot;data&quot; href=&quot;output/apf.data.JsonStore.html#data&quot;&gt;data&lt;/a&gt; config option.
            &lt;b&gt;Note: Although they are not listed, this class inherits all of the config options of Store,
        JsonReader.&lt;/b&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.data.MemoryProxy" superclass="apf.data.DataProxy">
        <description>An implementation of apf.data.DataProxy that simply passes the data specified in its constructor
        to the Reader when its load method is called.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="data" type="Object" usage="required">
                        <description>The data object which the Reader uses to construct a block of apf.data.Records.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="load" scope="instance">
                <description>
                    Load data from the requested source (in this case an in-memory
                    data object passed to the constructor), read the data object into
                    a block of apf.data.Records using the passed apf.data.DataReader implementation, and
                process that block using the passed callback.</description>
                <parameters>
                    <parameter name="params" type="Object" usage="required">
                        <description>This parameter is not used by the MemoryProxy class.</description>
                    </parameter>
                    <parameter name="reader" type="apf.data.DataReader)" usage="required">
                        <description>The Reader object which converts the data
                        object into a block of apf.data.Records.</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description>The function into which to pass the block of apf.data.records.
                            The function must be passed &lt;ul&gt;
                            &lt;li&gt;The Record block object&lt;/li&gt;
                            &lt;li&gt;The &quot;arg&quot; argument from the load function&lt;/li&gt;
                            &lt;li&gt;A boolean success indicator&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope in which to call the callback</description>
                    </parameter>
                    <parameter name="arg" type="Object" usage="required">
                        <description>An optional argument which is passed to the callback as its second parameter.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.Node" superclass="apf.util.Observable">
        <description></description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="attributes" type="Object" usage="required">
                        <description>The attributes/config for the node</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="attributes" type="Object" scope="instance" access="read-write">
                <description>The attributes supplied for the node. You can use this property to access any custom attributes you supplied.</description>
            </property>
            <property name="id" type="String" scope="instance" access="read-write">
                <description>The node id.</description>
            </property>
            <property name="childNodes" type="Array" scope="instance" access="read-write">
                <description>All child nodes of this node.</description>
            </property>
            <property name="parentNode" type="Node" scope="instance" access="read-write">
                <description>The parent node for this node.</description>
            </property>
            <property name="firstChild" type="Node" scope="instance" access="read-write">
                <description>The first direct child node of this node, or null if this node has no child nodes.</description>
            </property>
            <property name="lastChild" type="Node" scope="instance" access="read-write">
                <description>The last direct child node of this node, or null if this node has no child nodes.</description>
            </property>
            <property name="previousSibling" type="Node" scope="instance" access="read-write">
                <description>The node immediately preceding this node in the tree, or null if there is no sibling node.</description>
            </property>
            <property name="nextSibling" type="Node" scope="instance" access="read-write">
                <description>The node immediately following this node in the tree, or null if there is no sibling node.</description>
            </property>
        </properties>
        <methods>
            <method name="isLeaf" scope="instance">
                <description>Returns true if this node is a leaf</description>
                <parameters/>
            </method>
            <method name="isLast" scope="instance">
                <description>Returns true if this node is the last child of its parent</description>
                <parameters/>
            </method>
            <method name="isFirst" scope="instance">
                <description>Returns true if this node is the first child of its parent</description>
                <parameters/>
            </method>
            <method name="hasChildNodes" scope="instance">
                <description>Returns true if this node has one or more child nodes, else false.</description>
                <parameters/>
            </method>
            <method name="isExpandable" scope="instance">
                <description>Returns true if this node has one or more child nodes, or if the &lt;tt&gt;expandable&lt;/tt&gt;
                node attribute is explicitly specified as true (see &lt;a ext:cls=&quot;apf.data.Node&quot; ext:member=&quot;attributes&quot; href=&quot;output/apf.data.Node.html#attributes&quot;&gt;attributes&lt;/a&gt;), otherwise returns false.</description>
                <parameters/>
            </method>
            <method name="appendChild" scope="instance">
                <description>Insert node(s) as the last child node of this node.</description>
                <parameters>
                    <parameter name="node" type="Node/Array" usage="required">
                        <description>The node or Array of nodes to append</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeChild" scope="instance">
                <description>Removes a child node from this node.</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description>The node to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertBefore" scope="instance">
                <description>Inserts the first node before the second node in this nodes childNodes collection.</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description>The node to insert</description>
                    </parameter>
                    <parameter name="refNode" type="Node" usage="required">
                        <description>The node to insert before (if null the node is appended)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Removes this node from it's parent</description>
                <parameters/>
            </method>
            <method name="item" scope="instance">
                <description>Returns the child node at the specified index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="replaceChild" scope="instance">
                <description>Replaces one child node in this node with another.</description>
                <parameters>
                    <parameter name="newChild" type="Node" usage="required">
                        <description>The replacement node</description>
                    </parameter>
                    <parameter name="oldChild" type="Node" usage="required">
                        <description>The node to replace</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOf" scope="instance">
                <description>Returns the index of a child node</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getOwnerTree" scope="instance">
                <description>Returns the tree this node is in.</description>
                <parameters/>
            </method>
            <method name="getDepth" scope="instance">
                <description>Returns depth of this node (the root node has a depth of 0)</description>
                <parameters/>
            </method>
            <method name="getPath" scope="instance">
                <description>Returns the path for this node. The path can be used to expand or select this node programmatically.</description>
                <parameters>
                    <parameter name="attr" type="String" usage="optional">
                        <description>(optional) The attr to use for the path (defaults to the node's id)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="bubble" scope="instance">
                <description>Bubbles up the tree from this node, calling the specified function with each node. The scope (&lt;i&gt;this&lt;/i&gt;) of
                    function call will be the scope provided or the current node. The arguments to the function
                    will be the args provided or the current node. If the function returns false at any point,
                the bubble is stopped.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to current node)</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) The args to call the function with (default to passing the current node)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="cascade" scope="instance">
                <description>Cascades down the tree from this node, calling the specified function with each node. The scope (&lt;i&gt;this&lt;/i&gt;) of
                    function call will be the scope provided or the current node. The arguments to the function
                    will be the args provided or the current node. If the function returns false at any point,
                the cascade is stopped on that branch.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to current node)</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) The args to call the function with (default to passing the current node)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="eachChild" scope="instance">
                <description>Iterates the child nodes of this node, calling the specified function with each node. The scope (&lt;i&gt;this&lt;/i&gt;) of
                    function call will be the scope provided or the current node. The arguments to the function
                    will be the args provided or the current node. If the function returns false at any point,
                the iteration stops.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to current node)</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) The args to call the function with (default to passing the current node)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findChild" scope="instance">
                <description>Finds the first child that has the attribute with the specified value.</description>
                <parameters>
                    <parameter name="attribute" type="String" usage="required">
                        <description>The attribute name</description>
                    </parameter>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to search for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findChildBy" scope="instance">
                <description>Finds the first child by a custom function. The child matches if the function passed
                returns true.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="sort" scope="instance">
                <description>Sorts this nodes children using the supplied sort function</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="contains" scope="instance">
                <description>Returns true if this node is an ancestor (at any point) of the passed node.</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="isAncestor" scope="instance">
                <description>Returns true if the passed node is an ancestor (at any point) of this node.</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.Record" superclass="Object">
        <description>Instances of this class encapsulate both Record &lt;em&gt;definition&lt;/em&gt; information, and Record
            &lt;em&gt;value&lt;/em&gt; information for use in &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; objects, or any code which needs
            to access Records cached in an &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; object.&lt;br&gt;
            &lt;p&gt;
            Constructors for this class are generated by passing an Array of field definition objects to &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;create&lt;/a&gt;.
            Instances are usually only created by &lt;a ext:cls=&quot;apf.data.Reader&quot; href=&quot;output/apf.data.Reader.html&quot;&gt;apf.data.Reader&lt;/a&gt; implementations when processing unformatted data
            objects.&lt;br&gt;
            &lt;p&gt;
        Record objects generated by this constructor inherit all the methods of apf.data.Record listed below.</description>
        <constructors>
            <constructor scope="instance">
                <description>This constructor should not be used to create Record objects. Instead, use the constructor generated by
                &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;create&lt;/a&gt;. The parameters are the same.</description>
                <parameters>
                    <parameter name="data" type="Array" usage="required">
                        <description>An object, the properties of which provide values for the new Record's fields.</description>
                    </parameter>
                    <parameter name="id" type="Object" usage="optional">
                        <description>(Optional) The id of the Record. This id should be unique, and is used by the
                            &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; object which owns the Record to index its collection of Records. If
                        not specified an integer id is generated.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="data" type="Object" scope="instance" access="read-write">
                <description>An object hash representing the data for this Record.</description>
            </property>
            <property name="id" type="Object" scope="instance" access="read-write">
                <description>
                The unique ID of the Record as specified at construction time.</description>
            </property>
            <property name="dirty" type="Boolean" scope="instance" access="read-write">
                <description>
                Readonly flag - true if this Record has been modified.</description>
            </property>
            <property name="modified" type="Object" scope="instance" access="read-write">
                <description>This object contains a key and value storing the original values of all modified fields or is null if no fields have been modified.</description>
            </property>
        </properties>
        <methods>
            <method name="create" scope="static">
                <description>&amp;lt;static&amp;gt; Generate a constructor for a specific Record layout.</description>
                <parameters>
                    <parameter name="o" type="Array" usage="optional">
                        <description>An Array of field definition objects which specify field names, and optionally,
                            data types, and a mapping for an &lt;a ext:cls=&quot;apf.data.Reader&quot; href=&quot;output/apf.data.Reader.html&quot;&gt;apf.data.Reader&lt;/a&gt; to extract the field's value from a data object.
                            Each field definition object may contain the following properties: &lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;name&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;The name by which the field is referenced within the Record. This is referenced by,
                            for example, the &lt;em&gt;dataIndex&lt;/em&gt; property in column definition objects passed to &lt;a ext:cls=&quot;apf.grid.ColumnModel&quot; href=&quot;output/apf.grid.ColumnModel.html&quot;&gt;apf.grid.ColumnModel&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;mapping&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A path specification for use by the &lt;a ext:cls=&quot;apf.data.Reader&quot; href=&quot;output/apf.data.Reader.html&quot;&gt;apf.data.Reader&lt;/a&gt; implementation
                            that is creating the Record to access the data value from the data object. If an &lt;a ext:cls=&quot;apf.data.JsonReader&quot; href=&quot;output/apf.data.JsonReader.html&quot;&gt;apf.data.JsonReader&lt;/a&gt;
                            is being used, then this is a string containing the javascript expression to reference the data relative to
                            the Record item's root. If an &lt;a ext:cls=&quot;apf.data.XmlReader&quot; href=&quot;output/apf.data.XmlReader.html&quot;&gt;apf.data.XmlReader&lt;/a&gt; is being used, this is an &lt;a ext:cls=&quot;apf.DomQuery&quot; href=&quot;output/apf.DomQuery.html&quot;&gt;apf.DomQuery&lt;/a&gt; path
                            to the data item relative to the Record element. If the mapping expression is the same as the field name,
                            this may be omitted.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;type&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) The data type for conversion to displayable value. Possible values are
                            &lt;ul&gt;&lt;li&gt;auto (Default, implies no conversion)&lt;/li&gt;
                            &lt;li&gt;string&lt;/li&gt;
                            &lt;li&gt;int&lt;/li&gt;
                            &lt;li&gt;float&lt;/li&gt;
                            &lt;li&gt;boolean&lt;/li&gt;
                            &lt;li&gt;date&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;sortType&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A member of &lt;a ext:cls=&quot;apf.data.SortTypes&quot; href=&quot;output/apf.data.SortTypes.html&quot;&gt;apf.data.SortTypes&lt;/a&gt;.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;sortDir&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) Initial direction to sort. &quot;ASC&quot; or &quot;DESC&quot;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;convert&lt;/b&gt; : Function&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A function which converts the value provided
                            by the Reader into an object that will be stored in the Record. It is passed the
                            following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;v&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;The data value as read by the Reader.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;rec&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;The data object containing the row as read by the Reader.
                            Depending on Reader type, this could be an Array, an object, or an XML element.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;dateFormat&lt;/b&gt; : String&lt;div class=&quot;sub-desc&quot;&gt;(Optional) A format String for the Date.parseDate function.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;defaultValue&lt;/b&gt; : Mixed&lt;div class=&quot;sub-desc&quot;&gt;(Optional) The default value passed to the Reader when the field does
                            not exist in the data object (i.e. undefined). (defaults to &quot;&quot;)&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;br&gt;usage:&lt;br&gt;&lt;pre&gt;&lt;code&gt;var TopicRecord = apf.data.Record.create([
                            {name: 'title', mapping: 'topic_title'},
                            {name: 'author', mapping: 'username'},
                            {name: 'totalPosts', mapping: 'topic_replies', type: 'int'},
                            {name: 'lastPost', mapping: 'post_time', type: 'date'},
                            {name: 'lastPoster', mapping: 'user2'},
                            {name: 'excerpt', mapping: 'post_text'}
                            ]);

                            var myNewRecord = new TopicRecord({
                            topic_title: 'Do my job please',
                            username: 'noobie',
                            topic_replies: 1,
                            post_time: new Date(),
                            user2: 'Animal',
                            post_text: 'No way dude!'
                            });
                            myStore.add(myNewRecord);&lt;/code&gt;&lt;/pre&gt;
                            &lt;p&gt;In the simplest case, if no properties other than &lt;tt&gt;name&lt;/tt&gt; are required, a field definition
                        may consist of just a field name string.&lt;/p&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="set" scope="instance">
                <description>Set the named field to the specified value.</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The name of the field to set.</description>
                    </parameter>
                    <parameter name="value" type="Object" usage="required">
                        <description>The value to set the field to.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="get" scope="instance">
                <description>Get the value of the named field.</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The name of the field to get the value of.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beginEdit" scope="instance">
                <description>Begin an edit. While in edit mode, no events are relayed to the containing store.</description>
                <parameters/>
            </method>
            <method name="cancelEdit" scope="instance">
                <description>Cancels all changes made in the current edit operation.</description>
                <parameters/>
            </method>
            <method name="endEdit" scope="instance">
                <description>End an edit. If any data was modified, the containing store is notified.</description>
                <parameters/>
            </method>
            <method name="reject" scope="instance">
                <description>Usually called by the &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; which owns the Record.
                    Rejects all changes made to the Record since either creation, or the last commit operation.
                    Modified fields are reverted to their original values.
                    &lt;p&gt;
                    Developers should subscribe to the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;update&quot; href=&quot;output/apf.data.Store.html#update&quot;&gt;apf.data.Store.update&lt;/a&gt; event to have their code notified
                of reject operations.</description>
                <parameters>
                    <parameter name="silent" type="Boolean" usage="optional">
                        <description>(optional) True to skip notification of the owning store of the change (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="commit" scope="instance">
                <description>Usually called by the &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; which owns the Record.
                    Commits all changes made to the Record since either creation, or the last commit operation.
                    &lt;p&gt;
                    Developers should subscribe to the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;update&quot; href=&quot;output/apf.data.Store.html#update&quot;&gt;apf.data.Store.update&lt;/a&gt; event to have their code notified
                of commit operations.</description>
                <parameters>
                    <parameter name="silent" type="Boolean" usage="optional">
                        <description>(optional) True to skip notification of the owning store of the change (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getChanges" scope="instance">
                <description>Gets a hash of only the fields that have been modified since this Record was created or commited.</description>
                <parameters/>
            </method>
            <method name="copy" scope="instance">
                <description>Creates a copy of this Record.</description>
                <parameters>
                    <parameter name="id" type="String" usage="optional">
                        <description>(optional) A new Record id if you don't want to use this Record's id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isModified" scope="instance">
                <description>Returns true if the field passed has been modified since the load or last commit.</description>
                <parameters>
                    <parameter name="fieldName" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.ScriptTagProxy" superclass="apf.data.DataProxy">
        <description>An implementation of apf.data.DataProxy that reads a data object from a URL which may be in a domain
            other than the originating domain of the running page.&lt;br&gt;
            &lt;p&gt;
            &lt;b&gt;Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
            of the running page, you must use this class, rather than HttpProxy.&lt;/b&gt;&lt;br&gt;
            &lt;p&gt;
            The content passed back from a server resource requested by a ScriptTagProxy &lt;b&gt;must&lt;/b&gt; be executable JavaScript
            source code because it is used as the source inside a &amp;lt;script&gt; tag.&lt;br&gt;
            &lt;p&gt;
            In order for the browser to process the returned data, the server must wrap the data object
            with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
            Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
            depending on whether the callback name was passed:
            &lt;p&gt;
            &lt;pre&gt;&lt;code&gt;boolean scriptTag = false;
            String cb = request.getParameter(&quot;callback&quot;);
            if (cb != null) {
            scriptTag = true;
            response.setContentType(&quot;text/javascript&quot;);
            } else {
            response.setContentType(&quot;application/x-json&quot;);
            }
            Writer out = response.getWriter();
            if (scriptTag) {
            out.write(cb + &quot;(&quot;);
            }
            out.print(dataBlock.toJsonString());
            if (scriptTag) {
            out.write(&quot;);&quot;);
        }&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A configuration object.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="load" scope="instance">
                <description>Load data from the configured URL, read the data object into
                    a block of apf.data.Records using the passed apf.data.DataReader implementation, and
                process that block using the passed callback.</description>
                <parameters>
                    <parameter name="params" type="Object" usage="required">
                        <description>An object containing properties which are to be used as HTTP parameters
                        for the request to the remote server.</description>
                    </parameter>
                    <parameter name="reader" type="apf.data.DataReader" usage="required">
                        <description>The Reader object which converts the data
                        object into a block of apf.data.Records.</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description>The function into which to pass the block of apf.data.Records.
                            The function must be passed &lt;ul&gt;
                            &lt;li&gt;The Record block object&lt;/li&gt;
                            &lt;li&gt;The &quot;arg&quot; argument from the load function&lt;/li&gt;
                            &lt;li&gt;A boolean success indicator&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope in which to call the callback</description>
                    </parameter>
                    <parameter name="arg" type="Object" usage="required">
                        <description>An optional argument which is passed to the callback as its second parameter.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="abort" scope="instance">
                <description>Abort the current server request.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.data.SimpleStore" superclass="apf.data.Store">
        <description>Small helper class to make creating Stores from Array data easier.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.data.SortTypes" superclass="Object">
        <description>&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="stripTagsRE" type="RegExp" scope="instance" access="read-write">
                <description>The regular expression used to strip tags</description>
            </property>
        </properties>
        <methods>
            <method name="none" scope="instance">
                <description>Default sort that does nothing</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="asText" scope="instance">
                <description>Strips all HTML tags to sort on text only</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="asUCText" scope="instance">
                <description>Strips all HTML tags to sort on text only - Case insensitive</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="asUCString" scope="instance">
                <description>Case insensitive string</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="asDate" scope="instance">
                <description>Date sorting</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="asFloat" scope="instance">
                <description>Float sorting</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="asInt" scope="instance">
                <description>Integer sorting</description>
                <parameters>
                    <parameter name="s" type="Mixed" usage="required">
                        <description>The value being converted</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.Store" superclass="apf.util.Observable">
        <description>The Store class encapsulates a client side cache of &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;Record&lt;/a&gt;
            objects which provide input data for Components such as the &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; href=&quot;output/apf.grid.GridPanel.html&quot;&gt;GridPanel&lt;/a&gt;,
            the &lt;a ext:cls=&quot;apf.form.ComboBox&quot; href=&quot;output/apf.form.ComboBox.html&quot;&gt;ComboBox&lt;/a&gt;, or the &lt;a ext:cls=&quot;apf.DataView&quot; href=&quot;output/apf.DataView.html&quot;&gt;DataView&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;A Store object uses its &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;proxy&quot; href=&quot;output/apf.data.Store.html#proxy&quot;&gt;configured&lt;/a&gt; implementation of &lt;a ext:cls=&quot;apf.data.DataProxy&quot; href=&quot;output/apf.data.DataProxy.html&quot;&gt;DataProxy&lt;/a&gt;
            to access a data object unless you call &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;loadData&quot; href=&quot;output/apf.data.Store.html#loadData&quot;&gt;loadData&lt;/a&gt; directly and pass in your data.&lt;/p&gt;
            &lt;p&gt;A Store object has no knowledge of the format of the data returned by the Proxy.&lt;/p&gt;
            &lt;p&gt;A Store object uses its &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;reader&quot; href=&quot;output/apf.data.Store.html#reader&quot;&gt;configured&lt;/a&gt; implementation of &lt;a ext:cls=&quot;apf.data.DataReader&quot; href=&quot;output/apf.data.DataReader.html&quot;&gt;DataReader&lt;/a&gt;
            to create &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;Record&lt;/a&gt; instances from the data object. These Records
        are cached and made available through accessor functions.&lt;/p&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Store.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A config object containing the objects needed for the Store to access data,
                        and read the data into Records.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="baseParams" type="Object" scope="instance" access="read-write">
                <description>An object containing properties which are used as parameters on any HTTP request.
                This property can be changed after creating the Store to send different parameters.</description>
            </property>
            <property name="lastOptions" type="Object" scope="instance" access="read-write">
                <description>Contains the last options object used as the parameter to the load method. See &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;load&quot; href=&quot;output/apf.data.Store.html#load&quot;&gt;load&lt;/a&gt;
                    for the details of what this may contain. This may be useful for accessing any params which
                were used to load the current Record cache.</description>
            </property>
        </properties>
        <methods>
            <method name="add" scope="instance">
                <description>Add Records to the Store and fires the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;add&quot; href=&quot;output/apf.data.Store.html#add&quot;&gt;add&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="records" type="apf.data.Record[]" usage="required">
                        <description>An Array of apf.data.Record objects to add to the cache.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addSorted" scope="instance">
                <description>(Local sort only) Inserts the passed Record into the Store at the index where it
                should go based on the current sort information.</description>
                <parameters>
                    <parameter name="record" type="apf.data.Record" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Remove a Record from the Store and fires the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;remove&quot; href=&quot;output/apf.data.Store.html#remove&quot;&gt;remove&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="record" type="apf.data.Record" usage="required">
                        <description>Th apf.data.Record object to remove from the cache.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeAll" scope="instance">
                <description>Remove all Records from the Store and fires the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;clear&quot; href=&quot;output/apf.data.Store.html#clear&quot;&gt;clear&lt;/a&gt; event.</description>
                <parameters/>
            </method>
            <method name="insert" scope="instance">
                <description>Inserts Records into the Store at the given index and fires the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;add&quot; href=&quot;output/apf.data.Store.html#add&quot;&gt;add&lt;/a&gt; event.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The start index at which to insert the passed Records.</description>
                    </parameter>
                    <parameter name="records" type="apf.data.Record[]" usage="required">
                        <description>An Array of apf.data.Record objects to add to the cache.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOf" scope="instance">
                <description>Get the index within the cache of the passed Record.</description>
                <parameters>
                    <parameter name="record" type="apf.data.Record" usage="required">
                        <description>The apf.data.Record object to find.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOfId" scope="instance">
                <description>Get the index within the cache of the Record with the passed id.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the Record to find.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getById" scope="instance">
                <description>Get the Record with the specified id.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the Record to find.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getAt" scope="instance">
                <description>Get the Record at the specified index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index of the Record to find.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRange" scope="instance">
                <description>Returns a range of Records between specified indices.</description>
                <parameters>
                    <parameter name="startIndex" type="Number" usage="optional">
                        <description>(optional) The starting index (defaults to 0)</description>
                    </parameter>
                    <parameter name="endIndex" type="Number" usage="optional">
                        <description>(optional) The ending index (defaults to the last Record in the Store)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="load" scope="instance">
                <description>Loads the Record cache from the configured Proxy using the configured Reader.
                    &lt;p&gt;If using remote paging, then the first load call must specify the &lt;tt&gt;start&lt;/tt&gt;
                    and &lt;tt&gt;limit&lt;/tt&gt; properties in the options.params property to establish the initial
                    position within the dataset, and the number of Records to cache on each read from the Proxy.&lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;It is important to note that for remote data sources, loading is asynchronous,
                    and this call will return before the new data has been loaded. Perform any post-processing
                in a callback function, or in a &quot;load&quot; event handler.&lt;/b&gt;&lt;/p&gt;</description>
                <parameters>
                    <parameter name="options" type="Object" usage="required">
                        <description>An object containing properties which control loading options:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;params&lt;/b&gt; :Object&lt;p class=&quot;sub-desc&quot;&gt;An object containing properties to pass as HTTP parameters to a remote data source.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;callback&lt;/b&gt; : Function&lt;p class=&quot;sub-desc&quot;&gt;A function to be called after the Records have been loaded. The callback is
                            passed the following arguments:&lt;ul&gt;
                            &lt;li&gt;r : apf.data.Record[]&lt;/li&gt;
                            &lt;li&gt;options: Options object from the load call&lt;/li&gt;
                            &lt;li&gt;success: Boolean success indicator&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;scope&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;Scope with which to call the callback (defaults to the Store object)&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;add&lt;/b&gt; : Boolean&lt;p class=&quot;sub-desc&quot;&gt;Indicator to append loaded records rather than replace the current cache.&lt;/p&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="reload" scope="instance">
                <description>Reloads the Record cache from the configured Proxy using the configured Reader and
                the options from the last load operation performed.</description>
                <parameters>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) An object containing properties which may override the options
                            used in the last load operation. See &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;load&quot; href=&quot;output/apf.data.Store.html#load&quot;&gt;load&lt;/a&gt; for details (defaults to null, in which case
                        the most recently used options are reused).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="loadData" scope="instance">
                <description>Loads data from a passed data block and fires the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;load&quot; href=&quot;output/apf.data.Store.html#load&quot;&gt;load&lt;/a&gt; event. A Reader which understands the format of the data
                must have been configured in the constructor.</description>
                <parameters>
                    <parameter name="data" type="Object" usage="required">
                        <description>The data block from which to read the Records. The format of the data expected
                        is dependent on the type of Reader that is configured and should correspond to that Reader's readRecords parameter.</description>
                    </parameter>
                    <parameter name="append" type="Boolean" usage="optional">
                        <description>(Optional) True to append the new Records rather than replace the existing cache.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getCount" scope="instance">
                <description>Gets the number of cached records.
                    &lt;p&gt;If using paging, this may not be the total size of the dataset. If the data object
                    used by the Reader contains the dataset size, then the &lt;a ext:cls=&quot;apf.data.Store&quot; ext:member=&quot;getTotalCount&quot; href=&quot;output/apf.data.Store.html#getTotalCount&quot;&gt;getTotalCount&lt;/a&gt; function returns
                the dataset size.&lt;/p&gt;</description>
                <parameters/>
            </method>
            <method name="getTotalCount" scope="instance">
                <description>Gets the total number of records in the dataset as returned by the server.
                    &lt;p&gt;If using paging, for this to be accurate, the data object used by the Reader must contain
                the dataset size. For remote data sources, this is provided by a query on the server.&lt;/p&gt;</description>
                <parameters/>
            </method>
            <method name="getSortState" scope="instance">
                <description>Returns an object describing the current sort state of this Store.</description>
                <parameters/>
            </method>
            <method name="setDefaultSort" scope="instance">
                <description>Sets the default sort column and order to be used by the next load operation.</description>
                <parameters>
                    <parameter name="fieldName" type="String" usage="required">
                        <description>The name of the field to sort by.</description>
                    </parameter>
                    <parameter name="dir" type="String" usage="optional">
                        <description>(optional) The sort order, &quot;ASC&quot; or &quot;DESC&quot; (case-sensitive, defaults to &quot;ASC&quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="sort" scope="instance">
                <description>Sort the Records.
                    If remote sorting is used, the sort is performed on the server, and the cache is
                reloaded. If local sorting is used, the cache is sorted internally.</description>
                <parameters>
                    <parameter name="fieldName" type="String" usage="required">
                        <description>The name of the field to sort by.</description>
                    </parameter>
                    <parameter name="dir" type="String" usage="optional">
                        <description>(optional) The sort order, &quot;ASC&quot; or &quot;DESC&quot; (case-sensitive, defaults to &quot;ASC&quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Calls the specified function for each of the Records in the cache.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call. The Record is passed as the first parameter.
                        Returning &lt;tt&gt;false&lt;/tt&gt; aborts and exits the iteration.</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to call the function (defaults to the Record).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getModifiedRecords" scope="instance">
                <description>Gets all records modified since the last commit.  Modified records are persisted across load operations
                (e.g., during paging).</description>
                <parameters/>
            </method>
            <method name="sum" scope="instance">
                <description>Sums the value of &lt;i&gt;property&lt;/i&gt; for each record between start and end and returns the result.</description>
                <parameters>
                    <parameter name="property" type="String" usage="required">
                        <description>A field on your records</description>
                    </parameter>
                    <parameter name="start" type="Number" usage="required">
                        <description>The record index to start at (defaults to 0)</description>
                    </parameter>
                    <parameter name="end" type="Number" usage="required">
                        <description>The last record index to include (defaults to length - 1)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filter" scope="instance">
                <description>Filter the records by a specified property.</description>
                <parameters>
                    <parameter name="field" type="String" usage="required">
                        <description>A field on your records</description>
                    </parameter>
                    <parameter name="value" type="String/RegExp" usage="required">
                        <description>Either a string that the field
                        should begin with, or a RegExp to test against the field.</description>
                    </parameter>
                    <parameter name="anyMatch" type="Boolean" usage="optional">
                        <description>(optional) True to match any part not just the beginning</description>
                    </parameter>
                    <parameter name="caseSensitive" type="Boolean" usage="optional">
                        <description>(optional) True for case sensitive comparison</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filterBy" scope="instance">
                <description>Filter by a function. The specified function will be called for each
                    Record in this Store. If the function returns &lt;tt&gt;true&lt;/tt&gt; the Record is included,
                otherwise it is filtered out.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to be called. It will be passed the following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;record&lt;/b&gt; : apf.data.Record&lt;p class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;record&lt;/a&gt;
                            to test for filtering. Access field values using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;get&quot; href=&quot;output/apf.data.Record.html#get&quot;&gt;apf.data.Record.get&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;id&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;The ID of the Record passed.&lt;/p&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to this)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="query" scope="instance">
                <description>Query the records by a specified property.</description>
                <parameters>
                    <parameter name="field" type="String" usage="required">
                        <description>A field on your records</description>
                    </parameter>
                    <parameter name="value" type="String/RegExp" usage="required">
                        <description>Either a string that the field
                        should begin with, or a RegExp to test against the field.</description>
                    </parameter>
                    <parameter name="anyMatch" type="Boolean" usage="optional">
                        <description>(optional) True to match any part not just the beginning</description>
                    </parameter>
                    <parameter name="caseSensitive" type="Boolean" usage="optional">
                        <description>(optional) True for case sensitive comparison</description>
                    </parameter>
                </parameters>
            </method>
            <method name="queryBy" scope="instance">
                <description>Query the cached records in this Store using a filtering function. The specified function
                    will be called with each record in this Store. If the function returns &lt;tt&gt;true&lt;/tt&gt; the record is
                included in the results.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to be called. It will be passed the following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;record&lt;/b&gt; : apf.data.Record&lt;p class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;record&lt;/a&gt;
                            to test for filtering. Access field values using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;get&quot; href=&quot;output/apf.data.Record.html#get&quot;&gt;apf.data.Record.get&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;id&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;The ID of the Record passed.&lt;/p&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to this)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="find" scope="instance">
                <description>Finds the index of the first matching record in this store by a specific property/value.</description>
                <parameters>
                    <parameter name="property" type="String" usage="required">
                        <description>A property on your objects</description>
                    </parameter>
                    <parameter name="value" type="String/RegExp" usage="required">
                        <description>Either a string that the property value
                        should begin with, or a RegExp to test against the property.</description>
                    </parameter>
                    <parameter name="startIndex" type="Number" usage="optional">
                        <description>(optional) The index to start searching at</description>
                    </parameter>
                    <parameter name="anyMatch" type="Boolean" usage="optional">
                        <description>(optional) True to match any part of the string, not just the beginning</description>
                    </parameter>
                    <parameter name="caseSensitive" type="Boolean" usage="optional">
                        <description>(optional) True for case sensitive comparison</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findBy" scope="instance">
                <description>Find the index of the first matching Record in this Store by a function.
                If the function returns &lt;tt&gt;true&lt;/tt&gt; it is considered a match.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to be called. It will be passed the following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;record&lt;/b&gt; : apf.data.Record&lt;p class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;record&lt;/a&gt;
                            to test for filtering. Access field values using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;get&quot; href=&quot;output/apf.data.Record.html#get&quot;&gt;apf.data.Record.get&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;id&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;The ID of the Record passed.&lt;/p&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to this)</description>
                    </parameter>
                    <parameter name="startIndex" type="Number" usage="optional">
                        <description>(optional) The index to start searching at</description>
                    </parameter>
                </parameters>
            </method>
            <method name="collect" scope="instance">
                <description>Collects unique values for a particular dataIndex from this store.</description>
                <parameters>
                    <parameter name="dataIndex" type="String" usage="required">
                        <description>The property to collect</description>
                    </parameter>
                    <parameter name="allowNull" type="Boolean" usage="optional">
                        <description>(optional) Pass true to allow null, undefined or empty string values</description>
                    </parameter>
                    <parameter name="bypassFilter" type="Boolean" usage="optional">
                        <description>(optional) Pass true to collect from all records, even ones which are filtered</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearFilter" scope="instance">
                <description>Revert to a view of the Record cache with no filtering applied.</description>
                <parameters>
                    <parameter name="suppressEvent" type="Boolean" usage="required">
                        <description>If true the filter is cleared silently without notifying listeners</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isFiltered" scope="instance">
                <description>Returns true if this store is currently filtered</description>
                <parameters/>
            </method>
            <method name="commitChanges" scope="instance">
                <description>Commit all Records with outstanding changes. To handle updates for changes, subscribe to the
                Store's &quot;update&quot; event, and perform updating when the third parameter is apf.data.Record.COMMIT.</description>
                <parameters/>
            </method>
            <method name="rejectChanges" scope="instance">
                <description>Cancel outstanding changes on all changed records.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.data.Tree" superclass="apf.util.Observable">
        <description>Represents a tree data structure and bubbles all the events for its nodes. The nodes
        in the tree have most standard DOM functionality.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="root" type="Node" usage="optional">
                        <description>(optional) The root node</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="root" type="Node" scope="instance" access="read-write">
                <description>The root node for this tree</description>
            </property>
        </properties>
        <methods>
            <method name="getRootNode" scope="instance">
                <description>Returns the root node for this tree.</description>
                <parameters/>
            </method>
            <method name="setRootNode" scope="instance">
                <description>Sets the root node for this tree.</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getNodeById" scope="instance">
                <description>Gets a node in this tree by its id.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.data.XmlReader" superclass="apf.data.DataReader">
        <description>Data reader class to create an Array of &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; objects from an XML document
            based on mappings in a provided &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; constructor.&lt;br&gt;&lt;br&gt;
            &lt;p&gt;
            &lt;em&gt;Note that in order for the browser to parse a returned XML document, the Content-Type
            header in the HTTP response must be set to &quot;text/xml&quot; or &quot;application/xml&quot;.&lt;/em&gt;
            &lt;p&gt;
            Example code:
            &lt;pre&gt;&lt;code&gt;var Employee = apf.data.Record.create([
            {name: 'name', mapping: 'name'},     // &quot;mapping&quot; property not needed if it's the same as &quot;name&quot;
            {name: 'occupation'}                 // This field will use &quot;occupation&quot; as the mapping.
            ]);
            var myReader = new apf.data.XmlReader({
            totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional)
            record: &quot;row&quot;,           // The repeated element which contains row information
            id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional)
            }, Employee);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;
            This would consume an XML file like this:
            &lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &amp;lt;dataset&gt;
            &amp;lt;results&gt;2&amp;lt;/results&gt;
            &amp;lt;row&gt;
            &amp;lt;id&gt;1&amp;lt;/id&gt;
            &amp;lt;name&gt;Bill&amp;lt;/name&gt;
            &amp;lt;occupation&gt;Gardener&amp;lt;/occupation&gt;
            &amp;lt;/row&gt;
            &amp;lt;row&gt;
            &amp;lt;id&gt;2&amp;lt;/id&gt;
            &amp;lt;name&gt;Ben&amp;lt;/name&gt;
            &amp;lt;occupation&gt;Horticulturalist&amp;lt;/occupation&gt;
            &amp;lt;/row&gt;
        &amp;lt;/dataset&gt;&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new XmlReader.</description>
                <parameters>
                    <parameter name="meta" type="Object" usage="required">
                        <description>Metadata configuration options</description>
                    </parameter>
                    <parameter name="recordType" type="Object" usage="required">
                        <description>Either an Array of field definition objects as passed to
                        &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;, or a Record constructor object created using &lt;a ext:cls=&quot;apf.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/apf.data.Record.html#create&quot;&gt;apf.data.Record.create&lt;/a&gt;.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="xmlData" type="XMLDocument" scope="instance" access="read-write">
                <description>After any data loads/reads, the raw XML Document is available for further custom processing.</description>
            </property>
        </properties>
        <methods>
            <method name="read" scope="instance">
                <description>This method is only used by a DataProxy which has retrieved data from a remote server.</description>
                <parameters>
                    <parameter name="response" type="Object" usage="required">
                        <description>The XHR object which contains the parsed XML document. The response is expected
                        to contain a property called &lt;tt&gt;responseXML&lt;/tt&gt; which refers to an XML document object.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="readRecords" scope="instance">
                <description>Create a data block containing apf.data.Records from an XML document.</description>
                <parameters>
                    <parameter name="doc" type="Object" usage="required">
                        <description>A parsed XML document.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DD" superclass="apf.dd.DragDrop">
        <description>A DragDrop implementation where the linked element follows the
        mouse cursor during a drag.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the id of the linked element</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the group of related DragDrop items</description>
                    </parameter>
                    <parameter name="config" type="object" usage="required">
                        <description>an object containing configurable attributes
                            Valid properties for DD:
                        scroll</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="scroll" type="boolean" scope="instance" access="read-write">
                <description>When set to true, the utility automatically tries to scroll the browser
                    window when a drag and drop element is dragged near the viewport boundary.
                Defaults to true.</description>
            </property>
        </properties>
        <methods>
            <method name="autoOffset" scope="instance">
                <description>Sets the pointer offset to the distance between the linked element's top
                left corner and the location the element was clicked</description>
                <parameters>
                    <parameter name="iPageX" type="int" usage="required">
                        <description>the X coordinate of the click</description>
                    </parameter>
                    <parameter name="iPageY" type="int" usage="required">
                        <description>the Y coordinate of the click</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDelta" scope="instance">
                <description>Sets the pointer offset.  You can call this directly to force the
                    offset to be in a particular location (e.g., pass in 0,0 to set it
                to the center of the object)</description>
                <parameters>
                    <parameter name="iDeltaX" type="int" usage="required">
                        <description>the distance from the left</description>
                    </parameter>
                    <parameter name="iDeltaY" type="int" usage="required">
                        <description>the distance from the top</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDragElPos" scope="instance">
                <description>Sets the drag element to the location of the mousedown or click event,
                    maintaining the cursor location relative to the location on the element
                    that was clicked.  Override this if you want to place the element in a
                location other than where the cursor is.</description>
                <parameters>
                    <parameter name="iPageX" type="int" usage="required">
                        <description>the X coordinate of the mousedown or drag event</description>
                    </parameter>
                    <parameter name="iPageY" type="int" usage="required">
                        <description>the Y coordinate of the mousedown or drag event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="alignElWithMouse" scope="instance">
                <description>Sets the element to the location of the mousedown or click event,
                    maintaining the cursor location relative to the location on the element
                    that was clicked.  Override this if you want to place the element in a
                location other than where the cursor is.</description>
                <parameters>
                    <parameter name="el" type="HTMLElement" usage="required">
                        <description>the element to move</description>
                    </parameter>
                    <parameter name="iPageX" type="int" usage="required">
                        <description>the X coordinate of the mousedown or drag event</description>
                    </parameter>
                    <parameter name="iPageY" type="int" usage="required">
                        <description>the Y coordinate of the mousedown or drag event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="cachePosition" scope="instance">
                <description>Saves the most recent position so that we can reset the constraints and
                    tick marks on-demand.  We need to know this so that we can calculate the
                number of pixels the element is offset from its original position.</description>
                <parameters>
                    <parameter name="the" type="iPageX" usage="required">
                        <description>current x position (optional, this just makes it so we
                        don't have to look it up again)</description>
                    </parameter>
                    <parameter name="the" type="iPageY" usage="required">
                        <description>current y position (optional, this just makes it so we
                        don't have to look it up again)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="applyConfig" scope="instance">
                <description>Sets up config options specific to this class. Overrides
                    apf.dd.DragDrop, but all versions of this method through the
                inheritance chain are called</description>
                <parameters/>
            </method>
            <method name="b4MouseDown" scope="instance">
                <description>Event that fires prior to the onMouseDown event.  Overrides
                apf.dd.DragDrop.</description>
                <parameters/>
            </method>
            <method name="b4Drag" scope="instance">
                <description>Event that fires prior to the onDrag event.  Overrides
                apf.dd.DragDrop.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DDProxy" superclass="apf.dd.DD">
        <description>A DragDrop implementation that inserts an empty, bordered div into
            the document that follows the cursor during drag operations.  At the time of
            the click, the frame div is resized to the dimensions of the linked html
            element, and moved to the exact location of the linked element.
            References to the &quot;frame&quot; element refer to the single proxy element that
            was created to be dragged in place of all DDProxy elements on the
        page.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the id of the linked html element</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the group of related DragDrop objects</description>
                    </parameter>
                    <parameter name="config" type="object" usage="required">
                        <description>an object containing configurable attributes
                            Valid properties for DDProxy in addition to those in DragDrop:
                        resizeFrame, centerFrame, dragElId</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="DDProxy.dragElId" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; The default drag frame div id</description>
            </property>
            <property name="resizeFrame" type="boolean" scope="instance" access="read-write">
                <description>By default we resize the drag frame to be the same size as the element
                    we want to drag (this is to get the frame effect).  We can turn it off
                if we want a different behavior.</description>
            </property>
            <property name="centerFrame" type="boolean" scope="instance" access="read-write">
                <description>By default the frame is positioned exactly where the drag element is, so
                    we use the cursor offset provided by apf.dd.DD.  Another option that works only if
                    you do not have constraints on the obj is to have the drag frame centered
                around the cursor.  Set centerFrame to true for this effect.</description>
            </property>
        </properties>
        <methods>
            <method name="createFrame" scope="instance">
                <description>Creates the proxy element if it does not yet exist</description>
                <parameters/>
            </method>
            <method name="initFrame" scope="instance">
                <description>Initialization for the drag frame element.  Must be called in the
                constructor of all subclasses</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DDTarget" superclass="apf.dd.DragDrop">
        <description>A DragDrop implementation that does not move, but can be a drop
            target.  You would get the same result by simply omitting implementation
            for the event callbacks, but this way we reduce the processing cost of the
        event listener and the callbacks.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the id of the element that is a drop target</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the group of related DragDrop objects</description>
                    </parameter>
                    <parameter name="config" type="object" usage="required">
                        <description>an object containing configurable attributes
                            Valid properties for DDTarget in addition to those in
                            DragDrop:
                        none</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.dd.DragDrop" superclass="Object">
        <description>Defines the interface and base operation of items that that can be
            dragged or can be drop targets.  It was designed to be extended, overriding
            the event handlers for startDrag, onDrag, onDragOver and onDragOut.
            Up to three html elements can be associated with a DragDrop instance:
            &lt;ul&gt;
            &lt;li&gt;linked element: the element that is passed into the constructor.
            This is the element which defines the boundaries for interaction with
            other DragDrop objects.&lt;/li&gt;
            &lt;li&gt;handle element(s): The drag operation only occurs if the element that
            was clicked matches a handle element.  By default this is the linked
            element, but there are times that you will want only a portion of the
            linked element to initiate the drag operation, and the setHandleElId()
            method provides a way to define this.&lt;/li&gt;
            &lt;li&gt;drag element: this represents the element that would be moved along
            with the cursor during a drag operation.  By default, this is the linked
            element itself as in &lt;a ext:cls=&quot;apf.dd.DD&quot; href=&quot;output/apf.dd.DD.html&quot;&gt;apf.dd.DD&lt;/a&gt;.  setDragElId() lets you define
            a separate element that would be moved, as in &lt;a ext:cls=&quot;apf.dd.DDProxy&quot; href=&quot;output/apf.dd.DDProxy.html&quot;&gt;apf.dd.DDProxy&lt;/a&gt;.
            &lt;/li&gt;
            &lt;/ul&gt;
            This class should not be instantiated until the onload event to ensure that
            the associated elements are available.
            The following would define a DragDrop obj that would interact with any
            other DragDrop obj in the &quot;group1&quot; group:
            &lt;pre&gt;dd = new apf.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&lt;/pre&gt;
            Since none of the event handlers have been implemented, nothing would
            actually happen if you were to run the code above.  Normally you would
            override this class or one of the default implementations, but you can
            also override the methods you want on an instance of the class...
            &lt;pre&gt;dd.onDragDrop = function(e, id) {
            &amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);
        }&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>of the element that is linked to this instance</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the group of related DragDrop objects</description>
                    </parameter>
                    <parameter name="config" type="object" usage="required">
                        <description>an object containing configurable attributes
                            Valid properties for DragDrop:
                        padding, isTarget, maintainOffset, primaryButtonOnly</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="id" type="String" scope="instance" access="read-write">
                <description>The id of the element associated with this object.  This is what we
                    refer to as the &quot;linked element&quot; because the size and position of
                    this element is used to determine when the drag and drop objects have
                interacted.</description>
            </property>
            <property name="config" type="object" scope="instance" access="read-write">
                <description>Configuration attributes passed into the constructor</description>
            </property>
            <property name="invalidHandleTypes" type="Object" scope="instance" access="read-write">
                <description>An object who's property names identify HTML tags to be considered invalid as drag handles.
                    A non-null property value identifies the tag as invalid. Defaults to the
                    following value which prevents drag operations from being initiated by &amp;lt;a&gt; elements:&lt;pre&gt;&lt;code&gt;{
                    A: &quot;A&quot;
                }&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="invalidHandleIds" type="Object" scope="instance" access="read-write">
                <description>An object who's property names identify the IDs of elements to be considered invalid as drag handles.
                    A non-null property value identifies the ID as invalid. For example, to prevent
                    dragging from being initiated on element ID &quot;foo&quot;, use:&lt;pre&gt;&lt;code&gt;{
                    foo: true
                }&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="invalidHandleClasses" type="Array" scope="instance" access="read-write">
                <description>An Array of CSS class names for elements to be considered in valid as drag handles.</description>
            </property>
            <property name="groups" type="object" scope="instance" access="read-write">
                <description>The group defines a logical collection of DragDrop objects that are
                    related.  Instances only get events when interacting with other
                    DragDrop object in the same group.  This lets us define multiple
                groups using a single DragDrop subclass if we want.</description>
            </property>
            <property name="isTarget" type="boolean" scope="instance" access="read-write">
                <description>By default, all insances can be a drop target.  This can be disabled by
                setting isTarget to false.</description>
            </property>
            <property name="padding" type="int[]" scope="instance" access="read-write">
                <description>The padding configured for this drag and drop object for calculating
                the drop zone intersection with this object.</description>
            </property>
            <property name="maintainOffset" type="boolean" scope="instance" access="read-write">
                <description>Maintain offsets when we resetconstraints.  Set to true when you want
                    the position of the element relative to its parent to stay the same
                when the page changes</description>
            </property>
            <property name="xTicks" type="int[]" scope="instance" access="read-write">
                <description>Array of pixel locations the element will snap to if we specified a
                    horizontal graduation/interval.  This array is generated automatically
                when you define a tick interval.</description>
            </property>
            <property name="yTicks" type="int[]" scope="instance" access="read-write">
                <description>Array of pixel locations the element will snap to if we specified a
                    vertical graduation/interval.  This array is generated automatically
                when you define a tick interval.</description>
            </property>
            <property name="primaryButtonOnly" type="boolean" scope="instance" access="read-write">
                <description>By default the drag and drop instance will only respond to the primary
                    button click (left button for a right-handed mouse).  Set to true to
                    allow drag and drop to start with any mouse click that is propogated
                by the browser</description>
            </property>
            <property name="available" type="boolean" scope="instance" access="read-write">
                <description>The availabe property is false until the linked dom element is accessible.</description>
            </property>
            <property name="hasOuterHandles" type="boolean" scope="instance" access="read-write">
                <description>By default, drags can only be initiated if the mousedown occurs in the
                    region the linked element is.  This is done in part to work around a
                    bug in some browsers that mis-report the mousedown if the previous
                    mouseup happened outside of the window.  This property is set to true
                if outer handles are defined.</description>
            </property>
            <property name="defaultPadding" type="Object" scope="instance" access="read-write">
                <description>Provides default constraint padding to &quot;constrainTo&quot; elements (defaults to {left: 0, right:0, top:0, bottom:0}).</description>
            </property>
        </properties>
        <methods>
            <method name="lock" scope="instance">
                <description>Lock this instance</description>
                <parameters/>
            </method>
            <method name="unlock" scope="instance">
                <description>Unlock this instace</description>
                <parameters/>
            </method>
            <method name="startDrag" scope="instance">
                <description>Abstract method called after a drag/drop object is clicked
                and the drag or mousedown time thresholds have beeen met.</description>
                <parameters>
                    <parameter name="X" type="int" usage="required">
                        <description>click location</description>
                    </parameter>
                    <parameter name="Y" type="int" usage="required">
                        <description>click location</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onDrag" scope="instance">
                <description>Abstract method called during the onMouseMove event while dragging an
                object.</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mousemove event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onDragEnter" scope="instance">
                <description>Abstract method called when this element fist begins hovering over
                another DragDrop obj</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mousemove event</description>
                    </parameter>
                    <parameter name="id" type="String|DragDrop[]" usage="required">
                        <description>In POINT mode, the element
                            id this is hovering over. In INTERSECT mode, an array of one or more
                        dragdrop items being hovered over.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onDragOver" scope="instance">
                <description>Abstract method called when this element is hovering over another
                DragDrop obj</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mousemove event</description>
                    </parameter>
                    <parameter name="id" type="String|DragDrop[]" usage="required">
                        <description>In POINT mode, the element
                            id this is hovering over. In INTERSECT mode, an array of dd items
                        being hovered over.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onDragOut" scope="instance">
                <description>Abstract method called when we are no longer hovering over an element</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mousemove event</description>
                    </parameter>
                    <parameter name="id" type="String|DragDrop[]" usage="required">
                        <description>In POINT mode, the element
                            id this was hovering over. In INTERSECT mode, an array of dd items
                        that the mouse is no longer over.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onDragDrop" scope="instance">
                <description>Abstract method called when this item is dropped on another DragDrop
                obj</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mouseup event</description>
                    </parameter>
                    <parameter name="id" type="String|DragDrop[]" usage="required">
                        <description>In POINT mode, the element
                            id this was dropped on. In INTERSECT mode, an array of dd items this
                        was dropped on.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onInvalidDrop" scope="instance">
                <description>Abstract method called when this item is dropped on an area with no
                drop target</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mouseup event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="endDrag" scope="instance">
                <description>Fired when we are done dragging the object</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mouseup event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onMouseDown" scope="instance">
                <description>Event handler that fires when a drag/drop obj gets a mousedown</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mousedown event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onMouseUp" scope="instance">
                <description>Event handler that fires when a drag/drop obj gets a mouseup</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the mouseup event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onAvailable" scope="instance">
                <description>Override the onAvailable method to do what is needed after the initial
                position was determined.</description>
                <parameters/>
            </method>
            <method name="constrainTo" scope="instance">
                <description>Initializes the drag drop object's constraints to restrict movement to a certain element.
                    Usage:&#13;
                    &lt;pre&gt;&lt;code&gt;var dd = new apf.dd.DDProxy(&quot;dragDiv1&quot;, &quot;proxytest&quot;,
                    { dragElId: &quot;existingProxyDiv&quot; });
                    dd.startDrag = function(){
                    this.constrainTo(&quot;parent-id&quot;);
                    };&lt;/code&gt;&lt;/pre&gt;
                    Or you can initalize it using the &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; object:&#13;
                    &lt;pre&gt;&lt;code&gt;apf.get(&quot;dragDiv1&quot;).initDDProxy(&quot;proxytest&quot;, {dragElId: &quot;existingProxyDiv&quot;}, {
                    startDrag : function(){
                    this.constrainTo(&quot;parent-id&quot;);
                    }
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="constrainTo" type="Mixed" usage="required">
                        <description>The element to constrain to.</description>
                    </parameter>
                    <parameter name="pad" type="Object/Number" usage="optional">
                        <description>(optional) Pad provides a way to specify &quot;padding&quot; of the constraints,
                            and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or
                        an object containing the sides to pad. For example: {right:10, bottom:10}</description>
                    </parameter>
                    <parameter name="inContent" type="Boolean" usage="optional">
                        <description>(optional) Constrain the draggable in the content box of the element (inside padding and borders)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getEl" scope="instance">
                <description>Returns a reference to the linked element</description>
                <parameters/>
            </method>
            <method name="getDragEl" scope="instance">
                <description>Returns a reference to the actual element to drag.  By default this is
                    the same as the html element, but it can be assigned to another
                element. An example of this can be found in apf.dd.DDProxy</description>
                <parameters/>
            </method>
            <method name="init" scope="instance">
                <description>Sets up the DragDrop object.  Must be called in the constructor of any
                apf.dd.DragDrop subclass</description>
                <parameters>
                    <parameter name="the" type="id" usage="required">
                        <description>id of the linked element</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the group of related items</description>
                    </parameter>
                    <parameter name="config" type="object" usage="required">
                        <description>configuration attributes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="initTarget" scope="instance">
                <description>Initializes Targeting functionality only... the object does not
                get a mousedown handler.</description>
                <parameters>
                    <parameter name="the" type="id" usage="required">
                        <description>id of the linked element</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the group of related items</description>
                    </parameter>
                    <parameter name="config" type="object" usage="required">
                        <description>configuration attributes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="applyConfig" scope="instance">
                <description>Applies the configuration parameters that were passed into the constructor.
                    This is supposed to happen at each level through the inheritance chain.  So
                    a DDProxy implentation will execute apply config on DDProxy, DD, and
                    DragDrop in order to get all of the parameters that are available in
                each object.</description>
                <parameters/>
            </method>
            <method name="setPadding" scope="instance">
                <description>Configures the padding for the target zone in px.  Effectively expands
                    (or reduces) the virtual object size for targeting calculations.
                    Supports css-style shorthand; if only one parameter is passed, all sides
                    will have that padding, and if only two are passed, the top and bottom
                will have the first param, the left and right the second.</description>
                <parameters>
                    <parameter name="iTop" type="int" usage="required">
                        <description>Top pad</description>
                    </parameter>
                    <parameter name="iRight" type="int" usage="required">
                        <description>Right pad</description>
                    </parameter>
                    <parameter name="iBot" type="int" usage="required">
                        <description>Bot pad</description>
                    </parameter>
                    <parameter name="iLeft" type="int" usage="required">
                        <description>Left pad</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setInitialPosition" scope="instance">
                <description>Stores the initial placement of the linked element.</description>
                <parameters>
                    <parameter name="diffX" type="int" usage="required">
                        <description>the X offset, default 0</description>
                    </parameter>
                    <parameter name="diffY" type="int" usage="required">
                        <description>the Y offset, default 0</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addToGroup" scope="instance">
                <description>Add this instance to a group of related drag/drop objects.  All
                    instances belong to at least one group, and can belong to as many
                groups as needed.</description>
                <parameters>
                    <parameter name="{string}" type="sGroup" usage="required">
                        <description>the name of the group</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeFromGroup" scope="instance">
                <description>Remove's this instance from the supplied interaction group</description>
                <parameters>
                    <parameter name="sGroup" type="string" usage="required">
                        <description>The group to drop</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDragElId" scope="instance">
                <description>Allows you to specify that an element other than the linked element
                will be moved with the cursor during a drag</description>
                <parameters>
                    <parameter name="{string}" type="id" usage="required">
                        <description>the id of the element that will be used to initiate the drag</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setHandleElId" scope="instance">
                <description>Allows you to specify a child of the linked element that should be
                    used to initiate the drag operation.  An example of this would be if
                    you have a content div with text and links.  Clicking anywhere in the
                    content area would normally start the drag operation.  Use this method
                    to specify that an element inside of the content div is the element
                that starts the drag operation.</description>
                <parameters>
                    <parameter name="{string}" type="id" usage="required">
                        <description>the id of the element that will be used to
                        initiate the drag.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setOuterHandleElId" scope="instance">
                <description>Allows you to set an element outside of the linked element as a drag
                handle</description>
                <parameters>
                    <parameter name="the" type="id" usage="required">
                        <description>id of the element that will be used to initiate the drag</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unreg" scope="instance">
                <description>Remove all drag and drop hooks for this element</description>
                <parameters/>
            </method>
            <method name="isLocked" scope="instance">
                <description>Returns true if this instance is locked, or the drag drop mgr is locked
                (meaning that all drag/drop is disabled on the page.)</description>
                <parameters/>
            </method>
            <method name="addInvalidHandleType" scope="instance">
                <description>Allows you to specify a tag name that should not start a drag operation
                    when clicked.  This is designed to facilitate embedding links within a
                drag handle that do something other than start the drag.</description>
                <parameters>
                    <parameter name="tagName" type="string" usage="required">
                        <description>the type of element to exclude</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addInvalidHandleId" scope="instance">
                <description>Lets you to specify an element id for a child of a drag handle
                that should not initiate a drag</description>
                <parameters>
                    <parameter name="id" type="string" usage="required">
                        <description>the element id of the element you wish to ignore</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addInvalidHandleClass" scope="instance">
                <description>Lets you specify a css class of elements that will not initiate a drag</description>
                <parameters>
                    <parameter name="cssClass" type="string" usage="required">
                        <description>the class of the elements you wish to ignore</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeInvalidHandleType" scope="instance">
                <description>Unsets an excluded tag name set by addInvalidHandleType</description>
                <parameters>
                    <parameter name="tagName" type="string" usage="required">
                        <description>the type of element to unexclude</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeInvalidHandleId" scope="instance">
                <description>Unsets an invalid handle id</description>
                <parameters>
                    <parameter name="id" type="string" usage="required">
                        <description>the id of the element to re-enable</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeInvalidHandleClass" scope="instance">
                <description>Unsets an invalid css class</description>
                <parameters>
                    <parameter name="cssClass" type="string" usage="required">
                        <description>the class of the element(s) you wish to
                        re-enable</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isValidHandleChild" scope="instance">
                <description>Checks the tag exclusion list to see if this click should be ignored</description>
                <parameters>
                    <parameter name="node" type="HTMLElement" usage="required">
                        <description>the HTMLElement to evaluate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setXConstraint" scope="instance">
                <description>By default, the element can be dragged any place on the screen.  Use
                    this method to limit the horizontal travel of the element.  Pass in
                0,0 for the parameters if you want to lock the drag to the y axis.</description>
                <parameters>
                    <parameter name="iLeft" type="int" usage="required">
                        <description>the number of pixels the element can move to the left</description>
                    </parameter>
                    <parameter name="iRight" type="int" usage="required">
                        <description>the number of pixels the element can move to the
                        right</description>
                    </parameter>
                    <parameter name="iTickSize" type="int" usage="required">
                        <description>optional parameter for specifying that the
                            element
                        should move iTickSize pixels at a time.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearConstraints" scope="instance">
                <description>Clears any constraints applied to this instance.  Also clears ticks
                since they can't exist independent of a constraint at this time.</description>
                <parameters/>
            </method>
            <method name="clearTicks" scope="instance">
                <description>Clears any tick interval defined for this instance</description>
                <parameters/>
            </method>
            <method name="setYConstraint" scope="instance">
                <description>By default, the element can be dragged any place on the screen.  Set
                    this to limit the vertical travel of the element.  Pass in 0,0 for the
                parameters if you want to lock the drag to the x axis.</description>
                <parameters>
                    <parameter name="iUp" type="int" usage="required">
                        <description>the number of pixels the element can move up</description>
                    </parameter>
                    <parameter name="iDown" type="int" usage="required">
                        <description>the number of pixels the element can move down</description>
                    </parameter>
                    <parameter name="iTickSize" type="int" usage="required">
                        <description>optional parameter for specifying that the
                        element should move iTickSize pixels at a time.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="resetConstraints" scope="instance">
                <description>resetConstraints must be called if you manually reposition a dd element.</description>
                <parameters>
                    <parameter name="maintainOffset" type="boolean" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="toString" scope="instance">
                <description>toString method</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DragDropMgr" superclass="Object">
        <description>DragDropMgr is a singleton that tracks the element interaction for
            all DragDrop items in the window.  Generally, you will not call
            this class directly, but it does have helper methods that could
        be useful in your DragDrop implementations.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="preventDefault" type="boolean" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Flag to determine if we should prevent the default behavior of the
                    events we define. By default this is true, but this can be set to
                false if you need the default behavior (not recommended)</description>
            </property>
            <property name="stopPropagation" type="boolean" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Flag to determine if we should stop the propagation of the events
                    we generate. This is true by default but you may want to set it to
                    false if the html element contains other features that require the
                mouse click.</description>
            </property>
            <property name="POINT" type="int" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; In point mode, drag and drop interaction is defined by the
                location of the cursor during the drag/drop</description>
            </property>
            <property name="INTERSECT" type="int" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; In intersect mode, drag and drop interaction is defined by the
                overlap of two or more drag and drop objects.</description>
            </property>
            <property name="mode" type="int" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; The current drag and drop mode.  Default: POINT</description>
            </property>
            <property name="useCache" type="boolean" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Set useCache to false if you want to force object the lookup of each
                drag and drop linked element constantly during a drag.</description>
            </property>
            <property name="clickPixelThresh" type="int" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; The number of pixels that the mouse needs to move after the
                mousedown before the drag is initiated.  Default=3;</description>
            </property>
            <property name="clickTimeThresh" type="int" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; The number of milliseconds after the mousedown event to initiate the
                drag if we don't get a mouseup event. Default=1000</description>
            </property>
            <property name="el" type="Object" scope="instance" access="read-write">
                <description>The element</description>
            </property>
            <property name="id" type="Object" scope="instance" access="read-write">
                <description>The element id</description>
            </property>
            <property name="css" type="Object" scope="instance" access="read-write">
                <description>A reference to the style property</description>
            </property>
        </properties>
        <methods>
            <method name="lock" scope="static">
                <description>&amp;lt;static&amp;gt; Lock all drag and drop functionality</description>
                <parameters/>
            </method>
            <method name="unlock" scope="static">
                <description>&amp;lt;static&amp;gt; Unlock all drag and drop functionality</description>
                <parameters/>
            </method>
            <method name="isLocked" scope="static">
                <description>&amp;lt;static&amp;gt; Is drag and drop locked?</description>
                <parameters/>
            </method>
            <method name="regDragDrop" scope="static">
                <description>&amp;lt;static&amp;gt; Each DragDrop instance must be registered with the DragDropMgr.
                This is executed in DragDrop.init()</description>
                <parameters>
                    <parameter name="oDD" type="DragDrop" usage="required">
                        <description>the DragDrop object to register</description>
                    </parameter>
                    <parameter name="sGroup" type="String" usage="required">
                        <description>the name of the group this element belongs to</description>
                    </parameter>
                </parameters>
            </method>
            <method name="regHandle" scope="static">
                <description>&amp;lt;static&amp;gt; Each DragDrop handle element must be registered.  This is done
                automatically when executing DragDrop.setHandleElId()</description>
                <parameters>
                    <parameter name="sDDId" type="String" usage="required">
                        <description>the DragDrop id this element is a handle for</description>
                    </parameter>
                    <parameter name="sHandleId" type="String" usage="required">
                        <description>the id of the element that is the drag
                        handle</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isDragDrop" scope="static">
                <description>&amp;lt;static&amp;gt; Utility function to determine if a given element has been
                registered as a drag drop item.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the element id to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRelated" scope="static">
                <description>&amp;lt;static&amp;gt; Returns the drag and drop instances that are in all groups the
                passed in instance belongs to.</description>
                <parameters>
                    <parameter name="p_oDD" type="DragDrop" usage="required">
                        <description>the obj to get related data for</description>
                    </parameter>
                    <parameter name="bTargetsOnly" type="boolean" usage="required">
                        <description>if true, only return targetable objs</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isLegalTarget" scope="static">
                <description>&amp;lt;static&amp;gt; Returns true if the specified dd target is a legal target for
                the specifice drag obj</description>
                <parameters>
                    <parameter name="the" type="DragDrop" usage="required">
                        <description>drag obj</description>
                    </parameter>
                    <parameter name="the" type="DragDrop" usage="required">
                        <description>target</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isTypeOfDD" scope="static">
                <description>&amp;lt;static&amp;gt; My goal is to be able to transparently determine if an object is
                    typeof DragDrop, and the exact subclass of DragDrop.  typeof
                    returns &quot;object&quot;, oDD.constructor.toString() always returns
                    &quot;DragDrop&quot; and not the name of the subclass.  So for now it just
                evaluates a well-known variable in DragDrop.</description>
                <parameters>
                    <parameter name="the" type="Object" usage="required">
                        <description>object to evaluate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isHandle" scope="static">
                <description>&amp;lt;static&amp;gt; Utility function to determine if a given element has been
                registered as a drag drop handle for the given Drag Drop object.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the element id to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getDDById" scope="static">
                <description>&amp;lt;static&amp;gt; Returns the DragDrop instance for a given id</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the id of the DragDrop object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="startDrag" scope="static">
                <description>&amp;lt;static&amp;gt; Fired when either the drag pixel threshol or the mousedown hold
                time threshold has been met.</description>
                <parameters>
                    <parameter name="{int}" type="x" usage="required">
                        <description>the X position of the original mousedown</description>
                    </parameter>
                    <parameter name="{int}" type="y" usage="required">
                        <description>the Y position of the original mousedown</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stopEvent" scope="static">
                <description>&amp;lt;static&amp;gt; Utility to stop event propagation and event default, if these
                features are turned on.</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>the event as returned by this.getEvent()</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getBestMatch" scope="static">
                <description>&amp;lt;static&amp;gt; Helper function for getting the best match from the list of drag
                    and drop objects returned by the drag and drop events when we are
                    in INTERSECT mode.  It returns either the first object that the
                    cursor is over, or the object that has the greatest overlap with
                the dragged element.</description>
                <parameters>
                    <parameter name="dds" type="DragDrop[]" usage="required">
                        <description>The array of drag and drop objects
                        targeted</description>
                    </parameter>
                </parameters>
            </method>
            <method name="refreshCache" scope="static">
                <description>&amp;lt;static&amp;gt; Refreshes the cache of the top-left and bottom-right points of the
                    drag and drop objects in the specified group(s).  This is in the
                    format that is stored in the drag and drop instance, so typical
                    usage is:
                    &lt;code&gt;
                    apf.dd.DragDropMgr.refreshCache(ddinstance.groups);
                    &lt;/code&gt;
                    Alternatively:
                    &lt;code&gt;
                    apf.dd.DragDropMgr.refreshCache({group1:true, group2:true});
                    &lt;/code&gt;
                    @TODO this really should be an indexed array.  Alternatively this
                method could accept both.</description>
                <parameters>
                    <parameter name="groups" type="Object" usage="required">
                        <description>an associative array of groups to refresh</description>
                    </parameter>
                </parameters>
            </method>
            <method name="verifyEl" scope="static">
                <description>&amp;lt;static&amp;gt; This checks to make sure an element exists and is in the DOM.  The
                    main purpose is to handle cases where innerHTML is used to remove
                    drag and drop objects from the DOM.  IE provides an 'unspecified
                error' when trying to access the offsetParent of such an element</description>
                <parameters>
                    <parameter name="el" type="HTMLElement" usage="required">
                        <description>the element to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getLocation" scope="static">
                <description>&amp;lt;static&amp;gt; Returns a Region object containing the drag and drop element's position
                and size, including the padding configured for it</description>
                <parameters>
                    <parameter name="oDD" type="DragDrop" usage="required">
                        <description>the drag and drop object to get the
                        location for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getElement" scope="static">
                <description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the actual DOM element</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the id of the elment to get</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getCss" scope="static">
                <description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the style property for the DOM element (i.e.,
                document.getElById(id).style)</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>the id of the elment to get</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getPosX" scope="static">
                <description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the X position of an html element</description>
                <parameters>
                    <parameter name="the" type="el" usage="required">
                        <description>element for which to get the position</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getPosY" scope="static">
                <description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the Y position of an html element</description>
                <parameters>
                    <parameter name="the" type="el" usage="required">
                        <description>element for which to get the position</description>
                    </parameter>
                </parameters>
            </method>
            <method name="swapNode" scope="static">
                <description>&amp;lt;static&amp;gt; Swap two nodes.  In IE, we use the native method, for others we
                emulate the IE behavior</description>
                <parameters>
                    <parameter name="the" type="n1" usage="required">
                        <description>first node to swap</description>
                    </parameter>
                    <parameter name="the" type="n2" usage="required">
                        <description>other node to swap</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getStyle" scope="static">
                <description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the specified element style property</description>
                <parameters>
                    <parameter name="el" type="HTMLElement" usage="required">
                        <description>the element</description>
                    </parameter>
                    <parameter name="styleProp" type="string" usage="required">
                        <description>the style property</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getScrollTop" scope="static">
                <description>&amp;lt;static&amp;gt; Gets the scrollTop</description>
                <parameters/>
            </method>
            <method name="getScrollLeft" scope="static">
                <description>&amp;lt;static&amp;gt; Gets the scrollLeft</description>
                <parameters/>
            </method>
            <method name="moveToEl" scope="static">
                <description>&amp;lt;static&amp;gt; Sets the x/y position of an element to the location of the
                target element.</description>
                <parameters>
                    <parameter name="moveEl" type="HTMLElement" usage="required">
                        <description>The element to move</description>
                    </parameter>
                    <parameter name="targetEl" type="HTMLElement" usage="required">
                        <description>The position reference element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="numericSort" scope="static">
                <description>&amp;lt;static&amp;gt; Numeric array sort function</description>
                <parameters/>
            </method>
            <method name="handleWasClicked" scope="static">
                <description>&amp;lt;static&amp;gt; Recursively searches the immediate parent and all child nodes for
                    the handle element in order to determine wheter or not it was
                clicked.</description>
                <parameters>
                    <parameter name="the" type="node" usage="required">
                        <description>html element to inspect</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DragSource" superclass="apf.dd.DDProxy">
        <description>A simple class that provides the basic implementation needed to make any element draggable.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The container element</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="onStartDrag" type="Object" scope="instance" access="read-write">
                <description>An empty function by default, but provided so that you can perform a custom action once the initial
                drag event has begun.  The drag cannot be canceled from this function.</description>
            </property>
        </properties>
        <methods>
            <method name="getDragData" scope="instance">
                <description>Returns the data object associated with this drag source</description>
                <parameters/>
            </method>
            <method name="afterDragEnter" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                when the dragged item enters the drop target by providing an implementation.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beforeDragEnter" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                before the dragged item enters the drop target and optionally cancel the onDragEnter.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="afterDragOver" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                while the dragged item is over the drop target by providing an implementation.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beforeDragOver" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                while the dragged item is over the drop target and optionally cancel the onDragOver.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="afterDragOut" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                after the dragged item is dragged out of the target without dropping.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beforeDragOut" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action before the dragged
                item is dragged out of the target without dropping, and optionally cancel the onDragOut.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="afterDragDrop" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                after a valid drag drop has occurred by providing an implementation.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dropped element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beforeDragDrop" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action before the dragged
                item is dropped onto the target and optionally cancel the onDragDrop.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="afterInvalidDrop" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action
                after an invalid drop has occurred by providing an implementation.</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dropped element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="beforeInvalidDrop" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action after an invalid
                drop has occurred.</description>
                <parameters>
                    <parameter name="target" type="apf.dd.DragDrop" usage="required">
                        <description>The drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the dragged element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onBeforeDrag" scope="instance">
                <description>An empty function by default, but provided so that you can perform a custom action before the initial
                drag event begins and optionally cancel it.</description>
                <parameters>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data to be shared with drop targets</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getProxy" scope="instance">
                <description>Returns the drag source's underlying &lt;a ext:cls=&quot;apf.dd.StatusProxy&quot; href=&quot;output/apf.dd.StatusProxy.html&quot;&gt;apf.dd.StatusProxy&lt;/a&gt;</description>
                <parameters/>
            </method>
            <method name="hideProxy" scope="instance">
                <description>Hides the drag source's &lt;a ext:cls=&quot;apf.dd.StatusProxy&quot; href=&quot;output/apf.dd.StatusProxy.html&quot;&gt;apf.dd.StatusProxy&lt;/a&gt;</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DragZone" superclass="apf.dd.DragSource">
        <description>This class provides a container DD instance that proxies for multiple child node sources.&lt;br /&gt;
        By default, this class requires that draggable child nodes are registered with &lt;a ext:cls=&quot;apf.dd.Registry&quot; href=&quot;output/apf.dd.Registry.html&quot;&gt;apf.dd.Registry&lt;/a&gt;.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The container element</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getDragData" scope="instance">
                <description>
                    Called when a mousedown occurs in this container. Looks in &lt;a ext:cls=&quot;apf.dd.Registry&quot; href=&quot;output/apf.dd.Registry.html&quot;&gt;apf.dd.Registry&lt;/a&gt;
                    for a valid target to drag based on the mouse down. Override this method
                    to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
                object has a &quot;ddel&quot; attribute (with an HTML Element) for other functions to work.</description>
                <parameters>
                    <parameter name="e" type="EventObject" usage="required">
                        <description>The mouse down event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onInitDrag" scope="instance">
                <description>Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
                this.dragData.ddel</description>
                <parameters>
                    <parameter name="x" type="Number" usage="required">
                        <description>The x position of the click on the dragged object</description>
                    </parameter>
                    <parameter name="y" type="Number" usage="required">
                        <description>The y position of the click on the dragged object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="afterRepair" scope="instance">
                <description>Called after a repair of an invalid drop. By default, highlights this.dragData.ddel</description>
                <parameters/>
            </method>
            <method name="getRepairXY" scope="instance">
                <description>Called before a repair of an invalid drop to get the XY to animate to. By default returns
                the XY of this.dragData.ddel</description>
                <parameters>
                    <parameter name="e" type="EventObject" usage="required">
                        <description>The mouse up event</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DropTarget" superclass="apf.dd.DDTarget">
        <description>A simple class that provides the basic implementation needed to make any element a drop target that can have
        draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The container element</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="notifyEnter" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls once to notify this drop target that the source is now over the
                    target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
                and returns the dropAllowed config value.  This method should be overridden if drop validation is required.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyOver" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls continuously while it is being dragged over the target.
                    This method will be called on every mouse movement while the drag source is over the drop target.
                This default implementation simply returns the dropAllowed config value.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyOut" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls once to notify this drop target that the source has been dragged
                    out of the target without dropping.  This default implementation simply removes the CSS class specified by
                overClass (if any) from the drop element.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyDrop" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls once to notify this drop target that the dragged item has
                    been dropped on it.  This method has no default implementation and returns false, so you must provide an
                    implementation that does something to process the drop event and returns true so that the drag source's
                repair action does not run.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.dd.DropZone" superclass="apf.dd.DropTarget">
        <description>This class provides a container DD instance that proxies for multiple child node targets.&lt;br /&gt;
        By default, this class requires that child nodes accepting drop are registered with &lt;a ext:cls=&quot;apf.dd.Registry&quot; href=&quot;output/apf.dd.Registry.html&quot;&gt;apf.dd.Registry&lt;/a&gt;.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The container element</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getTargetFromEvent" scope="instance">
                <description>Returns a custom data object associated with the DOM node that is the target of the event.  By default
                    this looks up the event target in the &lt;a ext:cls=&quot;apf.dd.Registry&quot; href=&quot;output/apf.dd.Registry.html&quot;&gt;apf.dd.Registry&lt;/a&gt;, although you can override this method to
                provide your own custom lookup.</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onNodeEnter" scope="instance">
                <description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; has entered a drop node
                    that it has registered.  This method has no default implementation and should be overridden to provide
                node-specific processing if necessary.</description>
                <parameters>
                    <parameter name="nodeData" type="Object" usage="required">
                        <description>The custom data associated with the drop node (this is the same value returned from
                        &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/apf.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description>
                    </parameter>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onNodeOver" scope="instance">
                <description>Called internally while the DropZone determines that a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; is over a drop node
                    that it has registered.  The default implementation returns this.dropNotAllowed, so it should be
                overridden to provide the proper feedback.</description>
                <parameters>
                    <parameter name="nodeData" type="Object" usage="required">
                        <description>The custom data associated with the drop node (this is the same value returned from
                        &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/apf.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description>
                    </parameter>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onNodeOut" scope="instance">
                <description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; has been dragged out of
                    the drop node without dropping.  This method has no default implementation and should be overridden to provide
                node-specific processing if necessary.</description>
                <parameters>
                    <parameter name="nodeData" type="Object" usage="required">
                        <description>The custom data associated with the drop node (this is the same value returned from
                        &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/apf.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description>
                    </parameter>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onNodeDrop" scope="instance">
                <description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; has been dropped onto
                    the drop node.  The default implementation returns false, so it should be overridden to provide the
                appropriate processing of the drop event and return true so that the drag source's repair action does not run.</description>
                <parameters>
                    <parameter name="nodeData" type="Object" usage="required">
                        <description>The custom data associated with the drop node (this is the same value returned from
                        &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/apf.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description>
                    </parameter>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onContainerOver" scope="instance">
                <description>Called internally while the DropZone determines that a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; is being dragged over it,
                    but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so
                it should be overridden to provide the proper feedback if necessary.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onContainerDrop" scope="instance">
                <description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; has been dropped on it,
                    but not on any of its registered drop nodes.  The default implementation returns false, so it should be
                    overridden to provide the appropriate processing of the drop event if you need the drop zone itself to
                be able to accept drops.  It should return true when valid so that the drag source's repair action does not run.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyEnter" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls once to notify this drop zone that the source is now over
                    the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop
                    nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops
                you should override this method and provide a custom implementation.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyOver" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls continuously while it is being dragged over the drop zone.
                    This method will be called on every mouse movement while the drag source is over the drop zone.
                    It will call &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOver&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOver&quot;&gt;onNodeOver&lt;/a&gt; while the drag source is over a registered node, and will also automatically
                    delegate to the appropriate node-specific methods as necessary when the drag source enters and exits
                    registered nodes (&lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeEnter&quot; href=&quot;output/apf.dd.DropZone.html#onNodeEnter&quot;&gt;onNodeEnter&lt;/a&gt;, &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOut&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOut&quot;&gt;onNodeOut&lt;/a&gt;). If the drag source is not currently over a
                registered node, it will call &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onContainerOver&quot; href=&quot;output/apf.dd.DropZone.html#onContainerOver&quot;&gt;onContainerOver&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyOut" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls once to notify this drop zone that the source has been dragged
                    out of the zone without dropping.  If the drag source is currently over a registered node, the notification
                will be delegated to &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOut&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOut&quot;&gt;onNodeOut&lt;/a&gt; for node-specific handling, otherwise it will be ignored.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop target</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag zone</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyDrop" scope="instance">
                <description>The function a &lt;a ext:cls=&quot;apf.dd.DragSource&quot; href=&quot;output/apf.dd.DragSource.html&quot;&gt;apf.dd.DragSource&lt;/a&gt; calls once to notify this drop zone that the dragged item has
                    been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there
                    is a node registered for that event, it will delegate to &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeDrop&quot; href=&quot;output/apf.dd.DropZone.html#onNodeDrop&quot;&gt;onNodeDrop&lt;/a&gt; for node-specific handling,
                otherwise it will call &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onContainerDrop&quot; href=&quot;output/apf.dd.DropZone.html#onContainerDrop&quot;&gt;onContainerDrop&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="source" type="apf.dd.DragSource" usage="required">
                        <description>The drag source that was dragged over this drop zone</description>
                    </parameter>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="required">
                        <description>An object containing arbitrary data supplied by the drag source</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.dd.Registry" superclass="Object">
        <description>Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either
        directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="register" scope="instance">
                <description>Resgister a drag drop element</description>
                <parameters>
                    <parameter name="element" type="String/HTMLElement)" usage="required">
                        <description>The id or DOM node to register</description>
                    </parameter>
                    <parameter name="data" type="Object" usage="optional">
                        <description>(optional) An custom data object that will be passed between the elements that are involved
                            in drag drop operations. You can populate this object with any arbitrary properties that your own code
                            knows how to interpret, plus there are some specific properties known to the Registry that should be
                            populated in the data object (if applicable):
                            &lt;pre&gt;Value      Description&lt;br /&gt;&#13;
                            ---------  ------------------------------------------&lt;br /&gt;&#13;
                            handles    Array of DOM nodes that trigger dragging&lt;br /&gt;&#13;
                            for the element being registered&lt;br /&gt;&#13;
                            isHandle   True if the element passed in triggers&lt;br /&gt;&#13;
                        dragging itself, else false&lt;/pre&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description>Unregister a drag drop element</description>
                <parameters>
                    <parameter name="element" type="String/HTMLElement)" usage="required">
                        <description>The id or DOM node to unregister</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getHandle" scope="instance">
                <description>Returns the handle registered for a DOM Node by id</description>
                <parameters>
                    <parameter name="id" type="String/HTMLElement" usage="required">
                        <description>The DOM node or id to look up</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getHandleFromEvent" scope="instance">
                <description>Returns the handle that is registered for the DOM node that is the target of the event</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTarget" scope="instance">
                <description>Returns a custom data object that is registered for a DOM node by id</description>
                <parameters>
                    <parameter name="id" type="String/HTMLElement" usage="required">
                        <description>The DOM node or id to look up</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTargetFromEvent" scope="instance">
                <description>Returns a custom data object that is registered for the DOM node that is the target of the event</description>
                <parameters>
                    <parameter name="e" type="Event" usage="required">
                        <description>The event</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.dd.ScrollManager" superclass="Object">
        <description>&lt;p&gt;Provides automatic scrolling of overflow regions in the page during drag operations.&lt;/p&gt;
            &lt;p&gt;The ScrollManager configs will be used as the defaults for any scroll container registered with it,
            but you can also override most of the configs per scroll container by adding a
            &lt;tt&gt;ddScrollConfig&lt;/tt&gt; object to the target element that contains these properties: &lt;a ext:cls=&quot;apf.dd.ScrollManager&quot; ext:member=&quot;hthresh&quot; href=&quot;output/apf.dd.ScrollManager.html#hthresh&quot;&gt;hthresh&lt;/a&gt;,
            &lt;a ext:cls=&quot;apf.dd.ScrollManager&quot; ext:member=&quot;vthresh&quot; href=&quot;output/apf.dd.ScrollManager.html#vthresh&quot;&gt;vthresh&lt;/a&gt;, &lt;a ext:cls=&quot;apf.dd.ScrollManager&quot; ext:member=&quot;increment&quot; href=&quot;output/apf.dd.ScrollManager.html#increment&quot;&gt;increment&lt;/a&gt; and &lt;a ext:cls=&quot;apf.dd.ScrollManager&quot; ext:member=&quot;frequency&quot; href=&quot;output/apf.dd.ScrollManager.html#frequency&quot;&gt;frequency&lt;/a&gt;.  Example usage:
            &lt;pre&gt;&lt;code&gt;var el = apf.get('scroll-ct');
            el.ddScrollConfig = {
            vthresh: 50,
            hthresh: -1,
            frequency: 100,
            increment: 200
            };
            apf.dd.ScrollManager.register(el);&lt;/code&gt;&lt;/pre&gt;
        &lt;b&gt;Note: This class uses &quot;Point Mode&quot; and is untested in &quot;Intersect Mode&quot;.&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="vthresh" type="Number" scope="instance" access="read-write">
                <description>The number of pixels from the top or bottom edge of a container the pointer needs to be to
                trigger scrolling (defaults to 25)</description>
            </property>
            <property name="hthresh" type="Number" scope="instance" access="read-write">
                <description>The number of pixels from the right or left edge of a container the pointer needs to be to
                trigger scrolling (defaults to 25)</description>
            </property>
            <property name="increment" type="Number" scope="instance" access="read-write">
                <description>The number of pixels to scroll in each scroll increment (defaults to 50)</description>
            </property>
            <property name="frequency" type="Number" scope="instance" access="read-write">
                <description>The frequency of scrolls in milliseconds (defaults to 500)</description>
            </property>
            <property name="animate" type="Boolean" scope="instance" access="read-write">
                <description>True to animate the scroll (defaults to true)</description>
            </property>
            <property name="animDuration" type="Number" scope="instance" access="read-write">
                <description>The animation duration in seconds -
                MUST BE less than apf.dd.ScrollManager.frequency! (defaults to .4)</description>
            </property>
        </properties>
        <methods>
            <method name="register" scope="instance">
                <description>Registers new overflow element(s) to auto scroll</description>
                <parameters>
                    <parameter name="el" type="Mixed/Array" usage="required">
                        <description>The id of or the element to be scrolled or an array of either</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unregister" scope="instance">
                <description>Unregisters overflow element(s) so they are no longer scrolled</description>
                <parameters>
                    <parameter name="el" type="Mixed/Array" usage="required">
                        <description>The id of or the element to be removed or an array of either</description>
                    </parameter>
                </parameters>
            </method>
            <method name="refreshCache" scope="instance">
                <description>Manually trigger a cache refresh.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.dd.StatusProxy" superclass="Object">
        <description>A specialized drag proxy that supports a drop status icon, &lt;a ext:cls=&quot;apf.Layer&quot; href=&quot;output/apf.Layer.html&quot;&gt;apf.Layer&lt;/a&gt; styles and auto-repair.  This is the
        default drag proxy used by all apf.dd components.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setStatus" scope="instance">
                <description>Updates the proxy's visual element to indicate the status of whether or not drop is allowed
                over the current target element.</description>
                <parameters>
                    <parameter name="cssClass" type="String" usage="required">
                        <description>The css class for the new drop status indicator image</description>
                    </parameter>
                </parameters>
            </method>
            <method name="reset" scope="instance">
                <description>Resets the status indicator to the default dropNotAllowed value</description>
                <parameters>
                    <parameter name="clearGhost" type="Boolean" usage="required">
                        <description>True to also remove all content from the ghost, false to preserve it</description>
                    </parameter>
                </parameters>
            </method>
            <method name="update" scope="instance">
                <description>Updates the contents of the ghost element</description>
                <parameters>
                    <parameter name="html" type="String/HTMLElement" usage="required">
                        <description>The html that will replace the current innerHTML of the ghost element, or a
                        DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getEl" scope="instance">
                <description>Returns the underlying proxy &lt;a ext:cls=&quot;apf.Layer&quot; href=&quot;output/apf.Layer.html&quot;&gt;apf.Layer&lt;/a&gt;</description>
                <parameters/>
            </method>
            <method name="getGhost" scope="instance">
                <description>Returns the ghost element</description>
                <parameters/>
            </method>
            <method name="hide" scope="instance">
                <description>Hides the proxy</description>
                <parameters>
                    <parameter name="clear" type="Boolean" usage="required">
                        <description>True to reset the status and clear the ghost contents, false to preserve them</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stop" scope="instance">
                <description>Stops the repair animation if it's currently running</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Displays this proxy</description>
                <parameters/>
            </method>
            <method name="sync" scope="instance">
                <description>Force the Layer to sync its shadow and shim positions to the element</description>
                <parameters/>
            </method>
            <method name="repair" scope="instance">
                <description>Causes the proxy to return to its position of origin via an animation.  Should be called after an
                invalid drop operation by the item being dragged.</description>
                <parameters>
                    <parameter name="xy" type="Array" usage="required">
                        <description>The XY position of the element ([x, y])</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description>The function to call after the repair is complete</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope in which to execute the callback</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.Action" superclass="Object">
        <description>&lt;p&gt;The subclasses of this class provide actions to perform upon &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt;s.&lt;/p&gt;
            &lt;p&gt;Instances of this class are only created by a &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt; when
            the Form needs to perform an action such as submit or load. The Configuration options
            listed for this class are set through the Form's action methods: &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;submit&quot; href=&quot;output/apf.form.BasicForm.html#submit&quot;&gt;submit&lt;/a&gt;,
            &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;load&quot; href=&quot;output/apf.form.BasicForm.html#load&quot;&gt;load&lt;/a&gt; and &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;doAction&quot; href=&quot;output/apf.form.BasicForm.html#doAction&quot;&gt;doAction&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;The instance of Action which performed the action is passed to the success
            and failure callbacks of the Form's action methods (&lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;submit&quot; href=&quot;output/apf.form.BasicForm.html#submit&quot;&gt;submit&lt;/a&gt;,
            &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;load&quot; href=&quot;output/apf.form.BasicForm.html#load&quot;&gt;load&lt;/a&gt; and &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;doAction&quot; href=&quot;output/apf.form.BasicForm.html#doAction&quot;&gt;doAction&lt;/a&gt;),
            and to the &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;actioncomplete&quot; href=&quot;output/apf.form.BasicForm.html#actioncomplete&quot;&gt;actioncomplete&lt;/a&gt; and
        &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;actionfailed&quot; href=&quot;output/apf.form.BasicForm.html#actionfailed&quot;&gt;actionfailed&lt;/a&gt; event handlers.&lt;/p&gt;</description>
        <properties>
            <property name="Action.CLIENT_INVALID" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Failure type returned when client side validation of the Form fails
                thus aborting a submit action.</description>
            </property>
            <property name="Action.SERVER_INVALID" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Failure type returned when server side validation of the Form fails
                    indicating that field-specific error messages have been returned in the
                response's &lt;tt style=&quot;font-weight:bold&quot;&gt;errors&lt;/tt&gt; property.</description>
            </property>
            <property name="Action.CONNECT_FAILURE" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Failure type returned when a communication error happens when attempting
                to send a request to the remote server.</description>
            </property>
            <property name="Action.LOAD_FAILURE" type="String" scope="static" access="read-write">
                <description>&amp;lt;static&amp;gt; Failure type returned when no field values are returned in the response's
                &lt;tt style=&quot;font-weight:bold&quot;&gt;data&lt;/tt&gt; property.</description>
            </property>
            <property name="type" type="String" scope="instance" access="read-write">
                <description>
                    The type of action this Action instance performs.
                Currently only &quot;submit&quot; and &quot;load&quot; are supported.</description>
            </property>
            <property name="failureType" type="String" scope="instance" access="read-write">
                <description>The type of failure detected. See &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;apf.form.Action.CLIENT_INVALID&quot; href=&quot;output/apf.form.Action.html#apf.form.Action.CLIENT_INVALID&quot;&gt;CLIENT_INVALID&lt;/a&gt;, &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;apf.form.Action.SERVER_INVALID&quot; href=&quot;output/apf.form.Action.html#apf.form.Action.SERVER_INVALID&quot;&gt;SERVER_INVALID&lt;/a&gt;,
                &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;apf.form.Action.CONNECT_FAILURE&quot; href=&quot;output/apf.form.Action.html#apf.form.Action.CONNECT_FAILURE&quot;&gt;CONNECT_FAILURE&lt;/a&gt;, &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;apf.form.Action.LOAD_FAILURE&quot; href=&quot;output/apf.form.Action.html#apf.form.Action.LOAD_FAILURE&quot;&gt;LOAD_FAILURE&lt;/a&gt;</description>
            </property>
            <property name="response" type="Object" scope="instance" access="read-write">
                <description>
                The XMLHttpRequest object used to perform the action.</description>
            </property>
            <property name="result" type="Object" scope="instance" access="read-write">
                <description>
                    The decoded response object containing a boolean &lt;tt style=&quot;font-weight:bold&quot;&gt;success&lt;/tt&gt; property and
                other, action-specific properties.</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.form.Action.Load" superclass="apf.form.Action">
        <description>&lt;p&gt;A class which handles loading of data from a server into the Fields of an &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;apf.form.BasicForm&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;Instances of this class are only created by a &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt; when
            &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;load&quot; href=&quot;output/apf.form.BasicForm.html#load&quot;&gt;load&lt;/a&gt;ing.&lt;/p&gt;
            &lt;p&gt;A response packet &lt;b&gt;must&lt;/b&gt; contain a boolean &lt;tt style=&quot;font-weight:bold&quot;&gt;success&lt;/tt&gt; property, and
            a &lt;tt style=&quot;font-weight:bold&quot;&gt;data&lt;/tt&gt; property. The &lt;tt style=&quot;font-weight:bold&quot;&gt;data&lt;/tt&gt; property
            contains the values of Fields to load. The individual value object for each Field
            is passed to the Field's &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;setValue&quot; href=&quot;output/apf.form.Field.html#setValue&quot;&gt;setValue&lt;/a&gt; method.&lt;/p&gt;
            &lt;p&gt;By default, response packets are assumed to be JSON, so a typical response
            packet may look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
            success: true,
            data: {
            clientName: &quot;Fred. Olsen Lines&quot;,
            portOfLoading: &quot;FXT&quot;,
            portOfDischarge: &quot;OSL&quot;
            }
            }&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;Other data may be placed into the response for processing the &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt;'s callback
        or event handler methods. The object decoded from this JSON is available in the &lt;a ext:cls=&quot;apf.form.Action.Load&quot; ext:member=&quot;result&quot; href=&quot;output/apf.form.Action.Load.html#result&quot;&gt;result&lt;/a&gt; property.&lt;/p&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.form.Action.Submit" superclass="apf.form.Action">
        <description>&lt;p&gt;A class which handles submission of data from &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt;s
            and processes the returned response.&lt;/p&gt;
            &lt;p&gt;Instances of this class are only created by a &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt; when
            &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;submit&quot; href=&quot;output/apf.form.BasicForm.html#submit&quot;&gt;submit&lt;/a&gt;ting.&lt;/p&gt;
            &lt;p&gt;A response packet must contain a boolean &lt;tt style=&quot;font-weight:bold&quot;&gt;success&lt;/tt&gt; property, and, optionally
            an &lt;tt style=&quot;font-weight:bold&quot;&gt;errors&lt;/tt&gt; property. The &lt;tt style=&quot;font-weight:bold&quot;&gt;errors&lt;/tt&gt; property contains error
            messages for invalid fields.&lt;/p&gt;
            &lt;p&gt;By default, response packets are assumed to be JSON, so a typical response
            packet may look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
            success: false,
            errors: {
            clientCode: &quot;Client not found&quot;,
            portOfLoading: &quot;This field must not be null&quot;
            }
            }&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;Other data may be placed into the response for processing by the &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;apf.form.BasicForm&lt;/a&gt;'s callback
            or event handler methods. The object decoded from this JSON is available in the &lt;a ext:cls=&quot;apf.form.Action.Submit&quot; ext:member=&quot;result&quot; href=&quot;output/apf.form.Action.Submit.html#result&quot;&gt;result&lt;/a&gt; property.&lt;/p&gt;
            &lt;p&gt;Alternatively, if an &lt;a ext:cls=&quot;apf.form.Action.Submit&quot; ext:member=&quot;errorReader&quot; href=&quot;output/apf.form.Action.Submit.html#errorReader&quot;&gt;errorReader&lt;/a&gt; is specified as an &lt;a ext:cls=&quot;apf.data.XmlReader&quot; href=&quot;output/apf.data.XmlReader.html&quot;&gt;XmlReader&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;errorReader: new apf.data.XmlReader({
            record : 'field',
            success: '@success'
            }, [
            'id', 'msg'
            ]
            )&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;then the results may be sent back in XML format:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
            &amp;lt;message success=&quot;false&quot;&amp;gt;
            &amp;lt;errors&amp;gt;
            &amp;lt;field&amp;gt;
            &amp;lt;id&amp;gt;clientCode&amp;lt;/id&amp;gt;
            &amp;lt;msg&amp;gt;&amp;lt;![CDATA[Code not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;
            &amp;lt;/field&amp;gt;
            &amp;lt;field&amp;gt;
            &amp;lt;id&amp;gt;portOfLoading&amp;lt;/id&amp;gt;
            &amp;lt;msg&amp;gt;&amp;lt;![CDATA[Port not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;
            &amp;lt;/field&amp;gt;
            &amp;lt;/errors&amp;gt;
            &amp;lt;/message&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;Other elements may be placed into the response XML for processing by the &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;apf.form.BasicForm&lt;/a&gt;'s callback
        or event handler methods. The XML document is available in the &lt;a ext:cls=&quot;apf.form.Action.Submit&quot; ext:member=&quot;errorReader&quot; href=&quot;output/apf.form.Action.Submit.html#errorReader&quot;&gt;errorReader&lt;/a&gt;'s &lt;a ext:cls=&quot;apf.data.XmlReader&quot; ext:member=&quot;xmlData&quot; href=&quot;output/apf.data.XmlReader.html#xmlData&quot;&gt;xmlData&lt;/a&gt; property.&lt;/p&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.form.BasicForm" superclass="apf.util.Observable">
        <description>Supplies the functionality to do &quot;actions&quot; on forms and initialize apf.form.Field types on existing markup.
            &lt;br&gt;&lt;br&gt;
            By default, apf Forms are submitted through Ajax, using &lt;a ext:cls=&quot;apf.form.Action&quot; href=&quot;output/apf.form.Action.html&quot;&gt;apf.form.Action&lt;/a&gt;.
        To enable normal browser submission of an apf Form, use the &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;standardSubmit&quot; href=&quot;output/apf.form.BasicForm.html#standardSubmit&quot;&gt;standardSubmit&lt;/a&gt; config option.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The form element or its id</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="waitMsgTarget" type="Mixed" scope="instance" access="read-write">
                <description>
                    By default wait messages are displayed with apf.MessageBox.wait. You can target a specific
                element by passing it or its id or mask the form itself by passing in true.</description>
            </property>
        </properties>
        <methods>
            <method name="getEl" scope="instance">
                <description>Get the HTML form Element</description>
                <parameters/>
            </method>
            <method name="isValid" scope="instance">
                <description>Returns true if client-side validation on the form is successful.</description>
                <parameters/>
            </method>
            <method name="isDirty" scope="instance">
                <description>Returns true if any fields in this form have changed since their original load.</description>
                <parameters/>
            </method>
            <method name="doAction" scope="instance">
                <description>Performs a predefined action (&lt;a ext:cls=&quot;apf.form.Action.Submit&quot; href=&quot;output/apf.form.Action.Submit.html&quot;&gt;apf.form.Action.Submit&lt;/a&gt; or
                    &lt;a ext:cls=&quot;apf.form.Action.Load&quot; href=&quot;output/apf.form.Action.Load.html&quot;&gt;apf.form.Action.Load&lt;/a&gt;) or a custom extension of &lt;a ext:cls=&quot;apf.form.Action&quot; href=&quot;output/apf.form.Action.html&quot;&gt;apf.form.Action&lt;/a&gt;
                to perform application-specific processing.</description>
                <parameters>
                    <parameter name="actionName" type="String/Object" usage="required">
                        <description>The name of the predefined action type,
                        or instance of &lt;a ext:cls=&quot;apf.form.Action&quot; href=&quot;output/apf.form.Action.html&quot;&gt;apf.form.Action&lt;/a&gt; to perform.</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) The options to pass to the &lt;a ext:cls=&quot;apf.form.Action&quot; href=&quot;output/apf.form.Action.html&quot;&gt;apf.form.Action&lt;/a&gt;.
                            All of the config options listed below are supported by both the submit
                            and load actions unless otherwise noted (custom actions could also accept
                            other config options):&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;url&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;The url for the action (defaults
                            to the form's url.)&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;method&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;The form method to use (defaults
                            to the form's method, or POST if not defined)&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;params&lt;/b&gt; : String/Object&lt;p style=&quot;margin-left:1em&quot;&gt;The params to pass
                            (defaults to the form's baseParams, or none if not defined)&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;headers&lt;/b&gt; : Object&lt;p style=&quot;margin-left:1em&quot;&gt;Request headers to set for the action
                            (defaults to the form's default headers)&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;success&lt;/b&gt; : Function&lt;p style=&quot;margin-left:1em&quot;&gt;The callback that will
                            be invoked after a successful response. Note that this is HTTP success
                            (the transaction was sent and received correctly), but the resulting response data
                            can still contain data errors. The function is passed the following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;form&lt;/code&gt; : apf.form.BasicForm&lt;div class=&quot;sub-desc&quot;&gt;The form that requested the action&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;action&lt;/code&gt; : apf.form.Action&lt;div class=&quot;sub-desc&quot;&gt;The Action class. The &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;result&quot; href=&quot;output/apf.form.Action.html#result&quot;&gt;result&lt;/a&gt;
                            property of this object may be examined to perform custom postprocessing.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;failure&lt;/b&gt; : Function&lt;p style=&quot;margin-left:1em&quot;&gt;The callback that will
                            be invoked after a failed transaction attempt. Note that this is HTTP failure,
                            which means a non-successful HTTP code was returned from the server. The function
                            is passed the following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;form&lt;/code&gt; : apf.form.BasicForm&lt;div class=&quot;sub-desc&quot;&gt;The form that requested the action&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;action&lt;/code&gt; : apf.form.Action&lt;div class=&quot;sub-desc&quot;&gt;The Action class. If an Ajax
                            error ocurred, the failure type will be in &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;failureType&quot; href=&quot;output/apf.form.Action.html#failureType&quot;&gt;failureType&lt;/a&gt;. The &lt;a ext:cls=&quot;apf.form.Action&quot; ext:member=&quot;result&quot; href=&quot;output/apf.form.Action.html#result&quot;&gt;result&lt;/a&gt;
                            property of this object may be examined to perform custom postprocessing.&lt;/div&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;scope&lt;/b&gt; : Object&lt;p style=&quot;margin-left:1em&quot;&gt;The scope in which to call the
                            callback functions (The &lt;tt&gt;this&lt;/tt&gt; reference for the callback functions).&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;clientValidation&lt;/b&gt; : Boolean&lt;p style=&quot;margin-left:1em&quot;&gt;Submit Action only.
                            Determines whether a Form's fields are validated in a final call to
                            &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;isValid&quot; href=&quot;output/apf.form.BasicForm.html#isValid&quot;&gt;isValid&lt;/a&gt; prior to submission. Set to &lt;tt&gt;false&lt;/tt&gt;
                        to prevent this. If undefined, pre-submission field validation is performed.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="submit" scope="instance">
                <description>Shortcut to do a submit action.</description>
                <parameters>
                    <parameter name="options" type="Object" usage="required">
                        <description>The options to pass to the action (see &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;doAction&quot; href=&quot;output/apf.form.BasicForm.html#doAction&quot;&gt;doAction&lt;/a&gt; for details)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="load" scope="instance">
                <description>Shortcut to do a load action.</description>
                <parameters>
                    <parameter name="options" type="Object" usage="required">
                        <description>The options to pass to the action (see &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;doAction&quot; href=&quot;output/apf.form.BasicForm.html#doAction&quot;&gt;doAction&lt;/a&gt; for details)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="updateRecord" scope="instance">
                <description>Persists the values in this form into the passed apf.data.Record object in a beginEdit/endEdit block.</description>
                <parameters>
                    <parameter name="record" type="Record" usage="required">
                        <description>The record to edit</description>
                    </parameter>
                </parameters>
            </method>
            <method name="loadRecord" scope="instance">
                <description>Loads an apf.data.Record into this form.</description>
                <parameters>
                    <parameter name="record" type="Record" usage="required">
                        <description>The record to load</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findField" scope="instance">
                <description>Find a apf.form.Field in this form by id, dataIndex, name or hiddenName.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The value to search for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="markInvalid" scope="instance">
                <description>Mark fields in this form invalid in bulk.</description>
                <parameters>
                    <parameter name="errors" type="Array/Object" usage="required">
                        <description>Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setValues" scope="instance">
                <description>Set values for fields in this form in bulk.</description>
                <parameters>
                    <parameter name="values" type="Array/Object" usage="required">
                        <description>Either an array in the form:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;pre&gt;[{id:'clientName', value:'Fred. Olsen Lines'},
                            {id:'portOfLoading', value:'FXT'},
                            {id:'portOfDischarge', value:'OSL'} ]&lt;/pre&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
                            or an object hash of the form:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;pre&gt;{
                            clientName: 'Fred. Olsen Lines',
                            portOfLoading: 'FXT',
                            portOfDischarge: 'OSL'
                        }&lt;/pre&gt;&lt;/code&gt;&lt;br&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getValues" scope="instance">
                <description>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.
                If multiple fields exist with the same name they are returned as an array.</description>
                <parameters>
                    <parameter name="asString" type="Boolean" usage="optional">
                        <description>(optional) false to return the values as an object (defaults to returning as a string)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearInvalid" scope="instance">
                <description>Clears all invalid messages in this form.</description>
                <parameters/>
            </method>
            <method name="reset" scope="instance">
                <description>Resets this form.</description>
                <parameters/>
            </method>
            <method name="add" scope="instance">
                <description>Add apf.form components to this form.</description>
                <parameters>
                    <parameter name="field1" type="Field" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="field2" type="Field" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                    <parameter name="etc" type="Field" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Removes a field from the items collection (does NOT remove its markup).</description>
                <parameters>
                    <parameter name="field" type="Field" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="render" scope="instance">
                <description>Iterates through the &lt;a ext:cls=&quot;apf.form.Field&quot; href=&quot;output/apf.form.Field.html&quot;&gt;Field&lt;/a&gt;s which have been &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;add&quot; href=&quot;output/apf.form.BasicForm.html#add&quot;&gt;add&lt;/a&gt;ed to this BasicForm,
                checks them for an id attribute, and calls &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;applyToMarkup&quot; href=&quot;output/apf.form.Field.html#applyToMarkup&quot;&gt;apf.form.Field.applyToMarkup&lt;/a&gt; on the existing dom element with that id.</description>
                <parameters/>
            </method>
            <method name="applyToFields" scope="instance">
                <description>Calls &lt;a ext:cls=&quot;apf&quot; ext:member=&quot;apply&quot; href=&quot;output/apf.html#apply&quot;&gt;apf.apply&lt;/a&gt; for all fields in this form with the passed object.</description>
                <parameters>
                    <parameter name="values" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="applyIfToFields" scope="instance">
                <description>Calls &lt;a ext:cls=&quot;apf&quot; ext:member=&quot;applyIf&quot; href=&quot;output/apf.html#applyIf&quot;&gt;apf.applyIf&lt;/a&gt; for all field in this form with the passed object.</description>
                <parameters>
                    <parameter name="values" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.Checkbox" superclass="apf.form.Field">
        <description>Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Checkbox</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="markInvalid" scope="instance">
                <description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description>
                <parameters/>
            </method>
            <method name="clearInvalid" scope="instance">
                <description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description>
                <parameters/>
            </method>
            <method name="getValue" scope="instance">
                <description>Returns the checked state of the checkbox.</description>
                <parameters/>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets the checked state of the checkbox.</description>
                <parameters>
                    <parameter name="checked" type="Boolean/String" usage="required">
                        <description>True, 'true', '1', or 'on' to check the checkbox, any other value will uncheck it.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.CheckboxGroup" superclass="apf.form.Field">
        <description>A grouping container for &lt;a ext:cls=&quot;apf.form.Checkbox&quot; href=&quot;output/apf.form.Checkbox.html&quot;&gt;apf.form.Checkbox&lt;/a&gt; controls.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new CheckboxGroup</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="initValue" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getValue" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
            <method name="getRawValue" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
            <method name="setValue" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
            <method name="setRawValue" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.ComboBox" superclass="apf.form.TriggerField">
        <description>A combobox control with support for autocomplete, remote-loading, paging and many other features.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new ComboBox.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="view" type="apf.DataView" scope="instance" access="read-write">
                <description>The &lt;a ext:cls=&quot;apf.DataView&quot; href=&quot;output/apf.DataView.html&quot;&gt;DataView&lt;/a&gt; used to display the ComboBox's options.</description>
            </property>
        </properties>
        <methods>
            <method name="setEditable" scope="instance">
                <description>Allow or prevent the user from directly editing the field text.  If false is passed,
                    the user will only be able to select from the items defined in the dropdown list.  This method
                is the runtime equivalent of setting the 'editable' config option at config time.</description>
                <parameters>
                    <parameter name="value" type="Boolean" usage="required">
                        <description>True to allow the user to directly edit the field text</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getValue" scope="instance">
                <description>Returns the currently selected field value or empty string if no value is set.</description>
                <parameters/>
            </method>
            <method name="clearValue" scope="instance">
                <description>Clears any text/value currently set in the field</description>
                <parameters/>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets the specified value into the field.  If the value finds a match, the corresponding record text
                    will be displayed in the field.  If the value does not match the data value of an existing item,
                    and the valueNotFoundText config option is defined, it will be displayed as the default field text.
                Otherwise the field will be blank (although the value will still be set).</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The value to match</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isExpanded" scope="instance">
                <description>Returns true if the dropdown list is expanded, else false.</description>
                <parameters/>
            </method>
            <method name="selectByValue" scope="instance">
                <description>Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
                The store must be loaded and the list expanded for this function to work, otherwise use setValue.</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The data value of the item to select</description>
                    </parameter>
                    <parameter name="scrollIntoView" type="Boolean" usage="required">
                        <description>False to prevent the dropdown list from autoscrolling to display the
                        selected item if it is not currently in view (defaults to true)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="select" scope="instance">
                <description>Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
                The store must be loaded and the list expanded for this function to work, otherwise use setValue.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The zero-based index of the list item to select</description>
                    </parameter>
                    <parameter name="scrollIntoView" type="Boolean" usage="required">
                        <description>False to prevent the dropdown list from autoscrolling to display the
                        selected item if it is not currently in view (defaults to true)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="doQuery" scope="instance">
                <description>Execute a query to filter the dropdown list.  Fires the &lt;a ext:cls=&quot;apf.form.ComboBox&quot; ext:member=&quot;beforequery&quot; href=&quot;output/apf.form.ComboBox.html#beforequery&quot;&gt;beforequery&lt;/a&gt; event prior to performing the
                query allowing the query action to be canceled if needed.</description>
                <parameters>
                    <parameter name="query" type="String" usage="required">
                        <description>The SQL query to execute</description>
                    </parameter>
                    <parameter name="forceAll" type="Boolean" usage="required">
                        <description>True to force the query to execute even if there are currently fewer characters
                            in the field than the minimum specified by the minChars config option. It also clears any filter previously
                        saved in the current store (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="collapse" scope="instance">
                <description>Hides the dropdown list if it is currently expanded. Fires the &lt;a ext:cls=&quot;apf.form.ComboBox&quot; ext:member=&quot;collapse&quot; href=&quot;output/apf.form.ComboBox.html#collapse&quot;&gt;collapse&lt;/a&gt; event on completion.</description>
                <parameters/>
            </method>
            <method name="expand" scope="instance">
                <description>Expands the dropdown list if it is currently hidden. Fires the &lt;a ext:cls=&quot;apf.form.ComboBox&quot; ext:member=&quot;expand&quot; href=&quot;output/apf.form.ComboBox.html#expand&quot;&gt;expand&lt;/a&gt; event on completion.</description>
                <parameters/>
            </method>
            <method name="onTriggerClick" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
            <method name="autoSize" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.DateField" superclass="apf.form.TriggerField">
        <description>Provides a date input field with a &lt;a ext:cls=&quot;apf.DatePicker&quot; href=&quot;output/apf.DatePicker.html&quot;&gt;apf.DatePicker&lt;/a&gt; dropdown and automatic date validation.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new DateField</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setDisabledDates" scope="instance">
                <description>Replaces any existing disabled dates with new values and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="disabledDates" type="Array" usage="required">
                        <description>An array of date strings (see the &lt;a ext:cls=&quot;apf.form.DateField&quot; ext:member=&quot;disabledDates&quot; href=&quot;output/apf.form.DateField.html#disabledDates&quot;&gt;disabledDates&lt;/a&gt; config
                        for details on supported values) used to disable a pattern of dates.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDisabledDays" scope="instance">
                <description>Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="disabledDays" type="Array" usage="required">
                        <description>An array of disabled day indexes. See the &lt;a ext:cls=&quot;apf.form.DateField&quot; ext:member=&quot;disabledDays&quot; href=&quot;output/apf.form.DateField.html#disabledDays&quot;&gt;disabledDays&lt;/a&gt; config
                        for details on supported values.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setMinValue" scope="instance">
                <description>Replaces any existing &lt;a ext:cls=&quot;apf.form.DateField&quot; ext:member=&quot;minValue&quot; href=&quot;output/apf.form.DateField.html#minValue&quot;&gt;minValue&lt;/a&gt; with the new value and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="value" type="Date" usage="required">
                        <description>The minimum date that can be selected</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setMaxValue" scope="instance">
                <description>Replaces any existing &lt;a ext:cls=&quot;apf.form.DateField&quot; ext:member=&quot;maxValue&quot; href=&quot;output/apf.form.DateField.html#maxValue&quot;&gt;maxValue&lt;/a&gt; with the new value and refreshes the DatePicker.</description>
                <parameters>
                    <parameter name="value" type="Date" usage="required">
                        <description>The maximum date that can be selected</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getValue" scope="instance">
                <description>Returns the current date value of the date field.</description>
                <parameters/>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid
                    date, using DateField.format as the date format, according to the same rules as &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;parseDate&quot; href=&quot;output/Date.html#parseDate&quot;&gt;Date.parseDate&lt;/a&gt;
                    (the default format used is &quot;m/d/Y&quot;).
                    &lt;br /&gt;Usage:
                    &lt;pre&gt;&lt;code&gt;//All of these calls set the same date value (May 4, 2006)

                    //Pass a date object:
                    var dt = new Date('5/4/2006');
                    dateField.setValue(dt);

                    //Pass a date string (default format):
                    dateField.setValue('05/04/2006');

                    //Pass a date string (custom format):
                    dateField.format = 'Y-m-d';
                dateField.setValue('2006-05-04');&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="date" type="String/Date" usage="required">
                        <description>The date or valid date string</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onTriggerClick" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
            <method name="autoSize" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.Field" superclass="apf.BoxComponent">
        <description>Base class for form fields that provides default event handling, sizing, value handling and other functionality.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Field</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getName" scope="instance">
                <description>Returns the name attribute of the field if available</description>
                <parameters/>
            </method>
            <method name="isDirty" scope="instance">
                <description>Returns true if this field has been changed since it was originally loaded and is not disabled.</description>
                <parameters/>
            </method>
            <method name="reset" scope="instance">
                <description>Resets the current field value to the originally loaded value and clears any validation messages</description>
                <parameters/>
            </method>
            <method name="isValid" scope="instance">
                <description>Returns whether or not the field value is currently valid</description>
                <parameters>
                    <parameter name="preventMark" type="Boolean" usage="required">
                        <description>True to disable marking the field invalid</description>
                    </parameter>
                </parameters>
            </method>
            <method name="validate" scope="instance">
                <description>Validates the field value</description>
                <parameters/>
            </method>
            <method name="markInvalid" scope="instance">
                <description>Mark this field as invalid, using &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;msgTarget&quot; href=&quot;output/apf.form.Field.html#msgTarget&quot;&gt;msgTarget&lt;/a&gt; to determine how to display the error and
                applying &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;invalidClass&quot; href=&quot;output/apf.form.Field.html#invalidClass&quot;&gt;invalidClass&lt;/a&gt; to the field's element.</description>
                <parameters>
                    <parameter name="msg" type="String" usage="optional">
                        <description>(optional) The validation message (defaults to &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;invalidText&quot; href=&quot;output/apf.form.Field.html#invalidText&quot;&gt;invalidText&lt;/a&gt;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearInvalid" scope="instance">
                <description>Clear any invalid styles/messages for this field</description>
                <parameters/>
            </method>
            <method name="getRawValue" scope="instance">
                <description>Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;getValue&quot; href=&quot;output/apf.form.Field.html#getValue&quot;&gt;getValue&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="getValue" scope="instance">
                <description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;getRawValue&quot; href=&quot;output/apf.form.Field.html#getRawValue&quot;&gt;getRawValue&lt;/a&gt;.</description>
                <parameters/>
            </method>
            <method name="setRawValue" scope="instance">
                <description>Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;setValue&quot; href=&quot;output/apf.form.Field.html#setValue&quot;&gt;setValue&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets a data value into the field and validates it.  To set the value directly without validation see &lt;a ext:cls=&quot;apf.form.Field&quot; ext:member=&quot;setRawValue&quot; href=&quot;output/apf.form.Field.html#setRawValue&quot;&gt;setRawValue&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to set</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.FieldSet" superclass="apf.Panel">
        <description>Standard container used for grouping form fields.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="header" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
            <property name="footer" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
        </properties>
        <methods>
            <method name="focus" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getBottomToolbar" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getTopToolbar" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="setIconClass" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.FormPanel" superclass="apf.Panel">
        <description>Standard form container.
            &lt;p&gt;&lt;b&gt;Although they are not listed, this class also accepts all the config options required to configure its internal &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;apf.form.BasicForm&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
            &lt;p&gt;The BasicForm is configured using the &lt;a ext:cls=&quot;apf.form.FormPanel&quot; ext:member=&quot;initialConfig&quot; href=&quot;output/apf.form.FormPanel.html#initialConfig&quot;&gt;initialConfig&lt;/a&gt; of the FormPanel - that is the configuration object passed to the constructor.
            This means that if you subclass FormPanel, and you wish to configure the BasicForm, you will need to insert any configuration options
            for the BasicForm into the &lt;tt&gt;&lt;b&gt;initialConfig&lt;/b&gt;&lt;/tt&gt; property. Applying BasicForm configuration settings to &lt;b&gt;&lt;tt&gt;this&lt;/tt&gt;&lt;/b&gt; will
            not affect the BasicForm's configuration.&lt;/p&gt;
            &lt;br&gt;&lt;br&gt;
            FormPanel uses a &lt;a ext:cls=&quot;apf.layout.FormLayout&quot; href=&quot;output/apf.layout.FormLayout.html&quot;&gt;apf.layout.FormLayout&lt;/a&gt; internally, and that is required for fields and labels to work correctly
            within the FormPanel's layout.  To nest additional layout styles within a FormPanel, you should nest additional Panels
            or other containers that can provide additional layout functionality. &lt;b&gt;You should not override FormPanel's layout.&lt;/b&gt;
            &lt;br&gt;&lt;br&gt;
            By default, apf Forms are submitted through Ajax, using &lt;a ext:cls=&quot;apf.form.Action&quot; href=&quot;output/apf.form.Action.html&quot;&gt;apf.form.Action&lt;/a&gt;.
            To enable normal browser submission of the apf Form contained in this FormPanel,
            override the Form's onSubmit, and submit methods:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;var myForm = new apf.form.FormPanel({
            onSubmit: apf.emptyFn,
            submit: function() {
            this.getForm().getEl().dom.submit();
            }
        });&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getForm" scope="instance">
                <description>Provides access to the &lt;a ext:cls=&quot;apf.form.BasicForm&quot; href=&quot;output/apf.form.BasicForm.html&quot;&gt;Form&lt;/a&gt; which this Panel contains.</description>
                <parameters/>
            </method>
            <method name="startMonitoring" scope="instance">
                <description>Starts monitoring of the valid state of this form. Usually this is done by passing the config
                option &quot;monitorValid&quot;</description>
                <parameters/>
            </method>
            <method name="stopMonitoring" scope="instance">
                <description>Stops monitoring of the valid state of this form</description>
                <parameters/>
            </method>
            <method name="load" scope="instance">
                <description>This is a proxy for the underlying BasicForm's &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;load&quot; href=&quot;output/apf.form.BasicForm.html#load&quot;&gt;apf.form.BasicForm.load&lt;/a&gt; call.</description>
                <parameters>
                    <parameter name="options" type="Object" usage="required">
                        <description>The options to pass to the action (see &lt;a ext:cls=&quot;apf.form.BasicForm&quot; ext:member=&quot;doAction&quot; href=&quot;output/apf.form.BasicForm.html#doAction&quot;&gt;apf.form.BasicForm.doAction&lt;/a&gt; for details)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.Hidden" superclass="apf.form.Field">
        <description>A basic hidden field for storing hidden values in forms that need to be passed in the form submit.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Hidden field.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.form.HtmlEditor" superclass="apf.form.Field">
        <description>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be
            automatically hidden when needed.  These are noted in the config options where appropriate.
            &lt;br&gt;&lt;br&gt;The editor's toolbar buttons have tooltips defined in the &lt;a ext:cls=&quot;apf.form.HtmlEditor&quot; ext:member=&quot;buttonTips&quot; href=&quot;output/apf.form.HtmlEditor.html#buttonTips&quot;&gt;buttonTips&lt;/a&gt; property, but they are not
            enabled by default unless the global &lt;a ext:cls=&quot;apf.QuickTips&quot; href=&quot;output/apf.QuickTips.html&quot;&gt;apf.QuickTips&lt;/a&gt; singleton is &lt;a ext:cls=&quot;apf.QuickTips&quot; ext:member=&quot;init&quot; href=&quot;output/apf.QuickTips.html#init&quot;&gt;initialized&lt;/a&gt;.
            &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: The focus/blur and validation marking functionality inherited from apf.form.Field is NOT
            supported by this editor.&lt;/b&gt;
            &lt;br&gt;&lt;br&gt;An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an Editor within
            any element that has display set to 'none' can cause problems in Safari and Firefox due to their default iframe reloading bugs.
            &lt;br&gt;&lt;br&gt;Example usage:
            &lt;pre&gt;&lt;code&gt;// Simple example rendered with default options:
            apf.QuickTips.init();  // enable tooltips
            new apf.form.HtmlEditor({
            renderTo: apf.getBody(),
            width: 800,
            height: 300
            });

            // Passed via xtype into a container and with custom options:
            apf.QuickTips.init();  // enable tooltips
            new apf.Panel({
            title: 'HTML Editor',
            renderTo: apf.getBody(),
            width: 600,
            height: 300,
            frame: true,
            layout: 'fit',
            items: {
            xtype: 'htmleditor',
            enableColors: false,
            enableAlignments: false
            }
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new HtmlEditor</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="buttonTips" type="Object" scope="instance" access="read-write">
                <description>Object collection of toolbar tooltips for the buttons in the editor. The key
                    is the command id associated with that button and the value is a valid QuickTips object.
                    For example:&#13;
                    &lt;pre&gt;&lt;code&gt;{
                    bold : {
                    title: 'Bold (Ctrl+B)',
                    text: 'Make the selected text bold.',
                    cls: 'x-html-editor-tip'
                    },
                    italic : {
                    title: 'Italic (Ctrl+I)',
                    text: 'Make the selected text italic.',
                    cls: 'x-html-editor-tip'
                    },
                ...&lt;/code&gt;&lt;/pre&gt;</description>
            </property>
            <property name="disabled" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
        </properties>
        <methods>
            <method name="getDocMarkup" scope="instance">
                <description>Protected method that will not generally be called directly. It
                    is called when the editor initializes the iframe with HTML contents. Override this method if you
                want to change the initialization markup of the iframe (e.g. to add stylesheets).</description>
                <parameters/>
            </method>
            <method name="toggleSourceEdit" scope="instance">
                <description>Toggles the editor between standard and source edit mode.</description>
                <parameters>
                    <parameter name="sourceEdit" type="Boolean" usage="optional">
                        <description>(optional) True for source edit, false for standard</description>
                    </parameter>
                </parameters>
            </method>
            <method name="markInvalid" scope="instance">
                <description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description>
                <parameters/>
            </method>
            <method name="clearInvalid" scope="instance">
                <description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description>
                <parameters/>
            </method>
            <method name="cleanHtml" scope="instance">
                <description>Protected method that will not generally be called directly. If you need/want
                custom HTML cleanup, this is the method you should override.</description>
                <parameters>
                    <parameter name="html" type="String" usage="required">
                        <description>The HTML to be cleaned
                        return {String} The cleaned HTML</description>
                    </parameter>
                </parameters>
            </method>
            <method name="syncValue" scope="instance">
                <description>Protected method that will not generally be called directly. Syncs the contents
                of the editor iframe with the textarea.</description>
                <parameters/>
            </method>
            <method name="pushValue" scope="instance">
                <description>Protected method that will not generally be called directly. Pushes the value of the textarea
                into the iframe editor.</description>
                <parameters/>
            </method>
            <method name="updateToolbar" scope="instance">
                <description>Protected method that will not generally be called directly. It triggers
                a toolbar update by reading the markup state of the current selection in the editor.</description>
                <parameters/>
            </method>
            <method name="relayCmd" scope="instance">
                <description>Executes a Midas editor command on the editor document and performs necessary focus and
                toolbar updates. &lt;b&gt;This should only be called after the editor is initialized.&lt;/b&gt;</description>
                <parameters>
                    <parameter name="cmd" type="String" usage="required">
                        <description>The Midas command</description>
                    </parameter>
                    <parameter name="value" type="String/Boolean" usage="optional">
                        <description>(optional) The value to pass to the command (defaults to null)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="execCmd" scope="instance">
                <description>Executes a Midas editor command directly on the editor document.
                    For visual commands, you should use &lt;a ext:cls=&quot;apf.form.HtmlEditor&quot; ext:member=&quot;relayCmd&quot; href=&quot;output/apf.form.HtmlEditor.html#relayCmd&quot;&gt;relayCmd&lt;/a&gt; instead.
                &lt;b&gt;This should only be called after the editor is initialized.&lt;/b&gt;</description>
                <parameters>
                    <parameter name="cmd" type="String" usage="required">
                        <description>The Midas command</description>
                    </parameter>
                    <parameter name="value" type="String/Boolean" usage="optional">
                        <description>(optional) The value to pass to the command (defaults to null)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insertAtCursor" scope="instance">
                <description>Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
                to insert text.</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getToolbar" scope="instance">
                <description>Returns the editor's toolbar. &lt;b&gt;This is only available after the editor has been rendered.&lt;/b&gt;</description>
                <parameters/>
            </method>
            <method name="applyToMarkup" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="validate" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="setDisabled" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.Label" superclass="apf.BoxComponent">
        <description>Basic Label field.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Label</description>
                <parameters>
                    <parameter name="config" type="apf.Element/String/Object" usage="required">
                        <description>The configuration options. If an element is passed, it is set as the internal
                            element and its id used as the component id. If a string is passed, it is assumed to be the id of an existing element
                        and is used as the component id. Otherwise, it is assumed to be a standard config object and is applied to the component.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setText" scope="instance">
                <description>Updates the label's innerHTML with the specified string.</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The new label text</description>
                    </parameter>
                    <parameter name="encode" type="Boolean" usage="optional">
                        <description>(optional) False to skip HTML-encoding the text when rendering it
                            to the label (defaults to true which encodes the value). This might be useful if you want to include
                        tags in the label's innerHTML rather than rendering them as string literals per the default logic.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.NumberField" superclass="apf.form.TextField">
        <description>Numeric text field that provides automatic keystroke filtering and numeric validation.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new NumberField</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.form.Radio" superclass="apf.form.Checkbox">
        <description>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
        Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Radio</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getGroupValue" scope="instance">
                <description>If this radio is part of a group, it will return the selected value</description>
                <parameters/>
            </method>
            <method name="setValue" scope="instance">
                <description>Sets either the checked/unchecked status of this Radio, or, if a string value
                is passed, checks a sibling Radio of the same name whose value is the value specified.</description>
                <parameters>
                    <parameter name="{String/Boolean}" type="value" usage="required">
                        <description>Checked value, or the value of the sibling radio button to check.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="markInvalid" scope="instance">
                <description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description>
                <parameters/>
            </method>
            <method name="clearInvalid" scope="instance">
                <description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.RadioGroup" superclass="apf.form.CheckboxGroup">
        <description>A grouping container for &lt;a ext:cls=&quot;apf.form.Radio&quot; href=&quot;output/apf.form.Radio.html&quot;&gt;apf.form.Radio&lt;/a&gt; controls.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new CheckboxGroup</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.form.TextArea" superclass="apf.form.TextField">
        <description>Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
        support for auto-sizing.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new TextArea</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="autoSize" scope="instance">
                <description>Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
                This only takes effect if grow = true, and fires the &lt;a ext:cls=&quot;apf.form.TextArea&quot; ext:member=&quot;autosize&quot; href=&quot;output/apf.form.TextArea.html#autosize&quot;&gt;autosize&lt;/a&gt; event if the height changes.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.TextField" superclass="apf.form.Field">
        <description>Basic text field.  Can be used as a direct replacement for traditional text inputs, or as the base
        class for more sophisticated input controls (like &lt;a ext:cls=&quot;apf.form.TextArea&quot; href=&quot;output/apf.form.TextArea.html&quot;&gt;apf.form.TextArea&lt;/a&gt; and &lt;a ext:cls=&quot;apf.form.ComboBox&quot; href=&quot;output/apf.form.ComboBox.html&quot;&gt;apf.form.ComboBox&lt;/a&gt;).</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new TextField</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="initComponent" scope="instance">
                <description></description>
                <parameters/>
            </method>
            <method name="reset" scope="instance">
                <description>Resets the current field value to the originally-loaded value and clears any validation messages.
                Also adds emptyText and emptyClass if the original value was blank.</description>
                <parameters/>
            </method>
            <method name="validateValue" scope="instance">
                <description>Validates a value according to the field's validation rules and marks the field as invalid
                if the validation fails</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to validate</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectText" scope="instance">
                <description>Selects text in this field</description>
                <parameters>
                    <parameter name="start" type="Number" usage="optional">
                        <description>(optional) The index where the selection should start (defaults to 0)</description>
                    </parameter>
                    <parameter name="end" type="Number" usage="optional">
                        <description>(optional) The index where the selection should end (defaults to the text length)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="autoSize" scope="instance">
                <description>Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
                This only takes effect if grow = true, and fires the &lt;a ext:cls=&quot;apf.form.TextField&quot; ext:member=&quot;autosize&quot; href=&quot;output/apf.form.TextField.html#autosize&quot;&gt;autosize&lt;/a&gt; event.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.TimeField" superclass="apf.form.ComboBox">
        <description>Provides a time input field with a time dropdown and automatic time validation.  Example usage:
            &lt;pre&gt;&lt;code&gt;new apf.form.TimeField({
            minValue: '9:00 AM',
            maxValue: '6:00 PM',
            increment: 30
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new TimeField</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="autoSize" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.form.TriggerField" superclass="apf.form.TextField">
        <description>Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
            The trigger has no default action, so you must assign a function to implement the trigger click handler by
            overriding &lt;a ext:cls=&quot;apf.form.TriggerField&quot; ext:member=&quot;onTriggerClick&quot; href=&quot;output/apf.form.TriggerField.html#onTriggerClick&quot;&gt;onTriggerClick&lt;/a&gt;. You can create a TriggerField directly, as it renders exactly like a combobox
            for which you can provide a custom implementation.  For example:
            &lt;pre&gt;&lt;code&gt;var trigger = new apf.form.TriggerField();
            trigger.onTriggerClick = myTriggerFn;
            trigger.applyToMarkup('my-field');&lt;/code&gt;&lt;/pre&gt;
            However, in general you will most likely want to use TriggerField as the base class for a reusable component.
        &lt;a ext:cls=&quot;apf.form.DateField&quot; href=&quot;output/apf.form.DateField.html&quot;&gt;apf.form.DateField&lt;/a&gt; and &lt;a ext:cls=&quot;apf.form.ComboBox&quot; href=&quot;output/apf.form.ComboBox.html&quot;&gt;apf.form.ComboBox&lt;/a&gt; are perfect examples of this.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new TriggerField.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options (valid {@apf.form.TextField} config options will also be applied
                        to the base TextField)</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="autoSize" scope="instance">
                <description>@hide</description>
                <parameters/>
            </method>
            <method name="onTriggerClick" scope="instance">
                <description>The function that should handle the trigger's click event.  This method does nothing by default until overridden
                by an implementing function.</description>
                <parameters>
                    <parameter name="e" type="EventObject" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.form.VTypes" superclass="Object">
        <description>Overridable validation definitions. The validations provided are basic and intended to be easily customizable and extended.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties>
            <property name="emailText" type="String" scope="instance" access="read-write">
                <description>The error text to display when the email validation function returns false</description>
            </property>
            <property name="emailMask" type="RegExp" scope="instance" access="read-write">
                <description>The keystroke filter mask to be applied on email input.  See the &lt;a ext:cls=&quot;apf.form.VTypes&quot; ext:member=&quot;email&quot; href=&quot;output/apf.form.VTypes.html#email&quot;&gt;email&lt;/a&gt; method for
                information about more complex email validation.</description>
            </property>
            <property name="urlText" type="String" scope="instance" access="read-write">
                <description>The error text to display when the url validation function returns false</description>
            </property>
            <property name="alphaText" type="String" scope="instance" access="read-write">
                <description>The error text to display when the alpha validation function returns false</description>
            </property>
            <property name="alphaMask" type="RegExp" scope="instance" access="read-write">
                <description>The keystroke filter mask to be applied on alpha input</description>
            </property>
            <property name="alphanumText" type="String" scope="instance" access="read-write">
                <description>The error text to display when the alphanumeric validation function returns false</description>
            </property>
            <property name="alphanumMask" type="RegExp" scope="instance" access="read-write">
                <description>The keystroke filter mask to be applied on alphanumeric input</description>
            </property>
        </properties>
        <methods>
            <method name="email" scope="instance">
                <description>The function used to validate email addresses.  Note that this is a very basic validation -- complete
                    validation per the email RFC specifications is very complex and beyond the scope of this class, although
                    this function can be overridden if a more comprehensive validation scheme is desired.  See the validation
                    section of the &lt;a href=&quot;http://en.wikipedia.org/wiki/E-mail_address&quot;&gt;Wikipedia article on email addresses&lt;/a&gt;
                for additional information.</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The email address</description>
                    </parameter>
                </parameters>
            </method>
            <method name="url" scope="instance">
                <description>The function used to validate URLs</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The URL</description>
                    </parameter>
                </parameters>
            </method>
            <method name="alpha" scope="instance">
                <description>The function used to validate alpha values</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The value</description>
                    </parameter>
                </parameters>
            </method>
            <method name="alphanum" scope="instance">
                <description>The function used to validate alphanumeric values</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The value</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.AbstractSelectionModel" superclass="apf.util.Observable">
        <description>Abstract base class for grid SelectionModels.  It provides the interface that should be
        implemented by descendant classes.  This class should not be directly instantiated.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters/>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="lock" scope="instance">
                <description>Locks the selections.</description>
                <parameters/>
            </method>
            <method name="unlock" scope="instance">
                <description>Unlocks the selections.</description>
                <parameters/>
            </method>
            <method name="isLocked" scope="instance">
                <description>Returns true if the selections are locked.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.grid.CellSelectionModel" superclass="apf.grid.AbstractSelectionModel">
        <description>This class provides the basic implementation for single cell selection in a grid. The object stored
            as the selection and returned by &lt;a ext:cls=&quot;getSelectedCell&quot; href=&quot;output/getSelectedCell.html&quot;&gt;getSelectedCell&lt;/a&gt; contains the following properties:
            &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;
            &lt;li&gt;&lt;b&gt;record&lt;/b&gt; : apf.data.record&lt;p class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;Record&lt;/a&gt;
            which provides the data for the row containing the selection&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;cell&lt;/b&gt; : apf.data.record&lt;p class=&quot;sub-desc&quot;&gt;An object containing the
            following properties:
            &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;
            &lt;li&gt;&lt;b&gt;rowIndex&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The index of the selected row&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;cellIndex&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The index of the selected cell&lt;br&gt;
            &lt;b&gt;Note that due to possible column reordering, the cellIndex should not be used as an index into
            the Record's data. Instead, the &lt;i&gt;name&lt;/i&gt; of the selected field should be determined
            in order to retrieve the data value from the record by name:&lt;/b&gt;&lt;pre&gt;&lt;code&gt;var fieldName = grid.getColumnModel().getDataIndex(cellIndex);
            var data = record.get(fieldName);&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
            &lt;/ul&gt;&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
        &lt;/ul&gt;&lt;/div&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The object containing the configuration of this model.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getSelectedCell" scope="instance">
                <description>Returns the currently selected cell's row and column indexes as an array (e.g., [0, 0]).</description>
                <parameters/>
            </method>
            <method name="clearSelections" scope="instance">
                <description>Clears all selections.</description>
                <parameters>
                    <parameter name="true" type="Boolean" usage="required">
                        <description>to prevent the gridview from being notified about the change.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hasSelection" scope="instance">
                <description>Returns true if there is a selection.</description>
                <parameters/>
            </method>
            <method name="select" scope="instance">
                <description>Selects a cell.</description>
                <parameters>
                    <parameter name="rowIndex" type="Number" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="collIndex" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.CheckboxSelectionModel" superclass="apf.grid.RowSelectionModel">
        <description>A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.grid.ColumnModel" superclass="apf.util.Observable">
        <description>This is the default implementation of a ColumnModel used by the Grid. This class is initialized
            with an Array of column config objects.
            &lt;br&gt;&lt;br&gt;
            An individual column's config object defines the header string, the &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt;
            field the column draws its data from, an optional rendering function to provide customized
            data formatting, and the ability to apply a CSS class to all cells in a column through its
            &lt;a ext:cls=&quot;apf.grid.ColumnModel&quot; ext:member=&quot;id&quot; href=&quot;output/apf.grid.ColumnModel.html#id&quot;&gt;id&lt;/a&gt; config option.&lt;br&gt;
            &lt;br&gt;Usage:&lt;br&gt;
            &lt;pre&gt;&lt;code&gt;var colModel = new apf.grid.ColumnModel([
            {header: &quot;Ticker&quot;, width: 60, sortable: true},
            {header: &quot;Company Name&quot;, width: 150, sortable: true},
            {header: &quot;Market Cap.&quot;, width: 100, sortable: true},
            {header: &quot;$ Sales&quot;, width: 100, sortable: true, renderer: money},
            {header: &quot;Employees&quot;, width: 100, sortable: true, resizable: false}
            ]);&lt;/code&gt;&lt;/pre&gt;
            &lt;p&gt;
            The config options &lt;b&gt;defined by&lt;/b&lt; this class are options which may appear in each
        individual column definition.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>An Array of column config objects. See this class's
                        config objects for details.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="defaultWidth" type="Number" scope="instance" access="read-write">
                <description>The width of columns which have no width specified (defaults to 100)</description>
            </property>
            <property name="defaultSortable" type="Boolean" scope="instance" access="read-write">
                <description>Default sortable of columns which have no sortable specified (defaults to false)</description>
            </property>
        </properties>
        <methods>
            <method name="getColumnId" scope="instance">
                <description>
                Returns the id of the column at the specified index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setConfig" scope="instance">
                <description>Reconfigures this column model</description>
                <parameters>
                    <parameter name="config" type="Array" usage="required">
                        <description>Array of Column configs</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getColumnById" scope="instance">
                <description>Returns the column for a specified id.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The column id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getIndexById" scope="instance">
                <description>Returns the index for a specified column id.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The column id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="moveColumn" scope="instance">
                <description>Moves a column from one position to another.</description>
                <parameters>
                    <parameter name="oldIndex" type="Number" usage="required">
                        <description>The index of the column to move.</description>
                    </parameter>
                    <parameter name="newIndex" type="Number" usage="required">
                        <description>The position at which to reinsert the coolumn.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getColumnCount" scope="instance">
                <description>Returns the number of columns.</description>
                <parameters/>
            </method>
            <method name="getColumnsBy" scope="instance">
                <description>Returns the column configs that return true by the passed function that is called with (columnConfig, index)</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isSortable" scope="instance">
                <description>Returns true if the specified column is sortable.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isMenuDisabled" scope="instance">
                <description>Returns true if the specified column menu is disabled.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRenderer" scope="instance">
                <description>Returns the rendering (formatting) function defined for the column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setRenderer" scope="instance">
                <description>Sets the rendering (formatting) function for a column.  See &lt;a ext:cls=&quot;apf.util.Format&quot; href=&quot;output/apf.util.Format.html&quot;&gt;apf.util.Format&lt;/a&gt; for some
                default formatting functions.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to use to process the cell's raw data
                            to return HTML markup for the grid view. The render function is called with
                            the following parameters:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;value&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;The data value for the cell.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;metadata&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;An object in which you may set the following attributes:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;css&lt;/b&gt; : String&lt;p class=&quot;sub-desc&quot;&gt;A CSS class name to add to the cell's TD element.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;attr&lt;/b&gt; : String&lt;p class=&quot;sub-desc&quot;&gt;An HTML attribute definition string to apply to the data container element &lt;i&gt;within&lt;/i&gt; the table cell
                            (e.g. 'style=&quot;color:red;&quot;').&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;record&lt;/b&gt; : apf.data.record&lt;p class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; from which the data was extracted.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;rowIndex&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;Row index&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;colIndex&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;Column index&lt;/p&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;store&lt;/b&gt; : apf.data.Store&lt;p class=&quot;sub-desc&quot;&gt;The &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; object from which the Record was extracted.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getColumnWidth" scope="instance">
                <description>Returns the width for the specified column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setColumnWidth" scope="instance">
                <description>Sets the width for a column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="width" type="Number" usage="required">
                        <description>The new width</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTotalWidth" scope="instance">
                <description>Returns the total width of all columns.</description>
                <parameters>
                    <parameter name="includeHidden" type="Boolean" usage="required">
                        <description>True to include hidden column widths</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getColumnHeader" scope="instance">
                <description>Returns the header for the specified column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setColumnHeader" scope="instance">
                <description>Sets the header for a column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="header" type="String" usage="required">
                        <description>The new header</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getColumnTooltip" scope="instance">
                <description>Returns the tooltip for the specified column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setColumnTooltip" scope="instance">
                <description>Sets the tooltip for a column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="tooltip" type="String" usage="required">
                        <description>The new tooltip</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getDataIndex" scope="instance">
                <description>Returns the dataIndex for the specified column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDataIndex" scope="instance">
                <description>Sets the dataIndex for a column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="dataIndex" type="String" usage="required">
                        <description>The new dataIndex</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findColumnIndex" scope="instance">
                <description>Finds the index of the first matching column for the given dataIndex.</description>
                <parameters>
                    <parameter name="col" type="String" usage="required">
                        <description>The dataIndex to find</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isCellEditable" scope="instance">
                <description>Returns true if the cell is editable.</description>
                <parameters>
                    <parameter name="colIndex" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="rowIndex" type="Number" usage="required">
                        <description>The row index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getCellEditor" scope="instance">
                <description>Returns the editor defined for the cell/column.</description>
                <parameters>
                    <parameter name="colIndex" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="rowIndex" type="Number" usage="required">
                        <description>The row index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setEditable" scope="instance">
                <description>Sets if a column is editable.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="editable" type="Boolean" usage="required">
                        <description>True if the column is editable</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isHidden" scope="instance">
                <description>Returns true if the column is hidden.</description>
                <parameters>
                    <parameter name="colIndex" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isFixed" scope="instance">
                <description>Returns true if the column width cannot be changed</description>
                <parameters/>
            </method>
            <method name="isResizable" scope="instance">
                <description>Returns true if the column can be resized</description>
                <parameters/>
            </method>
            <method name="setHidden" scope="instance">
                <description>Sets if a column is hidden.</description>
                <parameters>
                    <parameter name="colIndex" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="hidden" type="Boolean" usage="required">
                        <description>True if the column is hidden</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setEditor" scope="instance">
                <description>Sets the editor for a column.</description>
                <parameters>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                    <parameter name="editor" type="Object" usage="required">
                        <description>The editor object</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.EditorGridPanel" superclass="apf.grid.GridPanel">
        <description>Class for creating and editable grid.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="startEditing" scope="instance">
                <description>Starts editing the specified for the specified row/column</description>
                <parameters>
                    <parameter name="rowIndex" type="Number" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="colIndex" type="Number" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="stopEditing" scope="instance">
                <description>Stops any active editing</description>
                <parameters>
                    <parameter name="cancel" type="Boolean" usage="optional">
                        <description>(optional) True to cancel any changes</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.GridDragZone" superclass="apf.dd.DragZone">
        <description>&lt;p&gt;A customized implementation of a &lt;a ext:cls=&quot;apf.dd.DragZone&quot; href=&quot;output/apf.dd.DragZone.html&quot;&gt;DragZone&lt;/a&gt; which provides default implementations of two of the
            template methods of DragZone to enable dragging of the selected rows of a GridPanel.&lt;/p&gt;
            &lt;p&gt;A cooperating &lt;a ext:cls=&quot;apf.dd.DropZone&quot; href=&quot;output/apf.dd.DropZone.html&quot;&gt;DropZone&lt;/a&gt; must be created who's template method implementations of
            &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeEnter&quot; href=&quot;output/apf.dd.DropZone.html#onNodeEnter&quot;&gt;onNodeEnter&lt;/a&gt;, &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOver&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOver&quot;&gt;onNodeOver&lt;/a&gt;,
            &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOut&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOut&quot;&gt;onNodeOut&lt;/a&gt; and &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeDrop&quot; href=&quot;output/apf.dd.DropZone.html#onNodeDrop&quot;&gt;onNodeDrop&lt;/a&gt;&lt;/p&gt; are able
        to process the &lt;a ext:cls=&quot;apf.grid.GridDragZone&quot; ext:member=&quot;getDragData&quot; href=&quot;output/apf.grid.GridDragZone.html#getDragData&quot;&gt;data&lt;/a&gt; which is provided.</description>
        <properties/>
        <methods>
            <method name="getDragData" scope="instance">
                <description>&lt;p&gt;The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.&lt;/p&gt;
                    &lt;p&gt;This data is available for processing in the &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeEnter&quot; href=&quot;output/apf.dd.DropZone.html#onNodeEnter&quot;&gt;onNodeEnter&lt;/a&gt;, &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOver&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOver&quot;&gt;onNodeOver&lt;/a&gt;,
                    &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeOut&quot; href=&quot;output/apf.dd.DropZone.html#onNodeOut&quot;&gt;onNodeOut&lt;/a&gt; and &lt;a ext:cls=&quot;apf.dd.DropZone&quot; ext:member=&quot;onNodeDrop&quot; href=&quot;output/apf.dd.DropZone.html#onNodeDrop&quot;&gt;onNodeDrop&lt;/a&gt; methods of a cooperating &lt;a ext:cls=&quot;apf.dd.DropZone&quot; href=&quot;output/apf.dd.DropZone.html&quot;&gt;DropZone&lt;/a&gt;.&lt;/p&gt;
                    &lt;p&gt;The data object contains the following properties:&lt;ul&gt;
                    &lt;li&gt;&lt;b&gt;grid&lt;/b&gt; : apf.Grid.GridPanel&lt;div class=&quot;sub-desc&quot;&gt;The GridPanel from which the data is being dragged.&lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;ddel&lt;/b&gt; : htmlElement&lt;div class=&quot;sub-desc&quot;&gt;An htmlElement which provides the &quot;picture&quot; of the data being dragged.&lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;rowIndex&lt;/b&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The index of the row which receieved the mousedown gesture which triggered the drag.&lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;selections&lt;/b&gt; : Array&lt;div class=&quot;sub-desc&quot;&gt;An Array of the selected Records which are being dragged from the GridPanel.&lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;&lt;/p&gt;</description>
                <parameters/>
            </method>
            <method name="onInitDrag" scope="instance">
                <description>&lt;p&gt;The provided implementation of the onInitDrag method. Sets the &lt;tt&gt;innerHTML&lt;/tt&gt; of the drag proxy which provides the &quot;picture&quot;
                    of the data being dragged.&lt;/p&gt;
                &lt;p&gt;The &lt;tt&gt;innerHTML&lt;/tt&gt; data is found by calling the owning GridPanel's &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; ext:member=&quot;getDragDropText&quot; href=&quot;output/apf.grid.GridPanel.html#getDragDropText&quot;&gt;getDragDropText&lt;/a&gt;.&lt;/p&gt;</description>
                <parameters/>
            </method>
            <method name="afterRepair" scope="instance">
                <description>An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight
                the selected rows to show that they have not been dragged.</description>
                <parameters/>
            </method>
            <method name="getRepairXY" scope="instance">
                <description>&lt;p&gt;An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.&lt;/p&gt;
                &lt;p&gt;Called before a repair of an invalid drop to get the XY to animate to.&lt;/p&gt;</description>
                <parameters>
                    <parameter name="e" type="EventObject" usage="required">
                        <description>The mouse up event</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.GridPanel" superclass="apf.Panel">
        <description>This class represents the primary interface of a component based grid control.
            &lt;br&gt;&lt;br&gt;Usage:
            &lt;pre&gt;&lt;code&gt;var grid = new apf.grid.GridPanel({
            store: new apf.data.Store({
            reader: reader,
            data: xg.dummyData
            }),
            columns: [
            {id:'company', header: &quot;Company&quot;, width: 200, sortable: true, dataIndex: 'company'},
            {header: &quot;Price&quot;, width: 120, sortable: true, renderer: apf.util.Format.usMoney, dataIndex: 'price'},
            {header: &quot;Change&quot;, width: 120, sortable: true, dataIndex: 'change'},
            {header: &quot;% Change&quot;, width: 120, sortable: true, dataIndex: 'pctChange'},
            {header: &quot;Last Updated&quot;, width: 135, sortable: true, renderer: apf.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
            ],
            viewConfig: {
            forceFit: true
            },
            sm: new apf.grid.RowSelectionModel({singleSelect:true}),
            width:600,
            height:300,
            frame:true,
            title:'Framed with Checkbox Selection and Horizontal Scrolling',
            iconCls:'icon-grid'
            });&lt;/code&gt;&lt;/pre&gt;
            &lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;
            &lt;li&gt;Although this class inherits many configuration options from base classes, some of them
            (such as autoScroll, layout, items, etc) are not used by this class, and will have no effect.&lt;/li&gt;
            &lt;li&gt;A grid &lt;b&gt;requires&lt;/b&gt; a width in which to scroll its columns, and a height in which to scroll its rows. The dimensions can either
            be set through the &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; ext:member=&quot;height&quot; href=&quot;output/apf.grid.GridPanel.html#height&quot;&gt;height&lt;/a&gt; and &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; ext:member=&quot;width&quot; href=&quot;output/apf.grid.GridPanel.html#width&quot;&gt;width&lt;/a&gt; configuration options or automatically set by using the grid in a &lt;a ext:cls=&quot;apf.Container&quot; href=&quot;output/apf.Container.html&quot;&gt;Container&lt;/a&gt;
            who's &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;layout&lt;/a&gt; provides sizing of its child items.&lt;/li&gt;
            &lt;li&gt;To access the data in a Grid, it is necessary to use the data model encapsulated
            by the &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; ext:member=&quot;store&quot; href=&quot;output/apf.grid.GridPanel.html#store&quot;&gt;Store&lt;/a&gt;. See the &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; ext:member=&quot;cellclick&quot; href=&quot;output/apf.grid.GridPanel.html#cellclick&quot;&gt;cellclick&lt;/a&gt; event.&lt;/li&gt;
        &lt;/ul&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="ddText" type="String" scope="instance" access="read-write">
                <description>
                    Configures the text in the drag proxy (defaults to &quot;{0} selected row(s)&quot;).
                {0} is replaced with the number of selected rows.</description>
            </property>
            <property name="items" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
            <property name="disabled" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
        </properties>
        <methods>
            <method name="reconfigure" scope="instance">
                <description>Reconfigures the grid to use a different Store and Column Model.
                The View will be bound to the new objects and refreshed.</description>
                <parameters>
                    <parameter name="store" type="apf.data.Store" usage="required">
                        <description>The new &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; object</description>
                    </parameter>
                    <parameter name="colModel" type="apf.grid.ColumnModel" usage="required">
                        <description>The new &lt;a ext:cls=&quot;apf.grid.ColumnModel&quot; href=&quot;output/apf.grid.ColumnModel.html&quot;&gt;apf.grid.ColumnModel&lt;/a&gt; object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getGridEl" scope="instance">
                <description>Returns the grid's underlying element.</description>
                <parameters/>
            </method>
            <method name="getSelectionModel" scope="instance">
                <description>Returns the grid's SelectionModel.</description>
                <parameters/>
            </method>
            <method name="getStore" scope="instance">
                <description>Returns the grid's data store.</description>
                <parameters/>
            </method>
            <method name="getColumnModel" scope="instance">
                <description>Returns the grid's ColumnModel.</description>
                <parameters/>
            </method>
            <method name="getView" scope="instance">
                <description>Returns the grid's GridView object.</description>
                <parameters/>
            </method>
            <method name="getDragDropText" scope="instance">
                <description>Called to get grid's drag proxy text, by default returns this.ddText.</description>
                <parameters/>
            </method>
            <method name="add" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="cascade" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="doLayout" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="find" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="findBy" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="findById" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="findByType" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getComponent" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getLayout" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getUpdater" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="insert" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="load" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="remove" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="applyToMarkup" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="setDisabled" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.grid.GridView" superclass="apf.util.Observable">
        <description>&lt;p&gt;This class encapsulates the user interface of an &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; href=&quot;output/apf.grid.GridPanel.html&quot;&gt;apf.grid.GridPanel&lt;/a&gt;.
            Methods of this class may be used to access user interface elements to enable
            special display effects. Do not change the DOM structure of the user interface.&lt;/p&gt;
            &lt;p&gt;This class does not provide ways to manipulate the underlying data. The data
        model of a Grid is held in an &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;.&lt;/p&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="dragZone" type="apf.grid.GridDragZone&#10;&lt;p&gt;&lt;b&gt;This" scope="instance" access="read-write">
                <description></description>
            </property>
            <property name="scrollOffset" type="Number" scope="instance" access="read-write">
                <description>The amount of space to reserve for the scrollbar (defaults to 19 pixels)</description>
            </property>
            <property name="sortClasses" type="Array" scope="instance" access="read-write">
                <description>The CSS classes applied to a header when it is sorted. (defaults to [&quot;sort-asc&quot;, &quot;sort-desc&quot;])</description>
            </property>
            <property name="sortAscText" type="String" scope="instance" access="read-write">
                <description>The text displayed in the &quot;Sort Ascending&quot; menu item</description>
            </property>
            <property name="sortDescText" type="String" scope="instance" access="read-write">
                <description>The text displayed in the &quot;Sort Descending&quot; menu item</description>
            </property>
            <property name="columnsText" type="String" scope="instance" access="read-write">
                <description>The text displayed in the &quot;Columns&quot; menu item</description>
            </property>
        </properties>
        <methods>
            <method name="getRowClass" scope="instance">
                <description>Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom
                    parameters to the row template for the current row to customize how it is rendered using the &lt;b&gt;rowParams&lt;/b&gt;
                    parameter.  This function should return the CSS class name (or empty string '' for none) that will be added
                    to the row's wrapping div.  To apply multiple class names, simply return them space-delimited within the string
                (e.g., 'my-class another-class').</description>
                <parameters>
                    <parameter name="record" type="Record" usage="required">
                        <description>The &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; corresponding to the current row</description>
                    </parameter>
                    <parameter name="index" type="Number" usage="required">
                        <description>The row index</description>
                    </parameter>
                    <parameter name="rowParams" type="Object" usage="required">
                        <description>A config object that is passed to the row template during rendering that allows
                            customization of various aspects of a body row, if applicable. Note that this object will only be applied if
                            &lt;a ext:cls=&quot;apf.grid.GridView&quot; ext:member=&quot;enableRowBody&quot; href=&quot;output/apf.grid.GridView.html#enableRowBody&quot;&gt;enableRowBody&lt;/a&gt; = true, otherwise it will be ignored. The object may contain any of these properties:&lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;body&lt;/code&gt; : String &lt;div class=&quot;sub-desc&quot;&gt;An HTML fragment to be rendered as the cell's body content (defaults to '').&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;bodyStyle&lt;/code&gt; : String &lt;div class=&quot;sub-desc&quot;&gt;A CSS style string that will be applied to the row's TR style attribute (defaults to '').&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;cols&lt;/code&gt; : Number &lt;div class=&quot;sub-desc&quot;&gt;The column count to apply to the body row's TD colspan attribute (defaults to the current
                            column count of the grid).&lt;/div&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                    <parameter name="store" type="Store" usage="required">
                        <description>The &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt; this grid is bound to</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRow" scope="instance">
                <description>Return the &amp;lt;TR&gt; HtmlElement which represents a Grid row for the specified index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The row index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getCell" scope="instance">
                <description>Returns the grid's &amp;lt;TD&gt; HtmlElement at the specified coordinates.</description>
                <parameters>
                    <parameter name="row" type="Number" usage="required">
                        <description>The row index in which to find the cell.</description>
                    </parameter>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index of the cell.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getHeaderCell" scope="instance">
                <description>Return the &amp;lt;TD&gt; HtmlElement which represents the Grid's header cell for the specified column index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="scrollToTop" scope="instance">
                <description>Scrolls the grid to the top</description>
                <parameters/>
            </method>
            <method name="focusRow" scope="instance">
                <description>Focuses the specified row.</description>
                <parameters>
                    <parameter name="row" type="Number" usage="required">
                        <description>The row index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="focusCell" scope="instance">
                <description>Focuses the specified cell.</description>
                <parameters>
                    <parameter name="row" type="Number" usage="required">
                        <description>The row index</description>
                    </parameter>
                    <parameter name="col" type="Number" usage="required">
                        <description>The column index</description>
                    </parameter>
                </parameters>
            </method>
            <method name="refresh" scope="instance">
                <description>Refreshs the grid UI</description>
                <parameters>
                    <parameter name="headersToo" type="Boolean" usage="optional">
                        <description>(optional) True to also refresh the headers</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.GroupingView" superclass="apf.grid.GridView">
        <description>Adds the ability for single level grouping to the grid.
            &lt;pre&gt;&lt;code&gt;var grid = new apf.grid.GridPanel({
            // A groupingStore is required for a GroupingView
            store: new apf.data.GroupingStore({
            reader: reader,
            data: xg.dummyData,
            sortInfo:{field: 'company', direction: &quot;ASC&quot;},
            groupField:'industry'
            }),

            columns: [
            {id:'company',header: &quot;Company&quot;, width: 60, sortable: true, dataIndex: 'company'},
            {header: &quot;Price&quot;, width: 20, sortable: true, renderer: apf.util.Format.usMoney, dataIndex: 'price'},
            {header: &quot;Change&quot;, width: 20, sortable: true, dataIndex: 'change', renderer: apf.util.Format.usMoney},
            {header: &quot;Industry&quot;, width: 20, sortable: true, dataIndex: 'industry'},
            {header: &quot;Last Updated&quot;, width: 20, sortable: true, renderer: apf.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
            ],

            view: new apf.grid.GroupingView({
            forceFit:true,
            // custom grouping text template to display the number of items per group
            groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length &gt; 1 ? &quot;Items&quot; : &quot;Item&quot;]})'
            }),

            frame:true,
            width: 700,
            height: 450,
            collapsible: true,
            animCollapse: false,
            title: 'Grouping Example',
            iconCls: 'icon-grid',
            renderTo: document.body
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="toggleGroup" scope="instance">
                <description>Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.</description>
                <parameters>
                    <parameter name="groupId" type="String" usage="required">
                        <description>The groupId assigned to the group (see getGroupId)</description>
                    </parameter>
                    <parameter name="expanded" type="Boolean" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toggleAllGroups" scope="instance">
                <description>Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.</description>
                <parameters>
                    <parameter name="expanded" type="Boolean" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="expandAllGroups" scope="instance">
                <description>Expands all grouped rows.</description>
                <parameters/>
            </method>
            <method name="collapseAllGroups" scope="instance">
                <description>Collapses all grouped rows.</description>
                <parameters/>
            </method>
            <method name="getGroupId" scope="instance">
                <description>Dynamically tries to determine the groupId of a specific value</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.grid.PropertyColumnModel" superclass="apf.grid.ColumnModel">
        <description>A custom column model for the &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; href=&quot;output/apf.grid.PropertyGrid.html&quot;&gt;apf.grid.PropertyGrid&lt;/a&gt;.  Generally it should not need to be used directly.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="grid" type="apf.grid.Grid" usage="required">
                        <description>The grid this store will be bound to</description>
                    </parameter>
                    <parameter name="source" type="Object" usage="required">
                        <description>The source data config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.grid.PropertyGrid" superclass="apf.grid.EditorGridPanel">
        <description>A specialized grid implementation intended to mimic the traditional property grid as typically seen in
            development IDEs.  Each row in the grid represents a property of some object, and the data is stored
            as a set of name/value pairs in &lt;a ext:cls=&quot;apf.grid.PropertyRecord&quot; href=&quot;output/apf.grid.PropertyRecord.html&quot;&gt;apf.grid.PropertyRecord&lt;/a&gt;s.  Example usage:
            &lt;pre&gt;&lt;code&gt;
            var grid = new apf.grid.PropertyGrid({
            title: 'Properties Grid',
            autoHeight: true,
            width: 300,
            renderTo: 'grid-ct',
            source: {
            &quot;(name)&quot;: &quot;My Object&quot;,
            &quot;Created&quot;: new Date(Date.parse('10/15/2006')),
            &quot;Available&quot;: false,
            &quot;Version&quot;: .01,
            &quot;Description&quot;: &quot;A test object&quot;
            }
        });&lt;/pre&gt;&lt;/code&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The grid config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setSource" scope="instance">
                <description>Sets the source data object containing the property data.  The data object can contain one or more name/value
                    pairs representing all of the properties of an object to display in the grid, and this data will automatically
                    be loaded into the grid's &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; ext:member=&quot;store&quot; href=&quot;output/apf.grid.PropertyGrid.html#store&quot;&gt;store&lt;/a&gt;.  The values should be supplied in the proper data type if needed,
                    otherwise string type will be assumed.  If the grid already contains data, this method will replace any
                    existing data.  See also the &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; ext:member=&quot;source&quot; href=&quot;output/apf.grid.PropertyGrid.html#source&quot;&gt;source&lt;/a&gt; config value.  Example usage:
                    &lt;pre&gt;&lt;code&gt;grid.setSource({
                    &quot;(name)&quot;: &quot;My Object&quot;,
                    &quot;Created&quot;: new Date(Date.parse('10/15/2006')),  // date type
                    &quot;Available&quot;: false,  // boolean type
                    &quot;Version&quot;: .01,      // decimal type
                    &quot;Description&quot;: &quot;A test object&quot;
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="source" type="Object" usage="required">
                        <description>The data object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getSource" scope="instance">
                <description>Gets the source data object containing the property data.  See &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; ext:member=&quot;setSource&quot; href=&quot;output/apf.grid.PropertyGrid.html#setSource&quot;&gt;setSource&lt;/a&gt; for details regarding the
                format of the data object.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.grid.PropertyRecord" superclass="Object">
        <description>A specific &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;apf.data.Record&lt;/a&gt; type that represents a name/value pair and is made to work with the
            &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; href=&quot;output/apf.grid.PropertyGrid.html&quot;&gt;apf.grid.PropertyGrid&lt;/a&gt;.  Typically, PropertyRecords do not need to be created directly as they can be
            created implicitly by simply using the appropriate data configs either via the &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; ext:member=&quot;source&quot; href=&quot;output/apf.grid.PropertyGrid.html#source&quot;&gt;apf.grid.PropertyGrid.source&lt;/a&gt;
            config property or by calling &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; ext:member=&quot;setSource&quot; href=&quot;output/apf.grid.PropertyGrid.html#setSource&quot;&gt;apf.grid.PropertyGrid.setSource&lt;/a&gt;.  However, if the need arises, these records
            can also be created explicitly as shwon below.  Example usage:
            &lt;pre&gt;&lt;code&gt;var rec = new apf.grid.PropertyRecord({
            name: 'Birthday',
            value: new Date(Date.parse('05/26/1972'))
            });
            // Add record to an already populated grid
        grid.store.addSorted(rec);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A data object in the format: {name: [name], value: [value]}. The specified value's type
                        will be read automatically by the grid to determine the type of editor to use when displaying it.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.grid.PropertyStore" superclass="apf.util.Observable">
        <description>A custom wrapper for the &lt;a ext:cls=&quot;apf.grid.PropertyGrid&quot; href=&quot;output/apf.grid.PropertyGrid.html&quot;&gt;apf.grid.PropertyGrid&lt;/a&gt;'s &lt;a ext:cls=&quot;apf.data.Store&quot; href=&quot;output/apf.data.Store.html&quot;&gt;apf.data.Store&lt;/a&gt;. This class handles the mapping
            between the custom data source objects supported by the grid and the &lt;a ext:cls=&quot;apf.grid.PropertyRecord&quot; href=&quot;output/apf.grid.PropertyRecord.html&quot;&gt;apf.grid.PropertyRecord&lt;/a&gt; format
            required for compatibility with the underlying store. Generally this class should not need to be used directly --
        the grid's data should be accessed from the underlying store via the &lt;a ext:cls=&quot;apf.grid.PropertyStore&quot; ext:member=&quot;store&quot; href=&quot;output/apf.grid.PropertyStore.html#store&quot;&gt;store&lt;/a&gt; property.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="grid" type="apf.grid.Grid" usage="required">
                        <description>The grid this store will be bound to</description>
                    </parameter>
                    <parameter name="source" type="Object" usage="required">
                        <description>The source data config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.grid.RowNumberer" superclass="Object">
        <description>This is a utility class that can be passed into a &lt;a ext:cls=&quot;apf.grid.ColumnModel&quot; href=&quot;output/apf.grid.ColumnModel.html&quot;&gt;apf.grid.ColumnModel&lt;/a&gt; as a column config that provides
            an automatic row numbering column.
            &lt;br&gt;Usage:&lt;br&gt;&#13;
            &lt;pre&gt;&lt;code&gt;// This is a typical column config with the first column providing row numbers
            var colModel = new apf.grid.ColumnModel([
            new apf.grid.RowNumberer(),
            {header: &quot;Name&quot;, width: 80, sortable: true},
            {header: &quot;Code&quot;, width: 50, sortable: true},
            {header: &quot;Description&quot;, width: 200, sortable: true}
        ]);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.grid.RowSelectionModel" superclass="apf.grid.AbstractSelectionModel">
        <description>The default SelectionModel used by &lt;a ext:cls=&quot;apf.grid.GridPanel&quot; href=&quot;output/apf.grid.GridPanel.html&quot;&gt;apf.grid.GridPanel&lt;/a&gt;.
            It supports multiple selections and keyboard selection/navigation. The objects stored
            as selections and returned by &lt;a ext:cls=&quot;apf.grid.RowSelectionModel&quot; ext:member=&quot;getSelected&quot; href=&quot;output/apf.grid.RowSelectionModel.html#getSelected&quot;&gt;getSelected&lt;/a&gt;, and &lt;a ext:cls=&quot;apf.grid.RowSelectionModel&quot; ext:member=&quot;getSelections&quot; href=&quot;output/apf.grid.RowSelectionModel.html#getSelections&quot;&gt;getSelections&lt;/a&gt; are
        the &lt;a ext:cls=&quot;apf.data.Record&quot; href=&quot;output/apf.data.Record.html&quot;&gt;Record&lt;/a&gt;s which provide the data for the selected rows.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="selectRecords" scope="instance">
                <description>Select records.</description>
                <parameters>
                    <parameter name="records" type="Array" usage="required">
                        <description>The records to select</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to keep existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getCount" scope="instance">
                <description>Gets the number of selected rows.</description>
                <parameters/>
            </method>
            <method name="selectFirstRow" scope="instance">
                <description>Selects the first row in the grid.</description>
                <parameters/>
            </method>
            <method name="selectLastRow" scope="instance">
                <description>Select the last row.</description>
                <parameters>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to keep existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectNext" scope="instance">
                <description>Selects the row immediately following the last selected row.</description>
                <parameters>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to keep existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectPrevious" scope="instance">
                <description>Selects the row that precedes the last selected row.</description>
                <parameters>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to keep existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hasNext" scope="instance">
                <description>Returns true if there is a next record to select</description>
                <parameters/>
            </method>
            <method name="hasPrevious" scope="instance">
                <description>Returns true if there is a previous record to select</description>
                <parameters/>
            </method>
            <method name="getSelections" scope="instance">
                <description>Returns the selected records</description>
                <parameters/>
            </method>
            <method name="getSelected" scope="instance">
                <description>Returns the first selected record.</description>
                <parameters/>
            </method>
            <method name="each" scope="instance">
                <description>Calls the passed function with each selection. If the function returns false, iteration is
                stopped and this function returns false. Otherwise it returns true.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearSelections" scope="instance">
                <description>Clears all selections.</description>
                <parameters/>
            </method>
            <method name="selectAll" scope="instance">
                <description>Selects all rows.</description>
                <parameters/>
            </method>
            <method name="hasSelection" scope="instance">
                <description>Returns True if there is a selection.</description>
                <parameters/>
            </method>
            <method name="isSelected" scope="instance">
                <description>Returns True if the specified row is selected.</description>
                <parameters>
                    <parameter name="record" type="Number/Record" usage="required">
                        <description>The record or index of the record to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isIdSelected" scope="instance">
                <description>Returns True if the specified record id is selected.</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of record to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectRows" scope="instance">
                <description>Selects multiple rows.</description>
                <parameters>
                    <parameter name="rows" type="Array" usage="required">
                        <description>Array of the indexes of the row to select</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to keep existing selections (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectRange" scope="instance">
                <description>Selects a range of rows. All rows in between startRow and endRow are also selected.</description>
                <parameters>
                    <parameter name="startRow" type="Number" usage="required">
                        <description>The index of the first row in the range</description>
                    </parameter>
                    <parameter name="endRow" type="Number" usage="required">
                        <description>The index of the last row in the range</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to retain existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="deselectRange" scope="instance">
                <description>Deselects a range of rows. All rows in between startRow and endRow are also deselected.</description>
                <parameters>
                    <parameter name="startRow" type="Number" usage="required">
                        <description>The index of the first row in the range</description>
                    </parameter>
                    <parameter name="endRow" type="Number" usage="required">
                        <description>The index of the last row in the range</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectRow" scope="instance">
                <description>Selects a row.</description>
                <parameters>
                    <parameter name="row" type="Number" usage="required">
                        <description>The index of the row to select</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="optional">
                        <description>(optional) True to keep existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="deselectRow" scope="instance">
                <description>Deselects a row.</description>
                <parameters>
                    <parameter name="row" type="Number" usage="required">
                        <description>The index of the row to deselect</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.layout.AbsoluteLayout" superclass="apf.layout.AnchorLayout">
        <description>&lt;p&gt;Inherits the anchoring of &lt;a ext:cls=&quot;apf.layout.AnchorLayout&quot; href=&quot;output/apf.layout.AnchorLayout.html&quot;&gt;apf.layout.AnchorLayout&lt;/a&gt; and adds the ability for x/y positioning using the
        standard x and y component config options.&lt;/p&gt;</description>
        <properties>
            <property name="activeItem" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.layout.Accordion" superclass="apf.layout.FitLayout">
        <description>&lt;p&gt;This is a layout that contains multiple panels in an expandable accordion style such that only one
            panel can be open at any given time.  Each panel has built-in support for expanding and collapsing.
            This class is intended to be extended or created via the layout:'accordion' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt;
            config, and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be passed in via
            the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layoutConfig&quot; href=&quot;output/apf.Container.html#layoutConfig&quot;&gt;apf.Container.layoutConfig&lt;/a&gt; object which will then be applied internally to the layout.
            Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var accordion = new apf.Panel({
            title: 'Accordion Layout',
            layout:'accordion',
            defaults: {
            // applied to each contained panel
            bodyStyle: 'padding:15px'
            },
            layoutConfig: {
            // layout-specific configs go here
            titleCollapse: false,
            animate: true,
            activeOnTop: true
            },
            items: [{
            title: 'Panel 1',
            html: '&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;'
            },{
            title: 'Panel 2',
            html: '&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;'
            },{
            title: 'Panel 3',
            html: '&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;'
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.layout.AnchorLayout" superclass="apf.layout.ContainerLayout">
        <description>&lt;p&gt;This is a layout that enables anchoring of contained elements relative to the container's dimensions.  If
            the container is resized, all anchored items are automatically rerendered according to their anchor rules.
            This class is intended to be extended or created via the layout:'anchor' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt; config,
            and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;AnchorLayout does not have any direct config options (other than inherited ones).  However, the container
            using the AnchorLayout can supply an anchoring-specific config property of &lt;b&gt;anchorSize&lt;/b&gt;.  By default,
            AnchorLayout will calculate anchor measurements based on the size of the container itself.  However, if
            anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating anchor
            measurements based on it instead, allowing the container to be sized independently of the anchoring logic if necessary.&lt;/p&gt;
            &lt;p&gt;The items added to an AnchorLayout can also supply an anchoring-specific config property of &lt;b&gt;anchor&lt;/b&gt; which
            is a string containing two values: the horizontal anchor value and the vertical anchor value (for example, '100% 50%').
            This value is what tells the layout how the item should be anchored to the container.  The following types of
            anchor values are supported:
            &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;Percentage&lt;/b&gt;: Any value between 1 and 100, expressed as a percentage.  The first anchor is the percentage
            width that the item should take up within the container, and the second is the percentage height.  Example: '100% 50%'
            would render an item the complete width of the container and 1/2 its height.  If only one anchor value is supplied
            it is assumed to be the width value and the height will default to auto.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Offsets&lt;/b&gt;: Any positive or negative integer value.  The first anchor is the offset from the right edge of
            the container, and the second is the offset from the bottom edge.  Example: '-50 -100' would render an item the
            complete width of the container minus 50 pixels and the complete height minus 100 pixels.  If only one anchor value
            is supplied it is assumed to be the right offset value and the bottom offset will default to 0.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Sides&lt;/b&gt;: Valid values are 'right' (or 'r') and 'bottom' (or 'b').  Either the container must have a fixed
            size or an anchorSize config value defined at render time in order for these to have any effect.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Anchor values can also be mixed as needed.  For example, '-50 75%' would render the width offset from the
        container right edge by 50 pixels and 75% of the container's height.&lt;/p&gt;</description>
        <properties>
            <property name="activeItem" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.layout.BorderLayout" superclass="apf.layout.ContainerLayout">
        <description>&lt;p&gt;This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic
            split bars between regions and built-in expanding and collapsing of regions.
            This class is intended to be extended or created via the layout:'border' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt; config,
            and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;BorderLayout does not have any direct config options (other than inherited ones).  All configs available
            for customizing the BorderLayout are at the &lt;a ext:cls=&quot;apf.layout.BorderLayout.Region&quot; href=&quot;output/apf.layout.BorderLayout.Region.html&quot;&gt;apf.layout.BorderLayout.Region&lt;/a&gt; and
            &lt;a ext:cls=&quot;apf.layout.BorderLayout.SplitRegion&quot; href=&quot;output/apf.layout.BorderLayout.SplitRegion.html&quot;&gt;apf.layout.BorderLayout.SplitRegion&lt;/a&gt; levels.&lt;/p&gt;
            &lt;p&gt;&lt;b&gt;The regions of a BorderLayout are fixed at render time and thereafter, no regions may be removed or
            added.&lt;/b&gt;&lt;/p&gt;
            &lt;p&gt;Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var border = new apf.Panel({
            title: 'Border Layout',
            layout:'border',
            items: [{
            title: 'South Panel',
            region: 'south',
            height: 100,
            minSize: 75,
            maxSize: 250,
            margins: '0 5 5 5'
            },{
            title: 'West Panel',
            region:'west',
            margins: '5 0 0 5',
            cmargins: '5 5 0 5',
            width: 200,
            minSize: 100,
            maxSize: 300
            },{
            title: 'Main Content',
            region:'center',
            margins: '5 5 0 0'
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="activeItem" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.layout.BorderLayout.Region" superclass="Object">
        <description>This is a region of a BorderLayout that acts as a subcontainer within the layout.  Each region has its own
            layout that is independent of other regions and the containing BorderLayout, and can be any of the valid
            apf layout types.  Region size is managed automatically and cannot be changed by the user -- for resizable
        regions, see &lt;a ext:cls=&quot;apf.layout.BorderLayout.SplitRegion&quot; href=&quot;output/apf.layout.BorderLayout.SplitRegion.html&quot;&gt;apf.layout.BorderLayout.SplitRegion&lt;/a&gt;.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new Region.</description>
                <parameters>
                    <parameter name="layout" type="Layout" usage="required">
                        <description>Any valid apf layout class</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The region position. Valid values are: north, south, east, west and center. Every
                        BorderLayout must have a center region for the primary content -- all other regions are optional.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="isCollapsed" type="Boolean" scope="instance" access="read-write">
                <description>True if this region is collapsed. Read-only.</description>
            </property>
            <property name="position" type="String" scope="instance" access="read-write">
                <description>
                This region's layout position (north, south, east, west or center).  Read-only.</description>
            </property>
        </properties>
        <methods>
            <method name="isVisible" scope="instance">
                <description>True if this region is currently visible, else false.</description>
                <parameters/>
            </method>
            <method name="getMargins" scope="instance">
                <description>Returns the current margins for this region.  If the region is collapsed, the cmargins (collapsed
                margins) value will be returned, otherwise the margins value will be returned.</description>
                <parameters/>
            </method>
            <method name="getSize" scope="instance">
                <description>Returns the current size of this region.  If the region is collapsed, the size of the collapsedEl will
                be returned, otherwise the size of the region's panel will be returned.</description>
                <parameters/>
            </method>
            <method name="setPanel" scope="instance">
                <description>Sets the specified panel as the container element for this region.</description>
                <parameters>
                    <parameter name="panel" type="apf.Panel" usage="required">
                        <description>The new panel</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getMinWidth" scope="instance">
                <description>Returns the minimum allowable width for this region.</description>
                <parameters/>
            </method>
            <method name="getMinHeight" scope="instance">
                <description>Returns the minimum allowable height for this region.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.layout.BorderLayout.SplitRegion" superclass="apf.layout.BorderLayout.Region">
        <description>This is a specialized type of BorderLayout region that has a built-in &lt;a ext:cls=&quot;apf.SplitBar&quot; href=&quot;output/apf.SplitBar.html&quot;&gt;apf.SplitBar&lt;/a&gt; for user resizing of regions.</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new SplitRegion.</description>
                <parameters>
                    <parameter name="layout" type="Layout" usage="required">
                        <description>Any valid apf layout class</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration options</description>
                    </parameter>
                    <parameter name="position" type="String" usage="required">
                        <description>The region position. Valid values are: north, south, east, west and center. Every
                        BorderLayout must have a center region for the primary content -- all other regions are optional.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="getSplitBar" scope="instance">
                <description>Returns a reference to the split bar in use by this region.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.layout.CardLayout" superclass="apf.layout.FitLayout">
        <description>&lt;p&gt;This layout contains multiple panels, each fit to the container, where only a single panel can be
            visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
            This class is intended to be extended or created via the layout:'card' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt; config,
            and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;The CardLayout's focal method is &lt;a ext:cls=&quot;apf.layout.CardLayout&quot; ext:member=&quot;setActiveItem&quot; href=&quot;output/apf.layout.CardLayout.html#setActiveItem&quot;&gt;setActiveItem&lt;/a&gt;.  Since only one panel is displayed at a time,
            the only way to move from one panel to the next is by calling setActiveItem, passing the id or index of
            the next panel to display.  The layout itself does not provide a mechanism for handling this navigation,
            so that functionality must be provided by the developer.&lt;/p&gt;
            &lt;p&gt;In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
            to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
            common navigation routine -- for this example, the implementation of that routine has been ommitted since
            it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a
            completely different implementation.  For serious implementations, a better approach would be to extend
            CardLayout to provide the custom functionality needed.  Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var navHandler = function(direction){
            // This routine could contain business logic required to manage the navigation steps.
            // It would call setActiveItem as needed, manage navigation button state, handle any
            // branching logic that might be required, handle alternate actions like cancellation
            // or finalization, etc.  A complete wizard implementation could get pretty
            // sophisticated depending on the complexity required, and should probably be
            // done as a subclass of CardLayout in a real-world implementation.
            };

            var card = new apf.Panel({
            title: 'Example Wizard',
            layout:'card',
            activeItem: 0, // make sure the active item is set on the container config!
            bodyStyle: 'padding:15px',
            defaults: {
            // applied to each contained panel
            border:false
            },
            // just an example of one possible navigation scheme, using buttons
            bbar: [
            {
            id: 'move-prev',
            text: 'Back',
            handler: navHandler.createDelegate(this, [-1]),
            disabled: true
            },
            '-&gt;', // greedy spacer so that the buttons are aligned to each side
            {
            id: 'move-next',
            text: 'Next',
            handler: navHandler.createDelegate(this, [1])
            }
            ],
            // the panels (or &quot;cards&quot;) within the layout
            items: [{
            id: 'card-0',
            html: '&amp;lt;h1&amp;gt;Welcome to the Wizard!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 1 of 3&amp;lt;/p&amp;gt;'
            },{
            id: 'card-1',
            html: '&amp;lt;p&amp;gt;Step 2 of 3&amp;lt;/p&amp;gt;'
            },{
            id: 'card-2',
            html: '&amp;lt;h1&amp;gt;Congratulations!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 3 of 3 - Complete&amp;lt;/p&amp;gt;'
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties/>
        <methods>
            <method name="setActiveItem" scope="instance">
                <description>Sets the active (visible) item in the layout.</description>
                <parameters>
                    <parameter name="item" type="String/Number" usage="required">
                        <description>The string component id or numeric index of the item to activate</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.layout.ColumnLayout" superclass="apf.layout.ContainerLayout">
        <description>&lt;p&gt;This is the layout style of choice for creating structural layouts in a multi-column format where the width of
            each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
            This class is intended to be extended or created via the layout:'column' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt; config,
            and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
            specific config property of &lt;b&gt;&lt;tt&gt;columnWidth&lt;/tt&gt;&lt;/b&gt; that can be included in the config of any panel added to it.  The
            layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
            If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).&lt;/p&gt;
            &lt;p&gt;The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
            The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
            less than 1 (e.g., .25).&lt;/p&gt;
            &lt;p&gt;The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
            set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
            specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
            pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
            the total &lt;b&gt;remaining&lt;/b&gt; container width.  In other words, percentage width panels are designed to fill the space
            left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
            with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
            layout may not render as expected.  Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// All columns are percentages -- they must add up to 1
            var p = new apf.Panel({
            title: 'Column Layout - Percentage Only',
            layout:'column',
            items: [{
            title: 'Column 1',
            columnWidth: .25
            },{
            title: 'Column 2',
            columnWidth: .6
            },{
            title: 'Column 3',
            columnWidth: .15
            }]
            });

            // Mix of width and columnWidth -- all columnWidth values must add up
            // to 1. The first column will take up exactly 120px, and the last two
            // columns will fill the remaining container width.
            var p = new apf.Panel({
            title: 'Column Layout - Mixed',
            layout:'column',
            items: [{
            title: 'Column 1',
            width: 120
            },{
            title: 'Column 2',
            columnWidth: .8
            },{
            title: 'Column 3',
            columnWidth: .2
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="activeItem" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.layout.ContainerLayout" superclass="Object">
        <description>Every layout is composed of one or more &lt;a ext:cls=&quot;apf.Container&quot; href=&quot;output/apf.Container.html&quot;&gt;apf.Container&lt;/a&gt; elements internally, and ContainerLayout provides
            the basic foundation for all other layout classes in apf.  It is a non-visual class that simply provides the
            base logic required for a Container to function as a layout.  This class is intended to be extended and should
        generally not need to be created directly via the new keyword.</description>
        <properties>
            <property name="activeItem" type="apf.Component" scope="instance" access="read-write">
                <description>
                    A reference to the &lt;a ext:cls=&quot;apf.Component&quot; href=&quot;output/apf.Component.html&quot;&gt;apf.Component&lt;/a&gt; that is active.  For example,
                    if(myPanel.layout.activeItem.id == 'item-1') { ... }.  activeItem only applies to layout styles that can
                    display items one at a time (like &lt;a ext:cls=&quot;apf.layout.Accordion&quot; href=&quot;output/apf.layout.Accordion.html&quot;&gt;apf.layout.Accordion&lt;/a&gt;, &lt;a ext:cls=&quot;apf.layout.CardLayout&quot; href=&quot;output/apf.layout.CardLayout.html&quot;&gt;apf.layout.CardLayout&lt;/a&gt;
                and &lt;a ext:cls=&quot;apf.layout.FitLayout&quot; href=&quot;output/apf.layout.FitLayout.html&quot;&gt;apf.layout.FitLayout&lt;/a&gt;).  Read-only.  Related to &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;activeItem&quot; href=&quot;output/apf.Container.html#activeItem&quot;&gt;apf.Container.activeItem&lt;/a&gt;.</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.layout.FitLayout" superclass="apf.layout.ContainerLayout">
        <description>&lt;p&gt;This is a base class for layouts that contain a single item that automatically expands to fill the layout's
            container.  This class is intended to be extended or created via the layout:'fit' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt;
            config, and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
            using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
            multiple panels, only the first one will be displayed.  Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;var p = new apf.Panel({
            title: 'Fit Layout',
            layout:'fit',
            items: {
            title: 'Inner Panel',
            html: '&amp;lt;p&amp;gt;This is the inner panel content&amp;lt;/p&amp;gt;',
            border: false
            }
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.layout.FormLayout" superclass="apf.layout.AnchorLayout">
        <description>&lt;p&gt;This is a layout specifically designed for creating forms.
            This class can be extended or created via the layout:'form' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt; config,
            and should generally not need to be created directly via the new keyword.  However, when used in an application,
            it will usually be preferrable to use a &lt;a ext:cls=&quot;apf.form.FormPanel&quot; href=&quot;output/apf.form.FormPanel.html&quot;&gt;apf.form.FormPanel&lt;/a&gt; (which automatically uses FormLayout as its layout
            class) since it also provides built-in functionality for loading, validating and submitting the form.&lt;/p&gt;
            &lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be passed in via
            the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layoutConfig&quot; href=&quot;output/apf.Container.html#layoutConfig&quot;&gt;apf.Container.layoutConfig&lt;/a&gt; object which will then be applied internally to the layout.  The container
            using the FormLayout can also supply the following form-specific config properties which will be applied by the layout:
            &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;hideLabels&lt;/b&gt;: (Boolean) True to hide field labels by default (defaults to false)&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;itemCls&lt;/b&gt;: (String) A CSS class to add to the div wrapper that contains each field label
            and field element (the default class is 'x-form-item' and itemCls will be added to that)&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;labelAlign&lt;/b&gt;: (String) The default label alignment.  The default value is empty string ''
            for left alignment, but specifying 'top' will align the labels above the fields.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;labelPad&lt;/b&gt;: (Number) The default padding in pixels for field labels (defaults to 5).  labelPad only
            applies if labelWidth is also specified, otherwise it will be ignored.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;labelWidth&lt;/b&gt;: (Number) The default width in pixels of field labels (defaults to 100)&lt;/li&gt;
            &lt;/ul&gt;&lt;/p&gt;
            &lt;p&gt;Any type of components can be added to a FormLayout, but items that inherit from &lt;a ext:cls=&quot;apf.form.Field&quot; href=&quot;output/apf.form.Field.html&quot;&gt;apf.form.Field&lt;/a&gt;
            can also supply the following field-specific config properties:
            &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;clearCls&lt;/b&gt;: (String) The CSS class to apply to the special clearing div rendered directly after each
            form field wrapper (defaults to 'x-form-clear-left')&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;fieldLabel&lt;/b&gt;: (String) The text to display as the label for this field (defaults to '')&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;hideLabel&lt;/b&gt;: (Boolean) True to hide the label and separator for this field (defaults to false).&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;itemCls&lt;/b&gt;: (String) A CSS class to add to the div wrapper that contains this field label
            and field element (the default class is 'x-form-item' and itemCls will be added to that).  If supplied,
            itemCls at the field level will override the default itemCls supplied at the container level.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;labelSeparator&lt;/b&gt;: (String) The separator to display after the text of the label for this field
            (defaults to a colon ':' or the layout's value for &lt;a ext:cls=&quot;apf.layout.FormLayout&quot; ext:member=&quot;labelSeparator&quot; href=&quot;output/apf.layout.FormLayout.html#labelSeparator&quot;&gt;labelSeparator&lt;/a&gt;).  To hide the separator use empty string ''.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;labelStyle&lt;/b&gt;: (String) A CSS style specification string to add to the field label for this field
            (defaults to '' or the layout's value for &lt;a ext:cls=&quot;apf.layout.FormLayout&quot; ext:member=&quot;labelStyle&quot; href=&quot;output/apf.layout.FormLayout.html#labelStyle&quot;&gt;labelStyle&lt;/a&gt;).&lt;/li&gt;
            &lt;/ul&gt;
            Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// Required if showing validation messages
            apf.QuickTips.init();

            // While you can create a basic Panel with layout:'form', practically
            // you should usually use a FormPanel to also get its form functionality
            // since it already creates a FormLayout internally.
            var form = new apf.form.FormPanel({
            labelWidth: 75,
            title: 'Form Layout',
            bodyStyle:'padding:15px',
            width: 350,
            labelPad: 10,
            defaultType: 'textfield',
            defaults: {
            // applied to each contained item
            width: 230,
            msgTarget: 'side'
            },
            layoutConfig: {
            // layout-specific configs go here
            labelSeparator: ''
            },
            items: [{
            fieldLabel: 'First Name',
            name: 'first',
            allowBlank: false
            },{
            fieldLabel: 'Last Name',
            name: 'last'
            },{
            fieldLabel: 'Company',
            name: 'company'
            },{
            fieldLabel: 'Email',
            name: 'email',
            vtype:'email'
            }
            ],
            buttons: [{
            text: 'Save'
            },{
            text: 'Cancel'
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="activeItem" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.layout.TableLayout" superclass="apf.layout.ContainerLayout">
        <description>&lt;p&gt;This layout allows you to easily render content into an HTML table.  The total number of columns can be
            specified, and rowspan and colspan can be used to create complex layouts within the table.
            This class is intended to be extended or created via the layout:'table' &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layout&quot; href=&quot;output/apf.Container.html#layout&quot;&gt;apf.Container.layout&lt;/a&gt; config,
            and should generally not need to be created directly via the new keyword.&lt;/p&gt;
            &lt;p&gt;Note that when creating a layout via config, the layout-specific config properties must be passed in via
            the &lt;a ext:cls=&quot;apf.Container&quot; ext:member=&quot;layoutConfig&quot; href=&quot;output/apf.Container.html#layoutConfig&quot;&gt;apf.Container.layoutConfig&lt;/a&gt; object which will then be applied internally to the layout.  In the
            case of TableLayout, the only valid layout config property is &lt;a ext:cls=&quot;apf.layout.TableLayout&quot; ext:member=&quot;columns&quot; href=&quot;output/apf.layout.TableLayout.html#columns&quot;&gt;columns&lt;/a&gt;.  However, the items added to a
            TableLayout can supply the following table-specific config properties:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;rowspan&lt;/b&gt; Applied to the table cell containing the item.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;colspan&lt;/b&gt; Applied to the table cell containing the item.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;cellId&lt;/b&gt; An id applied to the table cell containing the item.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;cellCls&lt;/b&gt; A CSS class name added to the table cell containing the item.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;The basic concept of building up a TableLayout is conceptually very similar to building up a standard
            HTML table.  You simply add each panel (or &quot;cell&quot;) that you want to include along with any span attributes
            specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.
            Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the
            total column count in the layoutConfig and start adding panels in their natural order from left to right,
            top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,
            how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add
            up correctly in your overall layout or you'll end up with missing and/or extra cells!  Example usage:&lt;/p&gt;
            &lt;pre&gt;&lt;code&gt;// This code will generate a layout table that is 3 columns by 2 rows
            // with some spanning included.  The basic layout will be:
            // +--------+-----------------+
            // |   A    |   B             |
            // |        |--------+--------|
            // |        |   C    |   D    |
            // +--------+--------+--------+
            var table = new apf.Panel({
            title: 'Table Layout',
            layout:'table',
            defaults: {
            // applied to each contained panel
            bodyStyle:'padding:20px'
            },
            layoutConfig: {
            // The total column count must be specified here
            columns: 3
            },
            items: [{
            html: '&amp;lt;p&amp;gt;Cell A content&amp;lt;/p&amp;gt;',
            rowspan: 2
            },{
            html: '&amp;lt;p&amp;gt;Cell B content&amp;lt;/p&amp;gt;',
            colspan: 2
            },{
            html: '&amp;lt;p&amp;gt;Cell C content&amp;lt;/p&amp;gt;',
            cellCls: 'highlight'
            },{
            html: '&amp;lt;p&amp;gt;Cell D content&amp;lt;/p&amp;gt;'
            }]
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <properties>
            <property name="activeItem" type="Object" scope="instance" access="read-write">
                <description>@hide</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.menu.Adapter" superclass="apf.menu.BaseItem">
        <description>A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu.
        It provides basic rendering, activation management and enable/disable logic required to work in menus.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Adapter</description>
                <parameters>
                    <parameter name="component" type="apf.Component" usage="required">
                        <description>The component being adapted to render into a menu</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.menu.BaseItem" superclass="apf.Component">
        <description>The base class for all items that render into menus.  BaseItem provides default rendering, activated state
        management and base configuration options shared by all menu components.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new BaseItem</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="parentMenu" type="apf.menu.Menu" scope="instance" access="read-write">
                <description>The parent Menu of this Item.</description>
            </property>
        </properties>
        <methods>
            <method name="setHandler" scope="instance">
                <description>Sets the function that will handle click events for this item (equivalent to passing in the &lt;a ext:cls=&quot;apf.menu.BaseItem&quot; ext:member=&quot;handler&quot; href=&quot;output/apf.menu.BaseItem.html#handler&quot;&gt;handler&lt;/a&gt;
                config property).  If an existing handler is already registered, it will be unregistered for you.</description>
                <parameters>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The function that should be called on click</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="required">
                        <description>The scope that should be passed to the handler</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.menu.CheckItem" superclass="apf.menu.Item">
        <description>Adds a menu item that contains a checkbox by default, but can also be part of a radio group.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new CheckItem</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="checkHandler" scope="instance">
                <description>A function that handles the checkchange event.  The function is undefined by default, but if an implementation
                is provided, it will be called automatically when the checkchange event fires.</description>
                <parameters>
                    <parameter name="this" type="apf.menu.CheckItem" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="checked" type="Boolean" usage="required">
                        <description>The checked value that was set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setChecked" scope="instance">
                <description>Set the checked state of this item</description>
                <parameters>
                    <parameter name="checked" type="Boolean" usage="required">
                        <description>The new checked value</description>
                    </parameter>
                    <parameter name="suppressEvent" type="Boolean" usage="optional">
                        <description>(optional) True to prevent the checkchange event from firing (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.menu.ColorItem" superclass="apf.menu.Adapter">
        <description>A menu item that wraps the &lt;a ext:cls=&quot;apf.ColorPalette&quot; href=&quot;output/apf.ColorPalette.html&quot;&gt;apf.ColorPalette&lt;/a&gt; component.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new ColorItem</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="palette" type="apf.ColorPalette" scope="instance" access="read-write">
                <description>The apf.ColorPalette object</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.menu.ColorMenu" superclass="apf.menu.Menu">
        <description>A menu containing a &lt;a ext:cls=&quot;apf.menu.ColorItem&quot; href=&quot;output/apf.menu.ColorItem.html&quot;&gt;apf.menu.ColorItem&lt;/a&gt; component (which provides a basic color picker).</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new ColorMenu</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="palette" type="ColorPalette" scope="instance" access="read-write">
                <description>The &lt;a ext:cls=&quot;apf.ColorPalette&quot; href=&quot;output/apf.ColorPalette.html&quot;&gt;apf.ColorPalette&lt;/a&gt; instance for this ColorMenu</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.menu.DateItem" superclass="apf.menu.Adapter">
        <description>A menu item that wraps the &lt;a ext:cls=&quot;apf.DatePicker&quot; href=&quot;output/apf.DatePicker.html&quot;&gt;apf.DatePicker&lt;/a&gt; component.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new DateItem</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="picker" type="apf.DatePicker" scope="instance" access="read-write">
                <description>The apf.DatePicker object</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.menu.DateMenu" superclass="apf.menu.Menu">
        <description>A menu containing a &lt;a ext:cls=&quot;apf.menu.DateItem&quot; href=&quot;output/apf.menu.DateItem.html&quot;&gt;apf.menu.DateItem&lt;/a&gt; component (which provides a date picker).</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new DateMenu</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="picker" type="DatePicker" scope="instance" access="read-write">
                <description>The &lt;a ext:cls=&quot;apf.DatePicker&quot; href=&quot;output/apf.DatePicker.html&quot;&gt;apf.DatePicker&lt;/a&gt; instance for this DateMenu</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.menu.Item" superclass="apf.menu.BaseItem">
        <description>A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
            display items.  Item extends the base functionality of &lt;a ext:cls=&quot;apf.menu.BaseItem&quot; href=&quot;output/apf.menu.BaseItem.html&quot;&gt;apf.menu.BaseItem&lt;/a&gt; by adding menu-specific
        activation and click handling.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Item</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="setText" scope="instance">
                <description>Sets the text to display in this menu item</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to display</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setIconClass" scope="instance">
                <description>Sets the CSS class to apply to the item's icon element</description>
                <parameters>
                    <parameter name="cls" type="String" usage="required">
                        <description>The CSS class to apply</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.menu.Menu" superclass="apf.util.Observable">
        <description>A menu object.  This is the container to which you add all other menu items.  Menu can also serve as a base class
        when you want a specialized menu based off of another component (like &lt;a ext:cls=&quot;apf.menu.DateMenu&quot; href=&quot;output/apf.menu.DateMenu.html&quot;&gt;apf.menu.DateMenu&lt;/a&gt; for example).</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Menu</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="items" type="apf.util.MixedCollection" scope="instance" access="read-write">
                <description>A MixedCollection of this Menu's items</description>
            </property>
        </properties>
        <methods>
            <method name="isVisible" scope="instance">
                <description>Read-only.  Returns true if the menu is currently displayed, else false.</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Displays this menu relative to another element</description>
                <parameters>
                    <parameter name="element" type="Mixed" usage="required">
                        <description>The element to align to</description>
                    </parameter>
                    <parameter name="position" type="String" usage="optional">
                        <description>(optional) The &lt;a ext:cls=&quot;apf.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/apf.Element.html#alignTo&quot;&gt;apf.Element.alignTo&lt;/a&gt; anchor position to use in aligning to
                        the element (defaults to this.defaultAlign)</description>
                    </parameter>
                    <parameter name="parentMenu" type="apf.menu.Menu" usage="optional">
                        <description>(optional) This menu's parent menu, if applicable (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="showAt" scope="instance">
                <description>Displays this menu at a specific xy position</description>
                <parameters>
                    <parameter name="xyPosition" type="Array" usage="required">
                        <description>Contains X &amp; Y [x, y] values for the position at which to show the menu (coordinates are page-based)</description>
                    </parameter>
                    <parameter name="parentMenu" type="apf.menu.Menu" usage="optional">
                        <description>(optional) This menu's parent menu, if applicable (defaults to undefined)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hide" scope="instance">
                <description>Hides this menu and optionally all parent menus</description>
                <parameters>
                    <parameter name="deep" type="Boolean" usage="optional">
                        <description>(optional) True to hide all parent menus recursively, if any (defaults to false)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="add" scope="instance">
                <description>Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.
                    Any of the following are valid:
                    &lt;ul&gt;
                    &lt;li&gt;Any menu item object based on &lt;a ext:cls=&quot;apf.menu.BaseItem&quot; href=&quot;output/apf.menu.BaseItem.html&quot;&gt;apf.menu.BaseItem&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;An HTMLElement object which will be converted to a menu item&lt;/li&gt;
                    &lt;li&gt;A menu item config object that will be created as a new menu item&lt;/li&gt;
                    &lt;li&gt;A string, which can either be '-' or 'separator' to add a menu separator, otherwise
                    it will be converted into a &lt;a ext:cls=&quot;apf.menu.TextItem&quot; href=&quot;output/apf.menu.TextItem.html&quot;&gt;apf.menu.TextItem&lt;/a&gt; and added&lt;/li&gt;
                    &lt;/ul&gt;
                    Usage:
                    &lt;pre&gt;&lt;code&gt;// Create the menu
                    var menu = new apf.menu.Menu();

                    // Create a menu item to add by reference
                    var menuItem = new apf.menu.Item({ text: 'New Item!' });

                    // Add a bunch of items at once using different methods.
                    // Only the last item added will be returned.
                    var item = menu.add(
                    menuItem,                // add existing item by ref
                    'Dynamic Item',          // new TextItem
                    '-',                     // new separator
                    { text: 'Config Item' }  // new item by config
                );&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="args" type="Mixed" usage="required">
                        <description>One or more menu items, menu item configs or other objects that can be converted to menu items</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getEl" scope="instance">
                <description>Returns this menu's underlying &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; object</description>
                <parameters/>
            </method>
            <method name="addSeparator" scope="instance">
                <description>Adds a separator bar to the menu</description>
                <parameters/>
            </method>
            <method name="addElement" scope="instance">
                <description>Adds an &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt; object to the menu</description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element or DOM node to add, or its id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addItem" scope="instance">
                <description>Adds an existing object based on &lt;a ext:cls=&quot;apf.menu.BaseItem&quot; href=&quot;output/apf.menu.BaseItem.html&quot;&gt;apf.menu.BaseItem&lt;/a&gt; to the menu</description>
                <parameters>
                    <parameter name="item" type="apf.menu.Item" usage="required">
                        <description>The menu item to add</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addMenuItem" scope="instance">
                <description>Creates a new &lt;a ext:cls=&quot;apf.menu.Item&quot; href=&quot;output/apf.menu.Item.html&quot;&gt;apf.menu.Item&lt;/a&gt; based an the supplied config object and adds it to the menu</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A MenuItem config object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addText" scope="instance">
                <description>Creates a new &lt;a ext:cls=&quot;apf.menu.TextItem&quot; href=&quot;output/apf.menu.TextItem.html&quot;&gt;apf.menu.TextItem&lt;/a&gt; with the supplied text and adds it to the menu</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to display in the menu item</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insert" scope="instance">
                <description>Inserts an existing object based on &lt;a ext:cls=&quot;apf.menu.BaseItem&quot; href=&quot;output/apf.menu.BaseItem.html&quot;&gt;apf.menu.BaseItem&lt;/a&gt; to the menu at a specified index</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index in the menu's list of current items where the new item should be inserted</description>
                    </parameter>
                    <parameter name="item" type="apf.menu.Item" usage="required">
                        <description>The menu item to add</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Removes an &lt;a ext:cls=&quot;apf.menu.Item&quot; href=&quot;output/apf.menu.Item.html&quot;&gt;apf.menu.Item&lt;/a&gt; from the menu and destroys the object</description>
                <parameters>
                    <parameter name="item" type="apf.menu.Item" usage="required">
                        <description>The menu item to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeAll" scope="instance">
                <description>Removes and destroys all items in the menu</description>
                <parameters/>
            </method>
            <method name="destroy" scope="instance">
                <description>Destroys the menu by  unregistering it from &lt;a ext:cls=&quot;apf.menu.MenuMgr&quot; href=&quot;output/apf.menu.MenuMgr.html&quot;&gt;apf.menu.MenuMgr&lt;/a&gt;, purging event listeners,
                removing all of the menus items, then destroying the underlying &lt;a ext:cls=&quot;apf.Element&quot; href=&quot;output/apf.Element.html&quot;&gt;apf.Element&lt;/a&gt;</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.menu.MenuMgr" superclass="Object">
        <description>Provides a common registry of all menu items on a page so that they can be easily accessed by id.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="hideAll" scope="instance">
                <description>Hides all menus that are currently visible</description>
                <parameters/>
            </method>
            <method name="get" scope="instance">
                <description>Returns a &lt;a ext:cls=&quot;apf.menu.Menu&quot; href=&quot;output/apf.menu.Menu.html&quot;&gt;apf.menu.Menu&lt;/a&gt; object</description>
                <parameters>
                    <parameter name="menu" type="String/Object" usage="required">
                        <description>The string menu id, an existing menu object reference, or a Menu config that will
                        be used to generate and return a new Menu instance.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.menu.Separator" superclass="apf.menu.BaseItem">
        <description>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
        add one of these by using &quot;-&quot; in you call to add() or in your items config rather than creating one directly.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>Configuration options</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.menu.TextItem" superclass="apf.menu.BaseItem">
        <description>Adds a static text string to a menu, usually used as either a heading or group separator.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new TextItem</description>
                <parameters>
                    <parameter name="config" type="Object/String" usage="required">
                        <description>If config is a string, it is used as the text to display, otherwise it
                        is applied as a config object (and should contain a &lt;tt&gt;text&lt;/tt&gt; property).</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.state.CookieProvider" superclass="apf.state.Provider">
        <description>The default Provider implementation which saves state via cookies.
            &lt;br /&gt;Usage:&#13;
            &lt;pre&gt;&lt;code&gt;var cp = new apf.state.CookieProvider({
            path: &quot;/cgi-bin/&quot;,
            expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
            domain: &quot;extjs.com&quot;
            });
        apf.state.Manager.setProvider(cp);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description>Create a new CookieProvider</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>The configuration object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.state.Manager" superclass="Object">
        <description>This is the global state manager. By default all components that are &quot;state aware&quot; check this class
            for state information if you don't pass them a custom state provider. In order for this class
            to be useful, it must be initialized with a provider when your application initializes. Example usage:&#13;
            &lt;pre&gt;&lt;code&gt;// in your initialization function
            init : function(){
            apf.state.Manager.setProvider(new apf.state.CookieProvider());
            var win = new Window(...);
            win.restoreState();
        }&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="setProvider" scope="instance">
                <description>Configures the default state provider for your application</description>
                <parameters>
                    <parameter name="stateProvider" type="Provider" usage="required">
                        <description>The state provider to set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="get" scope="instance">
                <description>Returns the current value for a key</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The key name</description>
                    </parameter>
                    <parameter name="defaultValue" type="Mixed" usage="required">
                        <description>The default value to return if the key lookup does not match</description>
                    </parameter>
                </parameters>
            </method>
            <method name="set" scope="instance">
                <description>Sets the value for a key</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The key name</description>
                    </parameter>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The state data</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clear" scope="instance">
                <description>Clears a value from the state</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The key name</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getProvider" scope="instance">
                <description>Gets the currently configured state provider</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.state.Provider" superclass="Object">
        <description>Abstract base class for state provider implementations. This class provides methods
            for encoding and decoding &lt;b&gt;typed&lt;/b&gt; variables including dates and defines the
        Provider interface.</description>
        <properties/>
        <methods>
            <method name="get" scope="instance">
                <description>Returns the current value for a key</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The key name</description>
                    </parameter>
                    <parameter name="defaultValue" type="Mixed" usage="required">
                        <description>A default value to return if the key's value is not found</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clear" scope="instance">
                <description>Clears a value from the state</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The key name</description>
                    </parameter>
                </parameters>
            </method>
            <method name="set" scope="instance">
                <description>Sets the value for a key</description>
                <parameters>
                    <parameter name="name" type="String" usage="required">
                        <description>The key name</description>
                    </parameter>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to set</description>
                    </parameter>
                </parameters>
            </method>
            <method name="decodeValue" scope="instance">
                <description>Decodes a string previously encoded with &lt;a ext:cls=&quot;apf.state.Provider&quot; ext:member=&quot;encodeValue&quot; href=&quot;output/apf.state.Provider.html#encodeValue&quot;&gt;encodeValue&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The value to decode</description>
                    </parameter>
                </parameters>
            </method>
            <method name="encodeValue" scope="instance">
                <description>Encodes a value including type information.  Decode with &lt;a ext:cls=&quot;apf.state.Provider&quot; ext:member=&quot;decodeValue&quot; href=&quot;output/apf.state.Provider.html#decodeValue&quot;&gt;decodeValue&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The value to encode</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.tree.AsyncTreeNode" superclass="apf.tree.TreeNode">
        <description></description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="attributes" type="Object/String" usage="required">
                        <description>The attributes/config for the node or just a string with the text for the node</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="loader" type="TreeLoader" scope="instance" access="read-write">
                <description>
                The loader used by this node (defaults to using the tree's defined loader)</description>
            </property>
        </properties>
        <methods>
            <method name="isLoading" scope="instance">
                <description>Returns true if this node is currently loading</description>
                <parameters/>
            </method>
            <method name="isLoaded" scope="instance">
                <description>Returns true if this node has been loaded</description>
                <parameters/>
            </method>
            <method name="reload" scope="instance">
                <description>Trigger a reload for this node</description>
                <parameters>
                    <parameter name="callback" type="Function" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.tree.DefaultSelectionModel" superclass="apf.util.Observable">
        <description>The default single selection for a TreePanel.</description>
        <properties/>
        <methods>
            <method name="select" scope="instance">
                <description>Select a node.</description>
                <parameters>
                    <parameter name="node" type="TreeNode" usage="required">
                        <description>The node to select</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unselect" scope="instance">
                <description>Deselect a node.</description>
                <parameters>
                    <parameter name="node" type="TreeNode" usage="required">
                        <description>The node to unselect</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearSelections" scope="instance">
                <description>Clear all selections</description>
                <parameters/>
            </method>
            <method name="getSelectedNode" scope="instance">
                <description>Get the selected node</description>
                <parameters/>
            </method>
            <method name="isSelected" scope="instance">
                <description>Returns true if the node is selected</description>
                <parameters>
                    <parameter name="node" type="TreeNode" usage="required">
                        <description>The node to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectPrevious" scope="instance">
                <description>Selects the node above the selected node in the tree, intelligently walking the nodes</description>
                <parameters/>
            </method>
            <method name="selectNext" scope="instance">
                <description>Selects the node above the selected node in the tree, intelligently walking the nodes</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.MultiSelectionModel" superclass="apf.util.Observable">
        <description>Multi selection for a TreePanel.</description>
        <properties/>
        <methods>
            <method name="select" scope="instance">
                <description>Select a node.</description>
                <parameters>
                    <parameter name="node" type="TreeNode" usage="required">
                        <description>The node to select</description>
                    </parameter>
                    <parameter name="e" type="EventObject" usage="optional">
                        <description>(optional) An event associated with the selection</description>
                    </parameter>
                    <parameter name="keepExisting" type="Boolean" usage="required">
                        <description>True to retain existing selections</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unselect" scope="instance">
                <description>Deselect a node.</description>
                <parameters>
                    <parameter name="node" type="TreeNode" usage="required">
                        <description>The node to unselect</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearSelections" scope="instance">
                <description>Clear all selections</description>
                <parameters/>
            </method>
            <method name="isSelected" scope="instance">
                <description>Returns true if the node is selected</description>
                <parameters>
                    <parameter name="node" type="TreeNode" usage="required">
                        <description>The node to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getSelectedNodes" scope="instance">
                <description>Returns an array of the selected nodes</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.RootTreeNodeUI" superclass="Object">
        <description>This class provides the default UI implementation for &lt;b&gt;root&lt;/b&gt; apf TreeNodes.
            The RootTreeNode UI implementation allows customizing the appearance of the root tree node.&lt;br&gt;
            &lt;p&gt;
            If you are customizing the Tree's user interface, you
        may need to extend this class, but you should never need to instantiate this class.&lt;br&gt;</description>
        <properties/>
        <methods/>
    </class>
    <class type="apf.tree.TreeDragZone" superclass="apf.dd.DragZone">
        <description></description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="tree" type="String/HTMLElement/Element" usage="required">
                        <description>The &lt;a ext:cls=&quot;apf.tree.TreePanel&quot; href=&quot;output/apf.tree.TreePanel.html&quot;&gt;apf.tree.TreePanel&lt;/a&gt; for which to enable dragging</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="tree" type="apf.tree.TreePanel" scope="instance" access="read-write">
                <description>The TreePanel for this drag zone</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.tree.TreeDropZone" superclass="apf.dd.DropZone">
        <description></description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="tree" type="String/HTMLElement/Element" usage="required">
                        <description>The &lt;a ext:cls=&quot;apf.tree.TreePanel&quot; href=&quot;output/apf.tree.TreePanel.html&quot;&gt;apf.tree.TreePanel&lt;/a&gt; for which to enable dropping</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="tree" type="apf.tree.TreePanel" scope="instance" access="read-write">
                <description>The TreePanel for this drop zone</description>
            </property>
            <property name="dragOverData" type="apf.tree.TreePanel" scope="instance" access="read-write">
                <description>Arbitrary data that can be associated with this tree and will be included in the event object that gets
                passed to any nodedragover event handler (defaults to {})</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.tree.TreeEditor" superclass="apf.Editor">
        <description>Provides editor functionality for inline tree node editing.  Any valid &lt;a ext:cls=&quot;apf.form.Field&quot; href=&quot;output/apf.form.Field.html&quot;&gt;apf.form.Field&lt;/a&gt; subclass can be used
        as the editor field.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="tree" type="TreePanel" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="fieldConfig" type="Object" usage="optional">
                        <description>(optional) Either a prebuilt &lt;a ext:cls=&quot;apf.form.Field&quot; href=&quot;output/apf.form.Field.html&quot;&gt;apf.form.Field&lt;/a&gt; instance or a Field config object
                        that will be applied to the default field instance (defaults to a &lt;a ext:cls=&quot;apf.form.TextField&quot; href=&quot;output/apf.form.TextField.html&quot;&gt;apf.form.TextField&lt;/a&gt;).</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="optional">
                        <description>(optional) A TreeEditor config object</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="editNode" type="apf.tree.TreeNode" scope="instance" access="read-write">
                <description>The tree node this editor is bound to. Read-only.</description>
            </property>
        </properties>
        <methods/>
    </class>
    <class type="apf.tree.TreeFilter" superclass="Object">
        <description>Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes</description>
        <properties/>
        <methods>
            <method name="filter" scope="instance">
                <description>Filter the data by a specific attribute.</description>
                <parameters>
                    <parameter name="value" type="String/RegExp" usage="required">
                        <description>Either string that the attribute value
                        should start with or a RegExp to test against the attribute</description>
                    </parameter>
                    <parameter name="attr" type="String" usage="optional">
                        <description>(optional) The attribute passed in your node's attributes collection. Defaults to &quot;text&quot;.</description>
                    </parameter>
                    <parameter name="startNode" type="TreeNode" usage="optional">
                        <description>(optional) The node to start the filter at.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filterBy" scope="instance">
                <description>Filter by a function. The passed function will be called with each
                    node in the tree (or from the startNode). If the function returns true, the node is kept
                otherwise it is filtered. If a node is filtered, its children are also filtered.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The filter function</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to the current node)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clear" scope="instance">
                <description>Clears the current filter. Note: with the &quot;remove&quot; option
                set a filter cannot be cleared.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.TreeLoader" superclass="apf.util.Observable">
        <description>A TreeLoader provides for lazy loading of an &lt;a ext:cls=&quot;apf.tree.TreeNode&quot; href=&quot;output/apf.tree.TreeNode.html&quot;&gt;apf.tree.TreeNode&lt;/a&gt;'s child
            nodes from a specified URL. The response must be a JavaScript Array definition
            whose elements are node definition objects. eg:
            &lt;pre&gt;&lt;code&gt;[{
            id: 1,
            text: 'A leaf Node',
            leaf: true
            },{
            id: 2,
            text: 'A folder Node',
            children: [{
            id: 3,
            text: 'A child Node',
            leaf: true
            }]
            }]&lt;/code&gt;&lt;/pre&gt;
            &lt;br&gt;&lt;br&gt;
            A server request is sent, and child nodes are loaded only when a node is expanded.
            The loading node's id is passed to the server under the parameter name &quot;node&quot; to
            enable the server to produce the correct child nodes.
            &lt;br&gt;&lt;br&gt;
            To pass extra parameters, an event handler may be attached to the &quot;beforeload&quot;
            event, and the parameters specified in the TreeLoader's baseParams property:
            &lt;pre&gt;&lt;code&gt;myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) {
            this.baseParams.category = node.attributes.category;
            }, this);&lt;/code&gt;&lt;/pre&gt;
            This would pass an HTTP parameter called &quot;category&quot; to the server containing
        the value of the Node's &quot;category&quot; attribute.</description>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Treeloader.</description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description>A config object containing config properties.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="load" scope="instance">
                <description>Load an &lt;a ext:cls=&quot;apf.tree.TreeNode&quot; href=&quot;output/apf.tree.TreeNode.html&quot;&gt;apf.tree.TreeNode&lt;/a&gt; from the URL specified in the constructor.
                    This is called automatically when a node is expanded, but may be used to reload
                a node (or append new children if the &lt;a ext:cls=&quot;apf.tree.TreeLoader&quot; ext:member=&quot;clearOnLoad&quot; href=&quot;output/apf.tree.TreeLoader.html#clearOnLoad&quot;&gt;clearOnLoad&lt;/a&gt; option is false.)</description>
                <parameters>
                    <parameter name="node" type="apf.tree.TreeNode" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="createNode" scope="instance">
                <description>Override this function for custom TreeNode node implementation</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.TreeNode" superclass="apf.data.Node">
        <description></description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="attributes" type="Object/String" usage="required">
                        <description>The attributes/config for the node or just a string with the text for the node</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="text" type="String" scope="instance" access="read-write">
                <description>Read-only. The text for this node. To change it use setText().</description>
            </property>
            <property name="disabled" type="Boolean" scope="instance" access="read-write">
                <description>True if this node is disabled.</description>
            </property>
            <property name="ui" type="TreeNodeUI" scope="instance" access="read-write">
                <description>Read-only. The UI for this node</description>
            </property>
        </properties>
        <methods>
            <method name="isExpanded" scope="instance">
                <description>Returns true if this node is expanded</description>
                <parameters/>
            </method>
            <method name="getUI" scope="instance">
                <description>Returns the UI object for this node.</description>
                <parameters/>
            </method>
            <method name="setText" scope="instance">
                <description>Sets the text for this node</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="select" scope="instance">
                <description>Triggers selection of this node</description>
                <parameters/>
            </method>
            <method name="unselect" scope="instance">
                <description>Triggers deselection of this node</description>
                <parameters/>
            </method>
            <method name="isSelected" scope="instance">
                <description>Returns true if this node is selected</description>
                <parameters/>
            </method>
            <method name="expand" scope="instance">
                <description>Expand this node.</description>
                <parameters>
                    <parameter name="deep" type="Boolean" usage="optional">
                        <description>(optional) True to expand all children as well</description>
                    </parameter>
                    <parameter name="anim" type="Boolean" usage="optional">
                        <description>(optional) false to cancel the default animation</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) A callback to be called when
                            expanding this node completes (does not wait for deep expand to complete).
                        Called with 1 parameter, this node.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="collapse" scope="instance">
                <description>Collapse this node.</description>
                <parameters>
                    <parameter name="deep" type="Boolean" usage="optional">
                        <description>(optional) True to collapse all children as well</description>
                    </parameter>
                    <parameter name="anim" type="Boolean" usage="optional">
                        <description>(optional) false to cancel the default animation</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toggle" scope="instance">
                <description>Toggles expanded/collapsed state of the node</description>
                <parameters/>
            </method>
            <method name="ensureVisible" scope="instance">
                <description>Ensures all parent nodes are expanded, and if necessary, scrolls
                the node into view.</description>
                <parameters/>
            </method>
            <method name="expandChildNodes" scope="instance">
                <description>Expand all child nodes</description>
                <parameters>
                    <parameter name="deep" type="Boolean" usage="optional">
                        <description>(optional) true if the child nodes should also expand their child nodes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="collapseChildNodes" scope="instance">
                <description>Collapse all child nodes</description>
                <parameters>
                    <parameter name="deep" type="Boolean" usage="optional">
                        <description>(optional) true if the child nodes should also collapse their child nodes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="disable" scope="instance">
                <description>Disables this node</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>Enables this node</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.TreeNodeUI" superclass="Object">
        <description>This class provides the default UI implementation for apf TreeNodes.
            The TreeNode UI implementation is separate from the
            tree implementation, and allows customizing of the appearance of
            tree nodes.&lt;br&gt;
            &lt;p&gt;
            If you are customizing the Tree's user interface, you
            may need to extend this class, but you should never need to instantiate this class.&lt;br&gt;
            &lt;p&gt;
            This class provides access to the user interface components of an apf TreeNode, through
        &lt;a ext:cls=&quot;apf.tree.TreeNode&quot; ext:member=&quot;getUI&quot; href=&quot;output/apf.tree.TreeNode.html#getUI&quot;&gt;apf.tree.TreeNode.getUI&lt;/a&gt;</description>
        <properties/>
        <methods>
            <method name="addClass" scope="instance">
                <description>Adds one or more CSS classes to the node's UI element.
                Duplicate classes are automatically filtered out.</description>
                <parameters>
                    <parameter name="className" type="String/Array" usage="required">
                        <description>The CSS class to add, or an array of classes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeClass" scope="instance">
                <description>Removes one or more CSS classes from the node's UI element.</description>
                <parameters>
                    <parameter name="className" type="String/Array" usage="required">
                        <description>The CSS class to remove, or an array of classes</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hide" scope="instance">
                <description>Hides this node.</description>
                <parameters/>
            </method>
            <method name="show" scope="instance">
                <description>Shows this node.</description>
                <parameters/>
            </method>
            <method name="toggleCheck" scope="instance">
                <description>Sets the checked status of the tree node to the passed value, or, if no value was passed,
                toggles the checked status. If the node was rendered with no checkbox, this has no effect.</description>
                <parameters>
                    <parameter name="(optional)" type="Boolean" usage="required">
                        <description>The new checked status.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getAnchor" scope="instance">
                <description>Returns the &amp;lt;a&gt; element that provides focus for the node's UI.</description>
                <parameters/>
            </method>
            <method name="getTextEl" scope="instance">
                <description>Returns the text node.</description>
                <parameters/>
            </method>
            <method name="getIconEl" scope="instance">
                <description>Returns the icon &amp;lt;img&gt; element.</description>
                <parameters/>
            </method>
            <method name="isChecked" scope="instance">
                <description>Returns the checked status of the node. If the node was rendered with no
                checkbox, it returns false.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.TreePanel" superclass="apf.Panel">
        <description>&lt;p&gt;The TreePanel provides tree-structured UI representation of tree-structured data.&lt;/p&gt;
            &lt;p&gt;&lt;a ext:cls=&quot;apf.tree.TreeNode&quot; href=&quot;output/apf.tree.TreeNode.html&quot;&gt;TreeNode&lt;/a&gt;s added to the TreePanel may each contain metadata
            used by your application in their &lt;a ext:cls=&quot;apf.tree.TreeNode&quot; ext:member=&quot;attributes&quot; href=&quot;output/apf.tree.TreeNode.html#attributes&quot;&gt;attributes&lt;/a&gt; property.&lt;/p&gt;
            &lt;p&gt;&lt;b&gt;A TreePanel must have a &lt;a ext:cls=&quot;apf.tree.TreePanel&quot; ext:member=&quot;root&quot; href=&quot;output/apf.tree.TreePanel.html#root&quot;&gt;root&lt;/a&gt; node before it is rendered.&lt;/b&gt; This may either be
        specified using the &lt;a ext:cls=&quot;apf.tree.TreePanel&quot; ext:member=&quot;root&quot; href=&quot;output/apf.tree.TreePanel.html#root&quot;&gt;root&lt;/a&gt; config option, or using the &lt;a ext:cls=&quot;apf.tree.TreePanel&quot; ext:member=&quot;setRootNode&quot; href=&quot;output/apf.tree.TreePanel.html#setRootNode&quot;&gt;setRootNode&lt;/a&gt; method.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties>
            <property name="root" type="apf.tree.TreeNode" scope="instance" access="read-write">
                <description>The root node of this tree.</description>
            </property>
            <property name="dropZone" type="apf.tree.TreeDropZone" scope="instance" access="read-write">
                <description>The dropZone used by this tree if drop is enabled</description>
            </property>
            <property name="dragZone" type="apf.tree.TreeDragZone" scope="instance" access="read-write">
                <description>The dragZone used by this tree if drag is enabled</description>
            </property>
            <property name="items" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
            <property name="disabled" type="Object" scope="instance" access="read-write">
                <description>
                @hide</description>
            </property>
        </properties>
        <methods>
            <method name="getRootNode" scope="instance">
                <description>Returns this root node for this tree</description>
                <parameters/>
            </method>
            <method name="setRootNode" scope="instance">
                <description>Sets the root node for this tree during initialization.</description>
                <parameters>
                    <parameter name="node" type="Node" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getNodeById" scope="instance">
                <description>Gets a node in this tree by its id</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </method>
            <method name="getChecked" scope="instance">
                <description>Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. &quot;id&quot;)</description>
                <parameters>
                    <parameter name="attribute" type="String" usage="optional">
                        <description>(optional) Defaults to null (return the actual nodes)</description>
                    </parameter>
                    <parameter name="startNode" type="TreeNode" usage="optional">
                        <description>(optional) The node to start from, defaults to the root</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getEl" scope="instance">
                <description>Returns the container element for this TreePanel.</description>
                <parameters/>
            </method>
            <method name="getLoader" scope="instance">
                <description>Returns the default &lt;a ext:cls=&quot;apf.tree.TreeLoader&quot; href=&quot;output/apf.tree.TreeLoader.html&quot;&gt;apf.tree.TreeLoader&lt;/a&gt; for this TreePanel.</description>
                <parameters/>
            </method>
            <method name="expandAll" scope="instance">
                <description>Expand all nodes</description>
                <parameters/>
            </method>
            <method name="collapseAll" scope="instance">
                <description>Collapse all nodes</description>
                <parameters/>
            </method>
            <method name="getSelectionModel" scope="instance">
                <description>Returns the selection model used by this TreePanel.</description>
                <parameters/>
            </method>
            <method name="expandPath" scope="instance">
                <description>Expands a specified path in this TreePanel. A path can be retrieved from a node with &lt;a ext:cls=&quot;apf.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/apf.data.Node.html#getPath&quot;&gt;apf.data.Node.getPath&lt;/a&gt;</description>
                <parameters>
                    <parameter name="path" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="attr" type="String" usage="optional">
                        <description>(optional) The attribute used in the path (see &lt;a ext:cls=&quot;apf.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/apf.data.Node.html#getPath&quot;&gt;apf.data.Node.getPath&lt;/a&gt; for more info)</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) The callback to call when the expand is complete. The callback will be called with
                        (bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="selectPath" scope="instance">
                <description>Selects the node in this tree at the specified path. A path can be retrieved from a node with &lt;a ext:cls=&quot;apf.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/apf.data.Node.html#getPath&quot;&gt;apf.data.Node.getPath&lt;/a&gt;</description>
                <parameters>
                    <parameter name="path" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="attr" type="String" usage="optional">
                        <description>(optional) The attribute used in the path (see &lt;a ext:cls=&quot;apf.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/apf.data.Node.html#getPath&quot;&gt;apf.data.Node.getPath&lt;/a&gt; for more info)</description>
                    </parameter>
                    <parameter name="callback" type="Function" usage="optional">
                        <description>(optional) The callback to call when the selection is complete. The callback will be called with
                        (bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getTreeEl" scope="instance">
                <description>Returns the underlying Element for this tree</description>
                <parameters/>
            </method>
            <method name="add" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="cascade" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="doLayout" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="find" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="findBy" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="findById" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="findByType" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getComponent" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getLayout" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="getUpdater" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="insert" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="load" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="remove" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="applyToMarkup" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="enable" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="disable" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
            <method name="setDisabled" scope="instance">
                <description>
                @hide</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.tree.TreeSorter" superclass="Object">
        <description>Provides sorting of nodes in a &lt;a ext:cls=&quot;apf.tree.TreePanel&quot; href=&quot;output/apf.tree.TreePanel.html&quot;&gt;apf.tree.TreePanel&lt;/a&gt;.  The TreeSorter automatically monitors events on the
            associated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).
            Example usage:&lt;br /&gt;
            &lt;pre&gt;&lt;code&gt;new apf.tree.TreeSorter(myTree, {
            folderSort: true,
            dir: &quot;desc&quot;,
            sortType: function(node) {
            // sort by a custom, typed attribute:
            return parseInt(node.id, 10);
            }
        });&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="tree" type="TreePanel" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.util.CSS" superclass="Object">
        <description>Utility class for manipulating CSS rules&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="createStyleSheet" scope="instance">
                <description>Creates a stylesheet from a text blob of rules.
                These rules will be wrapped in a STYLE tag and appended to the HEAD of the document.</description>
                <parameters>
                    <parameter name="cssText" type="String" usage="required">
                        <description>The text containing the css rules</description>
                    </parameter>
                    <parameter name="id" type="String" usage="required">
                        <description>An id to add to the stylesheet for later removal</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeStyleSheet" scope="instance">
                <description>Removes a style or link tag by id</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of the tag</description>
                    </parameter>
                </parameters>
            </method>
            <method name="swapStyleSheet" scope="instance">
                <description>Dynamically swaps an existing stylesheet reference for a new one</description>
                <parameters>
                    <parameter name="id" type="String" usage="required">
                        <description>The id of an existing link tag to remove</description>
                    </parameter>
                    <parameter name="url" type="String" usage="required">
                        <description>The href of the new stylesheet to include</description>
                    </parameter>
                </parameters>
            </method>
            <method name="refreshCache" scope="instance">
                <description>Refresh the rule cache if you have dynamically added stylesheets</description>
                <parameters/>
            </method>
            <method name="getRules" scope="instance">
                <description>Gets all css rules for the document</description>
                <parameters>
                    <parameter name="refreshCache" type="Boolean" usage="required">
                        <description>true to refresh the internal cache</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRule" scope="instance">
                <description>Gets an an individual CSS rule by selector(s)</description>
                <parameters>
                    <parameter name="selector" type="String/Array" usage="required">
                        <description>The CSS selector or an array of selectors to try. The first selector that is found is returned.</description>
                    </parameter>
                    <parameter name="refreshCache" type="Boolean" usage="required">
                        <description>true to refresh the internal cache if you have recently updated any rules or added styles dynamically</description>
                    </parameter>
                </parameters>
            </method>
            <method name="updateRule" scope="instance">
                <description>Updates a rule property</description>
                <parameters>
                    <parameter name="selector" type="String/Array" usage="required">
                        <description>If it's an array it tries each selector until it finds one. Stops immediately once one is found.</description>
                    </parameter>
                    <parameter name="property" type="String" usage="required">
                        <description>The css property</description>
                    </parameter>
                    <parameter name="value" type="String" usage="required">
                        <description>The new value for the property</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.util.ClickRepeater" superclass="apf.util.Observable">
        <description>A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the
            mouse is pressed. The interval between firings may be specified in the config but
            defaults to 20 milliseconds.

        Optionally, a CSS class may be applied to the element during the time it is pressed.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="el" type="Mixed" usage="required">
                        <description>The element to listen on</description>
                    </parameter>
                    <parameter name="config" type="Object" usage="required">
                        <description></description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods/>
    </class>
    <class type="apf.util.DelayedTask" superclass="Object">
        <description>Provides a convenient method of performing setTimeout where a new
            timeout cancels the old timeout. An example would be performing validation on a keypress.
            You can use this class to buffer
            the keypress events for a certain number of milliseconds, and perform only if they stop
        for that amount of time.</description>
        <constructors>
            <constructor scope="instance">
                <description>The parameters to this constructor serve as defaults and are not required.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="optional">
                        <description>(optional) The default function to timeout</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The default scope of that timeout</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) The default Array of arguments</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="delay" scope="instance">
                <description>Cancels any pending timeout and queues a new one</description>
                <parameters>
                    <parameter name="delay" type="Number" usage="required">
                        <description>The milliseconds to delay</description>
                    </parameter>
                    <parameter name="newFn" type="Function" usage="optional">
                        <description>(optional) Overrides function passed to constructor</description>
                    </parameter>
                    <parameter name="newScope" type="Object" usage="optional">
                        <description>(optional) Overrides scope passed to constructor</description>
                    </parameter>
                    <parameter name="newArgs" type="Array" usage="optional">
                        <description>(optional) Overrides args passed to constructor</description>
                    </parameter>
                </parameters>
            </method>
            <method name="cancel" scope="instance">
                <description>Cancel the last queued timeout</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.util.Format" superclass="Object">
        <description>Reusable data formatting functions&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="ellipsis" scope="instance">
                <description>Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The string to truncate</description>
                    </parameter>
                    <parameter name="length" type="Number" usage="required">
                        <description>The maximum length to allow before truncating</description>
                    </parameter>
                </parameters>
            </method>
            <method name="undef" scope="instance">
                <description>Checks a reference and converts it to empty string if it is undefined</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>Reference to check</description>
                    </parameter>
                </parameters>
            </method>
            <method name="defaultValue" scope="instance">
                <description>Checks a reference and converts it to the default value if it's empty</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>Reference to check</description>
                    </parameter>
                    <parameter name="defaultValue" type="String" usage="required">
                        <description>The value to insert of it's undefined (defaults to &quot;&quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="htmlEncode" scope="instance">
                <description>Convert certain characters (&amp;, &lt;, &gt;, and ') to their HTML character equivalents for literal display in web pages.</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The string to encode</description>
                    </parameter>
                </parameters>
            </method>
            <method name="htmlDecode" scope="instance">
                <description>Convert certain characters (&amp;, &lt;, &gt;, and ') from their HTML character equivalents.</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The string to decode</description>
                    </parameter>
                </parameters>
            </method>
            <method name="trim" scope="instance">
                <description>Trims any whitespace from either side of a string</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The text to trim</description>
                    </parameter>
                </parameters>
            </method>
            <method name="substr" scope="instance">
                <description>Returns a substring from within an original string</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The original text</description>
                    </parameter>
                    <parameter name="start" type="Number" usage="required">
                        <description>The start index of the substring</description>
                    </parameter>
                    <parameter name="length" type="Number" usage="required">
                        <description>The length of the substring</description>
                    </parameter>
                </parameters>
            </method>
            <method name="lowercase" scope="instance">
                <description>Converts a string to all lower case letters</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The text to convert</description>
                    </parameter>
                </parameters>
            </method>
            <method name="uppercase" scope="instance">
                <description>Converts a string to all upper case letters</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The text to convert</description>
                    </parameter>
                </parameters>
            </method>
            <method name="capitalize" scope="instance">
                <description>Converts the first character only of a string to upper case</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The text to convert</description>
                    </parameter>
                </parameters>
            </method>
            <method name="usMoney" scope="instance">
                <description>Format a number as US currency</description>
                <parameters>
                    <parameter name="value" type="Number/String" usage="required">
                        <description>The numeric value to format</description>
                    </parameter>
                </parameters>
            </method>
            <method name="date" scope="instance">
                <description>Parse a value into a formatted date using the specified format pattern.</description>
                <parameters>
                    <parameter name="value" type="String/Date" usage="required">
                        <description>The value to format (Strings must conform to the format expected by the javascript Date object's &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_parse.asp&quot;&gt;parse()&lt;/a&gt; method)</description>
                    </parameter>
                    <parameter name="format" type="String" usage="optional">
                        <description>(optional) Any valid date format string (defaults to 'm/d/Y')</description>
                    </parameter>
                </parameters>
            </method>
            <method name="dateRenderer" scope="instance">
                <description>Returns a date rendering function that can be reused to apply a date format multiple times efficiently</description>
                <parameters>
                    <parameter name="format" type="String" usage="required">
                        <description>Any valid date format string</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stripTags" scope="instance">
                <description>Strips all HTML tags</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The text from which to strip tags</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stripScripts" scope="instance">
                <description>Strips all script tags</description>
                <parameters>
                    <parameter name="value" type="Mixed" usage="required">
                        <description>The text from which to strip script tags</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fileSize" scope="instance">
                <description>Simple format for a file size (xxx bytes, xxx KB, xxx MB)</description>
                <parameters>
                    <parameter name="size" type="Number/String" usage="required">
                        <description>The numeric value to format</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.util.JSON" superclass="Object">
        <description>Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t
            mess with the Object prototype
        http://www.json.org/js.html&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="encode" scope="instance">
                <description>Encodes an Object, Array or other value</description>
                <parameters>
                    <parameter name="o" type="Mixed" usage="required">
                        <description>The variable to encode</description>
                    </parameter>
                </parameters>
            </method>
            <method name="decode" scope="instance">
                <description>Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError.</description>
                <parameters>
                    <parameter name="json" type="String" usage="required">
                        <description>The JSON string</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.util.MixedCollection" superclass="apf.util.Observable">
        <description>A Collection class that maintains both numeric indexes and keys and exposes events.</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="allowFunctions" type="Boolean" usage="required">
                        <description>True if the addAll function should add function references to the
                        collection (defaults to false)</description>
                    </parameter>
                    <parameter name="keyFn" type="Function" usage="required">
                        <description>A function that can accept an item of the type(s) stored in this MixedCollection
                            and return the key value for that item. This is used when available to look up the key on items that
                            were passed without an explicit key parameter to a MixedCollection method. Passing this parameter is
                        equivalent to providing an implementation for the &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;getKey&quot; href=&quot;output/apf.util.MixedCollection.html#getKey&quot;&gt;getKey&lt;/a&gt; method.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="add" scope="instance">
                <description>Adds an item to the collection. Fires the &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;add&quot; href=&quot;output/apf.util.MixedCollection.html#add&quot;&gt;add&lt;/a&gt; event when complete.</description>
                <parameters>
                    <parameter name="key" type="String" usage="required">
                        <description>&lt;p&gt;The key to associate with the item, or the new item.&lt;/p&gt;
                            &lt;p&gt;If you supplied a &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;getKey&quot; href=&quot;output/apf.util.MixedCollection.html#getKey&quot;&gt;getKey&lt;/a&gt; implementation for this MixedCollection, or if the key
                            of your stored items is in a property called &lt;tt&gt;&lt;b&gt;id&lt;/b&gt;&lt;/tt&gt;, then the MixedCollection
                            will be able to &lt;i&gt;derive&lt;/i&gt; the key for the new item. In this case just pass the new item in
                        this parameter.&lt;/p&gt;</description>
                    </parameter>
                    <parameter name="o" type="Object" usage="required">
                        <description>The item to add.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getKey" scope="instance">
                <description>MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
                    simply returns &lt;tt style=&quot;font-weight:bold;&quot;&gt;item.id&lt;/tt&gt; but you can provide your own implementation
                    to return a different value as in the following examples:
                    &lt;pre&gt;&lt;code&gt;// normal way
                    var mc = new apf.util.MixedCollection();
                    mc.add(someEl.dom.id, someEl);
                    mc.add(otherEl.dom.id, otherEl);
                    //and so on

                    // using getKey
                    var mc = new apf.util.MixedCollection();
                    mc.getKey = function(el){
                    return el.dom.id;
                    };
                    mc.add(someEl);
                    mc.add(otherEl);

                    // or via the constructor
                    var mc = new apf.util.MixedCollection(false, function(el){
                    return el.dom.id;
                    });
                    mc.add(someEl);
                mc.add(otherEl);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="item" type="Object" usage="required">
                        <description>The item for which to find the key.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="replace" scope="instance">
                <description>Replaces an item in the collection. Fires the &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;replace&quot; href=&quot;output/apf.util.MixedCollection.html#replace&quot;&gt;replace&lt;/a&gt; event when complete.</description>
                <parameters>
                    <parameter name="key" type="String" usage="required">
                        <description>&lt;p&gt;The key associated with the item to replace, or the replacement item.&lt;/p&gt;
                            &lt;p&gt;If you supplied a &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;getKey&quot; href=&quot;output/apf.util.MixedCollection.html#getKey&quot;&gt;getKey&lt;/a&gt; implementation for this MixedCollection, or if the key
                            of your stored items is in a property called &lt;tt&gt;&lt;b&gt;id&lt;/b&gt;&lt;/tt&gt;, then the MixedCollection
                            will be able to &lt;i&gt;derive&lt;/i&gt; the key of the replacement item. If you want to replace an item
                        with one having the same key value, then just pass the replacement item in this parameter.&lt;/p&gt;</description>
                    </parameter>
                    <parameter name="{Object}" type="o" usage="optional">
                        <description>o (optional) If the first parameter passed was a key, the item to associate
                        with that key.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addAll" scope="instance">
                <description>Adds all elements of an Array or an Object to the collection.</description>
                <parameters>
                    <parameter name="objs" type="Object/Array" usage="required">
                        <description>An Object containing properties which will be added to the collection, or
                        an Array of values, each of which are added to the collection.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="each" scope="instance">
                <description>Executes the specified function once for every item in the collection, passing the following arguments:
                    &lt;div class=&quot;mdetail-params&quot;&gt;&lt;ul&gt;
                    &lt;li&gt;&lt;b&gt;item&lt;/b&gt; : Mixed&lt;p class=&quot;sub-desc&quot;&gt;The collection item&lt;/p&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;index&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The item's index&lt;/p&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;length&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The total number of items in the collection&lt;/p&gt;&lt;/li&gt;
                    &lt;/ul&gt;&lt;/div&gt;
                The function should return a boolean value. Returning false from the function will stop the iteration.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to execute for each item.</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the function.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="eachKey" scope="instance">
                <description>Executes the specified function once for every key in the collection, passing each
                key, and its associated item as the first two parameters.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to execute for each item.</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the function.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="find" scope="instance">
                <description>Returns the first item in the collection which elicits a true return value from the
                passed selection function.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The selection function to execute for each item.</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the function.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="insert" scope="instance">
                <description>Inserts an item at the specified index in the collection. Fires the &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;add&quot; href=&quot;output/apf.util.MixedCollection.html#add&quot;&gt;add&lt;/a&gt; event when complete.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index to insert the item at.</description>
                    </parameter>
                    <parameter name="key" type="String" usage="required">
                        <description>The key to associate with the new item, or the item itself.</description>
                    </parameter>
                    <parameter name="o" type="Object" usage="optional">
                        <description>(optional) If the second parameter was a key, the new item.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" scope="instance">
                <description>Remove an item from the collection.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The item to remove.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeAt" scope="instance">
                <description>Remove an item from a specified index in the collection. Fires the &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;remove&quot; href=&quot;output/apf.util.MixedCollection.html#remove&quot;&gt;remove&lt;/a&gt; event when complete.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index within the collection of the item to remove.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeKey" scope="instance">
                <description>Removed an item associated with the passed key fom the collection.</description>
                <parameters>
                    <parameter name="key" type="String" usage="required">
                        <description>The key of the item to remove.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getCount" scope="instance">
                <description>Returns the number of items in the collection.</description>
                <parameters/>
            </method>
            <method name="indexOf" scope="instance">
                <description>Returns index within the collection of the passed Object.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The item to find the index of.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOfKey" scope="instance">
                <description>Returns index within the collection of the passed key.</description>
                <parameters>
                    <parameter name="key" type="String" usage="required">
                        <description>The key to find the index of.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="item" scope="instance">
                <description>Returns the item associated with the passed key OR index. Key has priority over index.  This is the equivalent
                of calling &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;key&quot; href=&quot;output/apf.util.MixedCollection.html#key&quot;&gt;key&lt;/a&gt; first, then if nothing matched calling &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;itemAt&quot; href=&quot;output/apf.util.MixedCollection.html#itemAt&quot;&gt;itemAt&lt;/a&gt;.</description>
                <parameters>
                    <parameter name="key" type="String/Number" usage="required">
                        <description>The key or index of the item.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="itemAt" scope="instance">
                <description>Returns the item at the specified index.</description>
                <parameters>
                    <parameter name="index" type="Number" usage="required">
                        <description>The index of the item.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="key" scope="instance">
                <description>Returns the item associated with the passed key.</description>
                <parameters>
                    <parameter name="key" type="String/Number" usage="required">
                        <description>The key of the item.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="contains" scope="instance">
                <description>Returns true if the collection contains the passed Object as an item.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The Object to look for in the collection.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="containsKey" scope="instance">
                <description>Returns true if the collection contains the passed Object as a key.</description>
                <parameters>
                    <parameter name="key" type="String" usage="required">
                        <description>The key to look for in the collection.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clear" scope="instance">
                <description>Removes all items from the collection.  Fires the &lt;a ext:cls=&quot;apf.util.MixedCollection&quot; ext:member=&quot;clear&quot; href=&quot;output/apf.util.MixedCollection.html#clear&quot;&gt;clear&lt;/a&gt; event when complete.</description>
                <parameters/>
            </method>
            <method name="first" scope="instance">
                <description>Returns the first item in the collection.</description>
                <parameters/>
            </method>
            <method name="last" scope="instance">
                <description>Returns the last item in the collection.</description>
                <parameters/>
            </method>
            <method name="sort" scope="instance">
                <description>Sorts this collection with the passed comparison function</description>
                <parameters>
                    <parameter name="direction" type="String" usage="optional">
                        <description>(optional) &quot;ASC&quot; or &quot;DESC&quot;</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="optional">
                        <description>(optional) comparison function</description>
                    </parameter>
                </parameters>
            </method>
            <method name="keySort" scope="instance">
                <description>Sorts this collection by keys</description>
                <parameters>
                    <parameter name="direction" type="String" usage="optional">
                        <description>(optional) &quot;ASC&quot; or &quot;DESC&quot;</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="optional">
                        <description>(optional) a comparison function (defaults to case insensitive string)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getRange" scope="instance">
                <description>Returns a range of items in this collection</description>
                <parameters>
                    <parameter name="startIndex" type="Number" usage="optional">
                        <description>(optional) defaults to 0</description>
                    </parameter>
                    <parameter name="endIndex" type="Number" usage="optional">
                        <description>(optional) default to the last item</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filter" scope="instance">
                <description>Filter the &lt;i&gt;objects&lt;/i&gt; in this collection by a specific property.
                Returns a new collection that has been filtered.</description>
                <parameters>
                    <parameter name="property" type="String" usage="required">
                        <description>A property on your objects</description>
                    </parameter>
                    <parameter name="value" type="String/RegExp" usage="required">
                        <description>Either string that the property values
                        should start with or a RegExp to test against the property</description>
                    </parameter>
                    <parameter name="anyMatch" type="Boolean" usage="optional">
                        <description>(optional) True to match any part of the string, not just the beginning</description>
                    </parameter>
                    <parameter name="caseSensitive" type="Boolean" usage="optional">
                        <description>(optional) True for case sensitive comparison (defaults to False).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="filterBy" scope="instance">
                <description>Filter by a function. Returns a &lt;i&gt;new&lt;/i&gt; collection that has been filtered.
                    The passed function will be called with each object in the collection.
                If the function returns true, the value is included otherwise it is filtered.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to be called, it will receive the args o (the object), k (the key)</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to this)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findIndex" scope="instance">
                <description>Finds the index of the first matching object in this collection by a specific property/value.</description>
                <parameters>
                    <parameter name="property" type="String" usage="required">
                        <description>The name of a property on your objects.</description>
                    </parameter>
                    <parameter name="value" type="String/RegExp" usage="required">
                        <description>A string that the property values
                        should start with or a RegExp to test against the property.</description>
                    </parameter>
                    <parameter name="start" type="Number" usage="optional">
                        <description>(optional) The index to start searching at (defaults to 0).</description>
                    </parameter>
                    <parameter name="anyMatch" type="Boolean" usage="optional">
                        <description>(optional) True to match any part of the string, not just the beginning.</description>
                    </parameter>
                    <parameter name="caseSensitive" type="Boolean" usage="optional">
                        <description>(optional) True for case sensitive comparison.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="findIndexBy" scope="instance">
                <description>Find the index of the first matching object in this collection by a function.
                If the function returns &lt;i&gt;true&lt;/i&gt; it is considered a match.</description>
                <parameters>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to be called, it will receive the args o (the object), k (the key).</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the function (defaults to this).</description>
                    </parameter>
                    <parameter name="start" type="Number" usage="optional">
                        <description>(optional) The index to start searching at (defaults to 0).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clone" scope="instance">
                <description>Creates a duplicate of this collection</description>
                <parameters/>
            </method>
            <method name="get" scope="instance">
                <description>Returns the item associated with the passed key or index.</description>
                <parameters>
                    <parameter name="key" type="String/Number" usage="required">
                        <description>The key or index of the item.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.util.Observable" superclass="Object">
        <description>Abstract base class that provides a common interface for publishing events. Subclasses are expected to
            to have a property &quot;events&quot; with all the events defined.&lt;br&gt;
            For example:
            &lt;pre&gt;&lt;code&gt;Employee = function(name){
            this.name = name;
            this.addEvents({
            &quot;fired&quot; : true,
            &quot;quit&quot; : true
            });
            }
        apf.extend(Employee, apf.util.Observable);&lt;/code&gt;&lt;/pre&gt;</description>
        <properties/>
        <methods>
            <method name="fireEvent" scope="instance">
                <description>Fires the specified event with the passed parameters (minus the event name).</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description></description>
                    </parameter>
                    <parameter name="args" type="Object..." usage="required">
                        <description>Variable number of parameters are passed to handlers</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addListener" scope="instance">
                <description>Appends an event handler to this component</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to listen for</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the handler
                        function. The handler function's &quot;this&quot; context.</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional) An object containing handler configuration
                            properties. This may contain any of the following properties:&lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;scope&lt;/b&gt; : Object&lt;p class=&quot;sub-desc&quot;&gt;The scope in which to execute the handler function. The handler function's &quot;this&quot; context.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;delay&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;The number of milliseconds to delay the invocation of the handler after the event fires.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;single&lt;/b&gt; : Boolean&lt;p class=&quot;sub-desc&quot;&gt;True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/p&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;b&gt;buffer&lt;/b&gt; : Number&lt;p class=&quot;sub-desc&quot;&gt;Causes the handler to be scheduled to run in an &lt;a ext:cls=&quot;apf.util.DelayedTask&quot; href=&quot;output/apf.util.DelayedTask.html&quot;&gt;apf.util.DelayedTask&lt;/a&gt; delayed
                            by the specified number of milliseconds. If the event fires again within that time, the original
                            handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/p&gt;&lt;/li&gt;
                            &lt;/ul&gt;&lt;br&gt;
                            &lt;p&gt;
                            &lt;b&gt;Combining Options&lt;/b&gt;&lt;br&gt;
                            Using the options argument, it is possible to combine different types of listeners:&lt;br&gt;
                            &lt;br&gt;
                            A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
                            &lt;pre&gt;&lt;code&gt;el.on('click', this.onClick, this, {
                            single: true,
                            delay: 100,
                            forumId: 4
                            });&lt;/code&gt;&lt;/pre&gt;
                            &lt;p&gt;
                            &lt;b&gt;Attaching multiple handlers in 1 call&lt;/b&gt;&lt;br&gt;
                            The method also allows for a single argument to be passed which is a config object containing properties
                            which specify multiple handlers.
                            &lt;p&gt;
                            &lt;pre&gt;&lt;code&gt;foo.on({
                            'click' : {
                            fn: this.onClick,
                            scope: this,
                            delay: 100
                            },
                            'mouseover' : {
                            fn: this.onMouseOver,
                            scope: this
                            },
                            'mouseout' : {
                            fn: this.onMouseOut,
                            scope: this
                            }
                            });&lt;/code&gt;&lt;/pre&gt;
                            &lt;p&gt;
                            Or a shorthand syntax:&lt;br&gt;
                            &lt;pre&gt;&lt;code&gt;foo.on({
                            'click' : this.onClick,
                            'mouseover' : this.onMouseOver,
                            'mouseout' : this.onMouseOut,
                            scope: this
                        });&lt;/code&gt;&lt;/pre&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeListener" scope="instance">
                <description>Removes a listener</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to listen for</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The handler to remove</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope (this object) for the handler</description>
                    </parameter>
                </parameters>
            </method>
            <method name="purgeListeners" scope="instance">
                <description>Removes all listeners for this object</description>
                <parameters/>
            </method>
            <method name="relayEvents" scope="instance">
                <description>Relays selected events from the specified Observable as if the events were fired by &lt;tt&gt;&lt;b&gt;this&lt;/b&gt;&lt;/tt&gt;.</description>
                <parameters>
                    <parameter name="o" type="Object" usage="required">
                        <description>The Observable whose events this object is to relay.</description>
                    </parameter>
                    <parameter name="events" type="Array" usage="required">
                        <description>Array of event names to relay.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addEvents" scope="instance">
                <description>Used to define events on this Observable</description>
                <parameters>
                    <parameter name="object" type="Object" usage="required">
                        <description>The object with the events defined</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hasListener" scope="instance">
                <description>Checks to see if this object has any listeners for a specified event</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The name of the event to check for</description>
                    </parameter>
                </parameters>
            </method>
            <method name="suspendEvents" scope="instance">
                <description>Suspend the firing of all events. (see &lt;a ext:cls=&quot;apf.util.Observable&quot; ext:member=&quot;resumeEvents&quot; href=&quot;output/apf.util.Observable.html#resumeEvents&quot;&gt;resumeEvents&lt;/a&gt;)</description>
                <parameters/>
            </method>
            <method name="resumeEvents" scope="instance">
                <description>Resume firing events. (see &lt;a ext:cls=&quot;apf.util.Observable&quot; ext:member=&quot;suspendEvents&quot; href=&quot;output/apf.util.Observable.html#suspendEvents&quot;&gt;suspendEvents&lt;/a&gt;)</description>
                <parameters/>
            </method>
            <method name="on" scope="instance">
                <description>Appends an event handler to this element (shorthand for addListener)</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to listen for</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The method the event invokes</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope in which to execute the handler
                        function. The handler function's &quot;this&quot; context.</description>
                    </parameter>
                    <parameter name="options" type="Object" usage="optional">
                        <description>(optional)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="un" scope="instance">
                <description>Removes a listener (shorthand for removeListener)</description>
                <parameters>
                    <parameter name="eventName" type="String" usage="required">
                        <description>The type of event to listen for</description>
                    </parameter>
                    <parameter name="handler" type="Function" usage="required">
                        <description>The handler to remove</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope (this object) for the handler</description>
                    </parameter>
                </parameters>
            </method>
            <method name="Observable.capture" scope="static">
                <description>&amp;lt;static&amp;gt; Starts capture on the specified Observable. All events will be passed
                    to the supplied function with the event name + standard signature of the event
                    &lt;b&gt;before&lt;/b&gt; the event is fired. If the supplied function returns false,
                the event will not fire.</description>
                <parameters>
                    <parameter name="o" type="Observable" usage="required">
                        <description>The Observable to capture</description>
                    </parameter>
                    <parameter name="fn" type="Function" usage="required">
                        <description>The function to call</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope (this object) for the fn</description>
                    </parameter>
                </parameters>
            </method>
            <method name="Observable.releaseCapture" scope="static">
                <description>&amp;lt;static&amp;gt; Removes &lt;b&gt;all&lt;/b&gt; added captures from the Observable.</description>
                <parameters>
                    <parameter name="o" type="Observable" usage="required">
                        <description>The Observable to release</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="apf.util.TaskRunner" superclass="Object">
        <description>Provides the ability to execute one or more arbitrary tasks in a multithreaded manner.  Generally, you can use
            the singleton &lt;a ext:cls=&quot;apf.TaskMgr&quot; href=&quot;output/apf.TaskMgr.html&quot;&gt;apf.TaskMgr&lt;/a&gt; instead, but if needed, you can create separate instances of TaskRunner.  Any
            number of separate tasks can be started at any time and will run independently of each other.  Example usage:
            &lt;pre&gt;&lt;code&gt;// Start a simple clock task that updates a div once per second
            var task = {
            run: function(){
            apf.fly('clock').update(new Date().format('g:i:s A'));
            },
            interval: 1000 //1 second
            }
            var runner = new apf.util.TaskRunner();
        runner.start(task);&lt;/code&gt;&lt;/pre&gt;</description>
        <constructors>
            <constructor scope="instance">
                <description></description>
                <parameters>
                    <parameter name="interval" type="Number" usage="optional">
                        <description>(optional) The minimum precision in milliseconds supported by this TaskRunner instance
                        (defaults to 10)</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
        <properties/>
        <methods>
            <method name="start" scope="instance">
                <description>Starts a new task.</description>
                <parameters>
                    <parameter name="task" type="Object" usage="optional">
                        <description>A config object that supports the following properties:&lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;run&lt;/code&gt; : Function&lt;div class=&quot;sub-desc&quot;&gt;The function to execute each time the task is run. The
                            function will be called at each interval and passed the &lt;code&gt;args&lt;/code&gt; argument if specified. If a
                            particular scope is required, be sure to specify it using the &lt;code&gt;scope&lt;/scope&gt; argument.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;interval&lt;/code&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;The frequency in milliseconds with which the task
                            should be executed.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;args&lt;/code&gt; : Array&lt;div class=&quot;sub-desc&quot;&gt;(optional) An array of arguments to be passed to the function
                            specified by &lt;code&gt;run&lt;/code&gt;.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;scope&lt;/code&gt; : Object&lt;div class=&quot;sub-desc&quot;&gt;(optional) The scope in which to execute the
                            &lt;code&gt;run&lt;/code&gt; function.&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;duration&lt;/code&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;(optional) The length of time in milliseconds to execute
                            the task before stopping automatically (defaults to indefinite).&lt;/div&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;repeat&lt;/code&gt; : Number&lt;div class=&quot;sub-desc&quot;&gt;(optional) The number of times to execute the task before
                            stopping automatically (defaults to indefinite).&lt;/div&gt;&lt;/li&gt;
                        &lt;/ul&gt;</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stop" scope="instance">
                <description>Stops an existing running task.</description>
                <parameters>
                    <parameter name="task" type="Object" usage="required">
                        <description>The task to stop</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stopAll" scope="instance">
                <description>Stops all tasks that are currently running.</description>
                <parameters/>
            </method>
        </methods>
    </class>
    <class type="apf.util.TextMetrics" superclass="Object">
        <description>Provides precise pixel measurements for blocks of text so that you can determine exactly how high and
        wide, in pixels, a given block of text will be.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description>
        <properties/>
        <methods>
            <method name="measure" scope="instance">
                <description>Measures the size of the specified text</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The element, dom node or id from which to copy existing CSS styles
                        that can affect the size of the rendered text</description>
                    </parameter>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to measure</description>
                    </parameter>
                    <parameter name="fixedWidth" type="Number" usage="optional">
                        <description>(optional) If the text will be multiline, you have to set a fixed width
                        in order to accurately measure the text height</description>
                    </parameter>
                </parameters>
            </method>
            <method name="createInstance" scope="instance">
                <description>Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
                the overhead of multiple calls to initialize the style properties on each measurement.</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The element, dom node or id that the instance will be bound to</description>
                    </parameter>
                    <parameter name="fixedWidth" type="Number" usage="optional">
                        <description>(optional) If the text will be multiline, you have to set a fixed width
                        in order to accurately measure the text height</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getSize" scope="instance">
                <description>Returns the size of the specified text based on the internal element's style and width properties</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to measure</description>
                    </parameter>
                </parameters>
            </method>
            <method name="bind" scope="instance">
                <description>Binds this TextMetrics instance to an element from which to copy existing CSS styles
                that can affect the size of the rendered text</description>
                <parameters>
                    <parameter name="el" type="String/HTMLElement" usage="required">
                        <description>The element, dom node or id</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setFixedWidth" scope="instance">
                <description>Sets a fixed width on the internal measurement element.  If the text will be multiline, you have
                to set a fixed width in order to accurately measure the text height.</description>
                <parameters>
                    <parameter name="width" type="Number" usage="required">
                        <description>The width to set on the element</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getWidth" scope="instance">
                <description>Returns the measured width of the specified text</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to measure</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getHeight" scope="instance">
                <description>Returns the measured height of the specified text.  For multiline text, be sure to call
                &lt;a ext:cls=&quot;apf.util.TextMetrics&quot; ext:member=&quot;setFixedWidth&quot; href=&quot;output/apf.util.TextMetrics.html#setFixedWidth&quot;&gt;setFixedWidth&lt;/a&gt; if necessary.</description>
                <parameters>
                    <parameter name="text" type="String" usage="required">
                        <description>The text to measure</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Function" superclass="Object">
        <description>These functions are available on every Function object (any JavaScript function).</description>
        <properties/>
        <methods>
            <method name="createCallback" scope="instance">
                <description>Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
                    Call directly on any function. Example: &lt;code&gt;myFunction.createCallback(arg1, arg2)&lt;/code&gt;
                    Will create a function that is bound to those 2 args. &lt;b&gt;If a specific scope is required in the
                    callback, use &lt;a ext:cls=&quot;Function&quot; ext:member=&quot;createDelegate&quot; href=&quot;output/Function.html#createDelegate&quot;&gt;createDelegate&lt;/a&gt; instead.&lt;/b&gt; The function returned by createCallback always
                    executes in the window scope.
                    &lt;p&gt;This method is required when you want to pass arguments to a callback function.  If no arguments
                    are needed, you can simply pass a reference to the function as a callback (e.g., callback: myFn).
                    However, if you tried to pass a function with arguments (e.g., callback: myFn(arg1, arg2)) the function
                    would simply execute immediately when the code is parsed. Example usage:
                    &lt;pre&gt;&lt;code&gt;var sayHi = function(name){
                    alert('Hi, ' + name);
                    }

                    // clicking the button alerts &quot;Hi, Fred&quot;
                    new apf.Button({
                    text: 'Say Hi',
                    renderTo: apf.getBody(),
                    handler: sayHi.createCallback('Fred')
                });&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
            <method name="createDelegate" scope="instance">
                <description>Creates a delegate (callback) that sets the scope to obj.
                    Call directly on any function. Example: &lt;code&gt;this.myFunction.createDelegate(this, [arg1, arg2])&lt;/code&gt;
                    Will create a function that is automatically scoped to obj so that the &lt;tt&gt;this&lt;/tt&gt; variable inside the
                    callback points to obj. Example usage:
                    &lt;pre&gt;&lt;code&gt;var sayHi = function(name){
                    // Note this use of &quot;this.text&quot; here.  This function expects to
                    // execute within a scope that contains a text property.  In this
                    // example, the &quot;this&quot; variable is pointing to the btn object that
                    // was passed in createDelegate below.
                    alert('Hi, ' + name + '. You clicked the &quot;' + this.text + '&quot; button.');
                    }

                    var btn = new apf.Button({
                    text: 'Say Hi',
                    renderTo: apf.getBody()
                    });

                    // This callback will execute in the scope of the
                    // button instance. Clicking the button alerts
                    // &quot;Hi, Fred. You clicked the &quot;Say Hi&quot; button.&quot;
                btn.on('click', sayHi.createDelegate(btn, ['Fred']));&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="obj" type="Object" usage="optional">
                        <description>(optional) The object for which the scope is set</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description>
                    </parameter>
                    <parameter name="appendArgs" type="Boolean/Number" usage="optional">
                        <description>(optional) if True args are appended to call args instead of overriding,
                        if a number the args are inserted at the specified position</description>
                    </parameter>
                </parameters>
            </method>
            <method name="defer" scope="instance">
                <description>Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
                    &lt;pre&gt;&lt;code&gt;var sayHi = function(name){
                    alert('Hi, ' + name);
                    }

                    // executes immediately:
                    sayHi('Fred');

                    // executes after 2 seconds:
                    sayHi.defer(2000, this, ['Fred']);

                    // this syntax is sometimes useful for deferring
                    // execution of an anonymous function:
                    (function(){
                    alert('Anonymous');
                }).defer(100);&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="millis" type="Number" usage="required">
                        <description>The number of milliseconds for the setTimeout call (if 0 the function is executed immediately)</description>
                    </parameter>
                    <parameter name="obj" type="Object" usage="optional">
                        <description>(optional) The object for which the scope is set</description>
                    </parameter>
                    <parameter name="args" type="Array" usage="optional">
                        <description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description>
                    </parameter>
                    <parameter name="appendArgs" type="Boolean/Number" usage="optional">
                        <description>(optional) if True args are appended to call args instead of overriding,
                        if a number the args are inserted at the specified position</description>
                    </parameter>
                </parameters>
            </method>
            <method name="createSequence" scope="instance">
                <description>Create a combined function call sequence of the original function + the passed function.
                    The resulting function returns the results of the original function.
                    The passed fcn is called with the parameters of the original function. Example usage:
                    &lt;pre&gt;&lt;code&gt;var sayHi = function(name){
                    alert('Hi, ' + name);
                    }

                    sayHi('Fred'); // alerts &quot;Hi, Fred&quot;

                    var sayGoodbye = sayHi.createSequence(function(name){
                    alert('Bye, ' + name);
                    });

                sayGoodbye('Fred'); // both alerts show&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="fcn" type="Function" usage="required">
                        <description>The function to sequence</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the passed fcn (Defaults to scope of original function or window)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="createInterceptor" scope="instance">
                <description>Creates an interceptor function. The passed fcn is called before the original one. If it returns false,
                    the original one is not called. The resulting function returns the results of the original function.
                    The passed fcn is called with the parameters of the original function. Example usage:
                    &lt;pre&gt;&lt;code&gt;var sayHi = function(name){
                    alert('Hi, ' + name);
                    }

                    sayHi('Fred'); // alerts &quot;Hi, Fred&quot;

                    // create a new function that validates input without
                    // directly modifying the original function:
                    var sayHiToFriend = sayHi.createInterceptor(function(name){
                    return name == 'Brian';
                    });

                    sayHiToFriend('Fred');  // no alert
                sayHiToFriend('Brian'); // alerts &quot;Hi, Brian&quot;&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="fcn" type="Function" usage="required">
                        <description>The function to call before the original</description>
                    </parameter>
                    <parameter name="scope" type="Object" usage="optional">
                        <description>(optional) The scope of the passed fcn (Defaults to scope of original function or window)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Number" superclass="Object">
        <description></description>
        <properties/>
        <methods>
            <method name="constrain" scope="instance">
                <description>Checks whether or not the current number is within a desired range.  If the number is already within the
                    range it is returned, otherwise the min or max value is returned depending on which side of the range is
                exceeded.  Note that this method returns the constrained value but does not change the current number.</description>
                <parameters>
                    <parameter name="min" type="Number" usage="required">
                        <description>The minimum number in the range</description>
                    </parameter>
                    <parameter name="max" type="Number" usage="required">
                        <description>The maximum number in the range</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="String" superclass="Object">
        <description>These functions are available as static methods on the JavaScript String object.</description>
        <properties/>
        <methods>
            <method name="escape" scope="static">
                <description>&amp;lt;static&amp;gt; Escapes the passed string for ' and \</description>
                <parameters>
                    <parameter name="string" type="String" usage="required">
                        <description>The string to escape</description>
                    </parameter>
                </parameters>
            </method>
            <method name="leftPad" scope="static">
                <description>&amp;lt;static&amp;gt; Pads the left side of a string with a specified character.  This is especially useful
                    for normalizing number and date strings.  Example usage:
                    &lt;pre&gt;&lt;code&gt;var s = String.leftPad('123', 5, '0');
                // s now contains the string: '00123'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="string" type="String" usage="required">
                        <description>The original string</description>
                    </parameter>
                    <parameter name="size" type="Number" usage="required">
                        <description>The total length of the output string</description>
                    </parameter>
                    <parameter name="char" type="String" usage="optional">
                        <description>(optional) The character with which to pad the original string (defaults to empty string &quot; &quot;)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="format" scope="static">
                <description>&amp;lt;static&amp;gt; Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
                    token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
                    &lt;pre&gt;&lt;code&gt;var cls = 'my-class', text = 'Some text';
                    var s = String.format('&amp;lt;div class=&quot;{0}&quot;&gt;{1}&amp;lt;/div&gt;', cls, text);
                // s now contains the string: '&amp;lt;div class=&quot;my-class&quot;&gt;Some text&amp;lt;/div&gt;'&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="string" type="String" usage="required">
                        <description>The tokenized string to be formatted</description>
                    </parameter>
                    <parameter name="value1" type="String" usage="required">
                        <description>The value to replace token {0}</description>
                    </parameter>
                    <parameter name="value2" type="String" usage="required">
                        <description>Etc...</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toggle" scope="instance">
                <description>Utility function that allows you to easily switch a string between two alternating values.  The passed value
                    is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
                    they are already different, the first value passed in is returned.  Note that this method returns the new value
                    but does not change the current string.
                    &lt;pre&gt;&lt;code&gt;// alternate sort directions
                    sort = sort.toggle('ASC', 'DESC');

                    // instead of conditional logic:
                sort = (sort == 'ASC' ? 'DESC' : 'ASC');&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters>
                    <parameter name="value" type="String" usage="required">
                        <description>The value to compare to the current string</description>
                    </parameter>
                    <parameter name="other" type="String" usage="required">
                        <description>The new value to use if the string already equals the first value passed in</description>
                    </parameter>
                </parameters>
            </method>
            <method name="trim" scope="instance">
                <description>Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
                    &lt;pre&gt;&lt;code&gt;var s = '  foo bar  ';
                    alert('-' + s + '-');         //alerts &quot;- foo bar -&quot;
                alert('-' + s.trim() + '-');  //alerts &quot;-foo bar-&quot;&lt;/code&gt;&lt;/pre&gt;</description>
                <parameters/>
            </method>
        </methods>
    </class>
</javascript>
